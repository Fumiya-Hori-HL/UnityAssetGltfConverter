openapi: 3.0.1
info:
  title: Asset Manager API
  description: "The Asset Manager API provides endpoints for managing, discovering assets, reading user projects and organizations.\r\nThis API uses organization and project level roles to authorize requests."
  contact:
    name: API Support
    url: https://docs.unity.com/
    email: support@unity3d.com
    x-slack-channel: '#cloud-amc-api'
    x-slack-channel-alerts: '#cloud-amc-api'
  license:
    name: Unity Legal
  version: '1'
servers:
  - url: https://services.api.unity.com
    description: Production
  - url: https://staging.services.api.unity.com
    description: Staging
paths:
  '/assets/v1/organizations/{organizationId}/status':
    get:
      tags:
        - Asset management
      summary: List organization status flows.
      description: List status flows belonging to an organization.
      operationId: assets.v1.Assets.ReadStatusFlowsForOrganization
      parameters:
        - name: organizationId
          in: path
          description: The organization id.
          required: true
          schema:
            type: string
        - name: offset
          in: query
          description: The amount of entities to skip.
          schema:
            type: integer
            format: int32
            example: 10
          example: 10
        - name: limit
          in: query
          description: The page size.
          schema:
            maximum: 1000
            minimum: 1
            type: integer
            format: int32
            example: 25
          example: 25
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ReadStatusFlowsByOrganizationResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ReadStatusFlowsByOrganizationResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/projects/{projectId}/assets/{assetId}/versions/{assetVersion}/statusflows/{statusFlowId}/assign':
    post:
      tags:
        - Asset management
      summary: Assign status flow.
      description: Assign a status flow to an asset version.
      operationId: assets.v1.Assets.AssignStatusFlowToAssetVersion
      parameters:
        - name: projectId
          in: path
          description: The project id.
          required: true
          schema:
            type: string
            example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: assetId
          in: path
          description: The asset id.
          required: true
          schema:
            type: string
            example: 65325f523a625f7e1acdb197
          example: 65325f523a625f7e1acdb197
        - name: assetVersion
          in: path
          description: The asset version.
          required: true
          schema:
            type: string
            example: b095dce9-6034-44c4-a02a-d41d7afbfab5
          example: b095dce9-6034-44c4-a02a-d41d7afbfab5
        - name: statusFlowId
          in: path
          description: The status flow id.
          required: true
          schema:
            type: string
      responses:
        '415':
          description: Unsupported Media Type
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/projects/{projectId}/assets/{assetId}/versions/{assetVersion}/autosubmit/disable':
    post:
      tags:
        - Asset management
      summary: Disable the autosubmit mode.
      description: "If called in time, it will disable the autosubmit mode on an asset version.\r\n            After all the transformations complete, the asset will stay unfrozen."
      operationId: assets.v1.Assets.DisableAutoSubmit
      parameters:
        - name: projectId
          in: path
          description: The projectId.
          required: true
          schema:
            type: string
        - name: assetId
          in: path
          description: The assetId.
          required: true
          schema:
            type: string
        - name: assetVersion
          in: path
          description: The assetVersion.
          required: true
          schema:
            type: string
      responses:
        '415':
          description: Unsupported Media Type
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/projects/{projectId}/assets/{assetId}/versions/{assetVersion}/autosubmit':
    post:
      tags:
        - Asset management
      summary: AutoSubmit asset version.
      description: "Enable autosaving in an asset version.\r\n            If there are transformations running, the AutoSubmit flag will be enabled for the asset version, and as soon as all the transformations are complete, the asset version will be submitted. While in AutoSubmit mode, no changes are allowed on the asset version. In this case no versionNumber will be returned in the response.\r\n            If there are no transformations running, the asset version will be immediately submitted (as SubmitAssetVersion does). The new versionNumber assigned to the asset will be included in the response."
      operationId: assets.v1.Assets.AutoSubmitAssetVersion
      parameters:
        - name: projectId
          in: path
          description: The projectId.
          required: true
          schema:
            type: string
        - name: assetId
          in: path
          description: The assetId.
          required: true
          schema:
            type: string
        - name: assetVersion
          in: path
          description: The assetVersion.
          required: true
          schema:
            type: string
      requestBody:
        description: The request.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/assets.AutoSubmitAssetVersionRequest'
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.AutoSubmitAssetVersionResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.AutoSubmitAssetVersionResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/projects/{projectId}/assets/{assetId}/versions/{assetVersion}/metadata/rollback/{sequenceNumber}':
    patch:
      tags:
        - Asset management
      summary: Rolls the metadata of an asset version to a previous version.
      description: The endpoint to roll back metadata to a previous version.
      operationId: assets.v1.Assets.RollbackAssetVersionMetadataHistory
      parameters:
        - name: assetId
          in: path
          description: The Id of the asset.
          required: true
          schema:
            type: string
            example: b59940b38970
          example: b59940b38970
        - name: assetVersion
          in: path
          description: The asset version.
          required: true
          schema:
            type: string
            example: latest
          example: latest
        - name: projectId
          in: path
          description: The project id.
          required: true
          schema:
            type: string
            example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: sequenceNumber
          in: path
          description: The sequence to roll back to.
          required: true
          schema:
            type: integer
            format: int64
            example: 10
          example: 10
      responses:
        '415':
          description: Unsupported Media Type
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/projects/{projectId}/assets':
    post:
      tags:
        - Asset management
      summary: Create asset.
      description: "Create a new asset in a project with primary and custom metadata.\r\nNote that custom metadata needs first to be created in the organization library, through metadata field definition creation."
      operationId: assets.v1.Assets.CreateNewAsset
      parameters:
        - name: projectId
          in: path
          description: The id of the project where the asset will be created.
          required: true
          schema:
            type: string
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
      requestBody:
        description: The asset information to begin ingesting.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/assets.CreateNewAssetRequest'
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.CreateNewAssetResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.CreateNewAssetResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/libraries/{libraryId}/duplicate/projects/{destinationProjectId}':
    post:
      tags:
        - Library Management
      summary: Copy assets from library to a project.
      description: Copy assets from library to a project.
      operationId: assets.v1.Library.CopyLibraryAssetsToProject
      parameters:
        - name: libraryId
          in: path
          description: The library ID.
          required: true
          schema:
            type: string
          example: 1daf2f01-2e49-445f-afd4-7f4d998d6fa1
        - name: destinationProjectId
          in: path
          description: The project ID where the asset will be copied to.
          required: true
          schema:
            type: string
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
      requestBody:
        description: The assets to be copied.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/assets.DuplicateAsset'
      responses:
        '415':
          description: Unsupported Media Type
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/assets.LibraryJob'
            application/problem+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/assets.LibraryJob'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/libraries/jobs/duplication/{jobId}':
    get:
      tags:
        - Library Management
      summary: Read library job.
      description: Read library job.
      operationId: assets.v1.Library.GetLibraryJob
      parameters:
        - name: jobId
          in: path
          description: The job id.
          required: true
          schema:
            type: string
          example: 4230670b-99d0-48b5-a444-a23ecd2c2a50
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.LibraryJob'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.LibraryJob'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  /assets/v1/libraries/jobs/duplication:
    get:
      tags:
        - Library Management
      summary: Read library jobs.
      description: Read library jobs.
      operationId: assets.v1.Library.GetLibraryJobs
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/assets.LibraryJob'
            application/problem+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/assets.LibraryJob'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/libraries/{libraryId}':
    get:
      tags:
        - Library Management
      summary: Get library.
      description: Reads a library by id.
      operationId: assets.v1.Library.ReadLibrary
      parameters:
        - name: libraryId
          in: path
          description: The library identifier.
          required: true
          schema:
            type: string
        - name: includeFields
          in: query
          description: The optional fields to include in the response.
          schema:
            type: array
            items:
              type: string
            example:
              - hasCollection
          example:
            - hasCollection
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.Library'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.Library'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  /assets/v1/libraries:
    get:
      tags:
        - Library Management
      summary: List libraries.
      description: List libraries.
      operationId: assets.v1.Library.ReadLibraries
      parameters:
        - name: offset
          in: query
          description: The amount of entities to skip.
          schema:
            type: integer
            format: int32
            example: 10
          example: 10
        - name: limit
          in: query
          description: The page size.
          schema:
            maximum: 100
            minimum: 1
            type: integer
            format: int32
            example: 25
          example: 25
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ReadLibrariesResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ReadLibrariesResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/libraries/{libraryId}/assets/search':
    post:
      tags:
        - Library Management
      summary: Search assets by criteria.
      description: "Searches multiple assets filtering by the specified criteria.\r\n\n\r\nNote: if no labels filter is specified only versions with latest or pending labels will be returned.\r\n\n\r\nNote 2: Asset manager search endpoints work on the basis of the Eventual Consistency model. This means that at times, an update may take a short time to be reflected in search results."
      operationId: assets.v1.Library.SearchLibraryAssets
      parameters:
        - name: libraryId
          in: path
          description: The library id.
          required: true
          schema:
            type: string
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
      requestBody:
        description: The search asset request criteria.
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/assets.SearchAssetsRequest'
                - $ref: '#/components/schemas/assets.SearchAssetVersionsRequest'
              description: The request to read the assets.
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.SearchAssetsResponseV2'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.SearchAssetsResponseV2'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/libraries/{libraryId}/assets/{assetId}/versions/search':
    post:
      tags:
        - Library Management
      summary: Search asset versions by criteria.
      description: "Searches multiple assets filtering by the specified criteria.\r\n\n\r\nNote: Asset manager search endpoints work on the basis of the Eventual Consistency model. This means that at times, an update may take a short time to be reflected in search results.\r\n\n<b>Supported Query Objects</b>\r\n---\r\n\n<b>Exact Match</b>\nSearch for values that exactly match the field.\n<pre>{    \"type\": \"exact-match\",    \"value\": \"my-exact-value\"}</pre>\n\n<b>Date Range</b>\nSearch for values where the date field is in a given range.\n<pre>{    \"type\": \"date-range\",    \"conditions\" : [        {            \"conditionType\": \"greaterThanOrEqual\",            \"value\": \"2023-08-16T09:16:39Z\"        },        {            \"conditionType\": \"lessThan\",            \"value\": \"2023-08-27T09:00:00Z\"        },    ]}</pre>\n\n<b>Wildcard</b>\nSearch for values with wildcard placeholder characters ('?' for a single character, '*' for zero or more characters).\n<pre>{    \"type\": \"wildcard\",    \"value\": \"my-*-?-value\"}</pre>\n\n<b>Regex</b>\nSearch for values matching a regular expression.\n<pre>{    \"type\": \"regex\",    \"value\": \"^([1-9]|[a-z])\"}</pre>\n\n<b>Prefix</b>\nSearch for values beginning with a given term.\n<pre>{    \"type\": \"prefix\",    \"value\": \"term-starter\"}</pre>\n\n<b>Fuzzy</b>\nSearch for values similar to the given search term.<pre>{    \"type\": \"fuzzy\",    \"value\": \"bat\"}</pre>\n\n<b>Numeric Range</b>\nSearch for values in a given numeric range.<pre>{    \"type\": \"numeric-range\",    \"conditions\": [        {            \"conditionType\": \"greaterThanOrEqual\",            \"value\": 16384        },        {            \"conditionType\": \"lessThan\",            \"value\" : 1048576.256        }    ]}</pre>\n\n<b>AND Operator</b>\n<pre>{    \"type\": \"and\",    \"conditions\": [        {            \"type\" : \"prefix\",            \"value\": \"begins-with-this\"        },        {            \"type\": \"or\",            \"conditions\": [                {                    \"type\": \"wildcard\",                    \"value\": \"*-ends-with-this\"                },                {                    \"type\": \"wildcard\",                    \"value\": \"*-other-this\"                }            ]        }    ]}</pre>\n\n<b>OR Operator</b>\nSearch for results that match ONE or MORE of the given query conditions.<pre>{    \"type\": \"or\",    \"conditions\": [        {            \"type\" : \"prefix\",            \"value\": \"begins-with-this\"        },        {            \"type\": \"wildcard\",            \"value\": \"*-ends-with-this\"        }    ]}</pre>\n\n<b>NOT Operator</b>\nSearch for results that do NOT match the given query condition.<pre>{    \"type\": \"not\",    \"condition\": {        \"type\": \"or\",        \"conditions\": [            {                \"type\": \"prefix\",                \"value\": \"doesn't-begin-with-this\"            },            {                \"type\": \"wildcard\",                \"value\": \"*-or-end-with-this\"            }        ]    }}</pre>\n"
      operationId: assets.v1.Library.SearchLibraryAssetVersions
      parameters:
        - name: libraryId
          in: path
          description: The library id.
          required: true
          schema:
            type: string
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: assetId
          in: path
          description: The id of the asset.
          required: true
          schema:
            type: string
          example: 65325f523a625f7e1acdb197
      requestBody:
        description: The search asset versions request criteria.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/assets.SearchAssetVersionsRequest'
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.SearchAssetsResponseV2'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.SearchAssetsResponseV2'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/libraries/{libraryId}/assets/{assetId}/versions/{assetVersion}/datasets/{datasetId}/files':
    get:
      tags:
        - Library Management
      summary: Read asset files.
      description: Read asset files from a dataset in an asset.
      operationId: assets.v1.Library.ReadFiles
      parameters:
        - name: libraryId
          in: path
          description: The library id.
          required: true
          schema:
            type: string
        - name: assetId
          in: path
          description: The asset id.
          required: true
          schema:
            type: string
        - name: assetVersion
          in: path
          description: The asset version.
          required: true
          schema:
            type: string
        - name: datasetId
          in: path
          description: The dataset id.
          required: true
          schema:
            type: string
        - name: includeFields
          in: query
          description: The optional fields to include in the response.
          schema:
            type: array
            items:
              type: string
            example:
              - '*'
              - filePath
              - description
              - tags
              - portalMetadata
              - metadata
              - systemMetadata
              - userChecksum
              - fileSize
              - downloadURL
          example:
            - '*'
            - filePath
            - description
            - tags
            - portalMetadata
            - metadata
            - systemMetadata
            - userChecksum
            - fileSize
            - downloadURL
        - name: token
          in: query
          description: The pagination token.
          schema:
            type: string
        - name: limit
          in: query
          description: The amount of assets per page.
          schema:
            maximum: 2147483647
            minimum: 1
            type: integer
            format: int32
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ReadFilesResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ReadFilesResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/libraries/{libraryId}/assets/{assetId}/versions/{assetVersion}':
    get:
      tags:
        - Library Management
      summary: Get asset version.
      description: Return a single asset from a library with on-demand fields.
      operationId: assets.v1.Library.GetLibraryAsset
      parameters:
        - name: libraryId
          in: path
          description: The id of the library where the asset lives.
          required: true
          schema:
            type: string
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: assetId
          in: path
          description: The asset id.
          required: true
          schema:
            type: string
            example: 65325f523a625f7e1acdb197
          example: 65325f523a625f7e1acdb197
        - name: assetVersion
          in: path
          description: The asset version.
          required: true
          schema:
            type: string
            example: b095dce9-6034-44c4-a02a-d41d7afbfab5
          example: b095dce9-6034-44c4-a02a-d41d7afbfab5
        - name: includeFields
          in: query
          description: The optional fields to include in the response.
          schema:
            type: array
            items:
              type: string
            example:
              - '*'
              - name
              - description
              - tags
              - primaryType
              - portalMetadata
              - metadata
              - metadata.yourFieldName
              - systemMetadata.fieldName
              - datasets.*
              - datasets.name
              - datasets.isVisible
              - datasets.workflowName
              - datasets.description
              - datasets.tags
              - datasets.portalMetadata
              - datasets.metadata
              - datasets.systemMetadata
              - datasets.primaryType
              - files.*
              - files.filePath
              - files.description
              - files.tags
              - files.portalMetadata
              - files.metadata
              - files.systemMetadata
              - files.userChecksum
              - files.fileSize
              - files.downloadURL
              - files.previewURL
          example:
            - '*'
            - name
            - description
            - tags
            - primaryType
            - portalMetadata
            - metadata
            - metadata.yourFieldName
            - systemMetadata.fieldName
            - datasets.*
            - datasets.name
            - datasets.isVisible
            - datasets.workflowName
            - datasets.description
            - datasets.tags
            - datasets.portalMetadata
            - datasets.metadata
            - datasets.systemMetadata
            - datasets.primaryType
            - files.*
            - files.filePath
            - files.description
            - files.tags
            - files.portalMetadata
            - files.metadata
            - files.systemMetadata
            - files.userChecksum
            - files.fileSize
            - files.downloadURL
            - files.previewURL
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/assets.AssetRead'
                  - $ref: '#/components/schemas/assets.AssetReadV2'
                description: The get asset response.
            application/problem+json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/assets.AssetRead'
                  - $ref: '#/components/schemas/assets.AssetReadV2'
                description: The get asset response.
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/libraries/{libraryId}/assets/{assetId}/versions/{assetVersion}/datasets/{datasetId}/files/{filePath}/download-url':
    get:
      tags:
        - Library Management
      summary: Get download file URL.
      description: Return a download URL for a given file.
      operationId: assets.v1.Library.GetLibraryDownloadAssetFileUrl
      parameters:
        - name: libraryId
          in: path
          description: The id of the library where the asset lives.
          required: true
          schema:
            type: string
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: assetId
          in: path
          description: The ID of the asset.
          required: true
          schema:
            type: string
            example: 65325f523a625f7e1acdb197
          example: 65325f523a625f7e1acdb197
        - name: assetVersion
          in: path
          description: 'The version of the asset. For the time being, generated by the system.'
          required: true
          schema:
            type: string
            example: b095dce9-6034-44c4-a02a-d41d7afbfab5
          example: b095dce9-6034-44c4-a02a-d41d7afbfab5
        - name: datasetId
          in: path
          description: The ID of the dataset.
          required: true
          schema:
            type: string
            example: d21b2715-0c09-4c0d-ba8f-647291eacfd4
          example: d21b2715-0c09-4c0d-ba8f-647291eacfd4
        - name: filePath
          in: path
          description: The encoded path of the file. Serves as the unique identifier.
          required: true
          schema:
            type: string
            example: my-folder%2Fmy-file.txt
          example: my-folder%2Fmy-file.txt
        - name: width
          in: query
          description: '[Deprecated] This parameter is deprecated. Please use maxDimension instead./>'
          schema:
            type: integer
            format: int32
          example: 512
        - name: maxDimension
          in: query
          description: 'The desired length to resize the larger image dimension to, while maintaining the same aspect ratio. Should be between 50 and 3850. For DownloadURL.'
          schema:
            type: integer
            format: int32
          example: 512
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.GetAssetFileUrlResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.GetAssetFileUrlResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/libraries/{libraryId}/assets/{assetId}/versions/{assetVersion}/download-urls':
    get:
      tags:
        - Library Management
      summary: Get asset download URLs.
      description: 'Get all the files download URLs of one or several datasets of the same asset. Note that every asset has by default 2 datasets: The source and the preview. Download URLs are valid for ten minutes only.'
      operationId: assets.v1.Library.GetAssetDownloadURLs
      parameters:
        - name: libraryId
          in: path
          description: The id of the library.
          required: true
          schema:
            type: string
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: assetId
          in: path
          description: The id of the asset.
          required: true
          schema:
            type: string
          example: 65325f523a625f7e1acdb197
        - name: assetVersion
          in: path
          description: The version of the asset.
          required: true
          schema:
            type: string
          example: b095dce9-6034-44c4-a02a-d41d7afbfab5
        - name: limit
          in: query
          description: The limit of returning records for pagination.
          required: true
          schema:
            type: integer
            format: int32
          example: 10
        - name: offset
          in: query
          description: The pagination offset.
          schema:
            type: integer
            format: int32
            default: 1
          example: 1
        - name: datasets
          in: query
          description: The list of datasets from which to download files.
          schema:
            type: array
            items:
              type: string
        - name: maxDimension
          in: query
          description: 'The desired length to resize the larger image dimension to, while maintaining the same aspect ratio. Should be between 50 and 3850. For DownloadURL.'
          schema:
            type: integer
            format: int32
          example: 512
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.GetAssetDownloadUrlsResponseV2'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.GetAssetDownloadUrlsResponseV2'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/libraries/{libraryId}/collections':
    get:
      tags:
        - Library Management
      summary: List library collections.
      description: Return all collections within a library.
      operationId: assets.v1.Library.ReadLibraryCollections
      parameters:
        - name: libraryId
          in: path
          description: The library id.
          required: true
          schema:
            type: string
        - name: offset
          in: query
          description: The pagination offset.
          schema:
            type: integer
            format: int32
            example: 1
          example: 1
        - name: limit
          in: query
          description: The limit of returning records for pagination.
          schema:
            type: integer
            format: int32
            example: 20
          example: 20
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ReadCollectionsResponseV2'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ReadCollectionsResponseV2'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/libraries/{libraryId}/collections/{collectionPath}/assets/count':
    get:
      tags:
        - Library Management
      summary: Get the number of assets in a collection.
      description: Return the number of assets in collection.
      operationId: assets.v1.Library.ReadLibraryAssetCountOfCollection
      parameters:
        - name: libraryId
          in: path
          description: The id of the library where the asset lives.
          required: true
          schema:
            type: string
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: collectionPath
          in: path
          description: The encoded path of the collection. Must be URL escaped.
          required: true
          schema:
            type: string
            example: MainCollection%2FParentCollection
          example: MainCollection%2FParentCollection
        - name: includeSubCollections
          in: query
          description: Flag to include child collections' assets in the count.
          schema:
            type: boolean
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ReadAssetCountOfCollectionResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ReadAssetCountOfCollectionResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/libraries/{libraryId}/assets/count':
    get:
      tags:
        - Library Management
      summary: Count assets in library.
      description: Get the number of assets in a library.
      operationId: assets.v1.Library.CountAssetsInLibrary
      parameters:
        - name: libraryId
          in: path
          description: The library identifier.
          required: true
          schema:
            type: string
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ReadAssetCountOfProjectResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ReadAssetCountOfProjectResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/libraries/{libraryId}/templates/fields':
    get:
      tags:
        - Library Management
      summary: List field definitions.
      description: Return metadata field definition from the organization library.
      operationId: assets.v1.Library.ListFieldDefinitionsAsyncV2
      parameters:
        - name: libraryId
          in: path
          description: The library identifier.
          required: true
          schema:
            type: string
        - name: name
          in: query
          description: The field definition names.
          required: true
          schema:
            type: array
            items:
              type: string
        - name: limit
          in: query
          description: The amount of field definitions per page.
          schema:
            maximum: 1000
            minimum: 1
            type: integer
            format: int32
            default: 999
        - name: includeDeleted
          in: query
          description: A value indicating whether the result should include deleted fields.
          schema:
            type: boolean
            default: false
          example: false
        - name: token
          in: query
          description: The pagination token for the next page.
          schema:
            type: string
            default: ''
        - name: sortingOrder
          in: query
          description: The order to sort the fields.
          schema:
            $ref: '#/components/schemas/assets.SortOrder'
          example: Ascending
        - name: fieldOrigin
          in: query
          description: 'If defined, only search for fields with the specified FieldOrigin value (either ''User'' or ''System'')'
          schema:
            type: string
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ReadFieldDefinitionsResponseV2'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ReadFieldDefinitionsResponseV2'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/libraries/{libraryId}/assets/{assetId}/labels':
    get:
      tags:
        - Library Management
      summary: List asset versions labels.
      description: List all labels assigned across all versions of an asset.
      operationId: assets.v1.Library.ListAssetLabels
      parameters:
        - name: libraryId
          in: path
          description: The id of the library where the asset is located.
          required: true
          schema:
            type: string
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: assetId
          in: path
          description: The id of the asset.
          required: true
          schema:
            type: string
          example: 65325f523a625f7e1acdb197
        - name: offset
          in: query
          description: The amount of entities to skip.
          schema:
            type: integer
            format: int32
            example: 10
          example: 10
        - name: limit
          in: query
          description: The page size.
          schema:
            maximum: 1000
            minimum: 1
            type: integer
            format: int32
            example: 25
          example: 25
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ListAssignedLabelsFromAssetResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ListAssignedLabelsFromAssetResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/libraries/{libraryId}/labels':
    get:
      tags:
        - Library Management
      summary: Read labels.
      description: Get all the labels in the organization.
      operationId: assets.v1.Library.GetLabels
      parameters:
        - name: libraryId
          in: path
          description: The id of the library where the asset is located.
          required: true
          schema:
            type: string
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: status
          in: query
          description: The status of the labels to be returned.
          schema:
            $ref: '#/components/schemas/assets.LabelStatus'
          example: Active
        - name: isSystemLabel
          in: query
          description: The type of the labels to be returned.
          schema:
            type: boolean
            example: true
          example: true
        - name: offset
          in: query
          description: The amount of entities to skip.
          schema:
            type: integer
            format: int32
            example: 10
          example: 10
        - name: limit
          in: query
          description: The page size.
          schema:
            maximum: 1000
            minimum: 1
            type: integer
            format: int32
            example: 25
          example: 25
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.GetLabelsResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.GetLabelsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/projects/{projectId}/assets/{assetId}/references':
    post:
      tags:
        - Asset reference management
      summary: Create a reference .
      description: "<p>\r\n            Asset Manager supports modeling a dependency between two asset versions by using the concept of a <b><i>reference</i></b>.\r\n            A reference is an oriented link from one source asset version identified by [assetId, assetVersion] pair towards another target asset version.\r\n            The target asset version can be identified by the pair [assetId, assetVersion] or by the pair [assetId, labelName].\r\n            </p>\r\n<p>\r\n            The first, assetVersion-kind is a \"hard-link\" as target asset version is hardcoded into reference during creation of the reference.\r\n            </p>\r\n<p>\r\n            The second, labeled-kind is a \"soft-link\" as it represents the target defined as \"asset version of an asset identified by assetId and having assigned label labelName\".\r\n            As such, whenever the labelName is reassigned, the real target asset version is changed to the asset version just receiving the labelName.\r\n            This provides for semantics based referencing which will keep up with the assets' evolution.\r\n            </p>"
      operationId: assets.v1.References.CreateReference
      parameters:
        - name: projectId
          in: path
          description: The project id.
          required: true
          schema:
            type: string
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: assetId
          in: path
          description: The id of the source asset.
          required: true
          schema:
            type: string
          example: 65325f523a625f7e1acdb197
      requestBody:
        description: Request body to create a reference
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/assets.CreateAssetReferenceRequest'
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.CreateAssetReferenceResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.CreateAssetReferenceResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
    get:
      tags:
        - Asset reference management
      summary: List references originating in assetId.
      description: "<p>\r\n            The context query parameter can be used to filter the result.\r\n            </p>\r\n<p>\r\n            If context == source, This endpoint lists all the references with assetId and asset version as source assetId and source assetVersion.\r\n            </p>\r\n<p>\r\n            If context == target, This endpoint lists all the references with assetId and asset version as target assetId and target assetVersion.\r\n            </p>\r\n<p>\r\n            If not context is provided, this endpoint list all the references that has the assetId and assetVersion as its target or source.\r\n            </p>"
      operationId: assets.v1.References.ListReferences
      parameters:
        - name: projectId
          in: path
          description: The project id.
          required: true
          schema:
            type: string
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: assetId
          in: path
          description: The id of the asset.
          required: true
          schema:
            type: string
          example: 65325f523a625f7e1acdb197
        - name: AssetVersion
          in: query
          description: The asset version.
          schema:
            type: string
        - name: Context
          in: query
          description: The context to filter the result with.
          schema:
            $ref: '#/components/schemas/assets.Context'
        - name: offset
          in: query
          description: The amount of entities to skip.
          schema:
            type: integer
            format: int32
            example: 10
          example: 10
        - name: limit
          in: query
          description: The page size.
          schema:
            maximum: 255
            minimum: 1
            type: integer
            format: int32
            example: 25
          example: 25
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ReadAssetReferencesResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ReadAssetReferencesResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/projects/{projectId}/assets/{assetId}/versions/{assetVersion}/datasets/{datasetId}/files':
    post:
      tags:
        - File management
      summary: Create file.
      description: "Upload a file to an asset and define metadata. The file needs to belong to one dataset. By default, an asset has a source dataset and a preview dataset.\r\n\n\r\nWhen using the upload URL returned by this method, it is necessary to include the following header in your HTTP request:\r\n`x-ms-blob-type: BlockBlob`.\r\nThis header specifies the type of blob being uploaded to Azure Blob Storage and ensures that the upload operation is properly recognized and processed as a block blob.\r\n\n\r\nAdditionally, for streamed uploads where the file is uploaded in chunks, it is necessary to include the `Content-Type: application/octet-stream` header.\r\nThis ensures that the storage service correctly interprets the data being streamed and processes it without errors.\r\n\n<b>Failing to include the required headers may result in errors or unexpected behavior during the upload operation.</b>\r\nEnsure that all HTTP clients interacting with the upload URL are configured to set these headers correctly based on the upload method.\r\nNote: File metadata are not yet displayed on the Unity Asset Manager web. Returned URL is valid for one hour only."
      operationId: assets.v1.AssetFiles.CreateNewAssetFile
      parameters:
        - name: projectId
          in: path
          description: The id of the project where the asset belongs.
          required: true
          schema:
            type: string
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: assetId
          in: path
          description: The ID of the asset.
          required: true
          schema:
            type: string
          example: 65325f523a625f7e1acdb197
        - name: assetVersion
          in: path
          description: The version of the asset.
          required: true
          schema:
            type: string
          example: b095dce9-6034-44c4-a02a-d41d7afbfab5
        - name: datasetId
          in: path
          description: The ID of the dataset in which the file should be assigned.
          required: true
          schema:
            type: string
          example: d21b2715-0c09-4c0d-ba8f-647291eacfd4
      requestBody:
        description: The request containing the details of the file to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/assets.CreateNewAssetFileRequest'
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.CreateNewAssetFileResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.CreateNewAssetFileResponse'
        '206':
          description: Asset file is created but URL generation failed. Use the get upload url endpoint <a href="#tag/File-management/operation/assets_v1_AssetFiles_GetUploadAssetFileUrl">here</a> to fetch a new url.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.PartialCreateNewAssetFileResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.PartialCreateNewAssetFileResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
    get:
      tags:
        - File management
      summary: Read asset files.
      description: Read asset files from a dataset in an asset.
      operationId: assets.v1.AssetFiles.ReadFiles
      parameters:
        - name: projectId
          in: path
          description: The project id.
          required: true
          schema:
            type: string
        - name: assetId
          in: path
          description: The asset id.
          required: true
          schema:
            type: string
        - name: assetVersion
          in: path
          description: The asset version.
          required: true
          schema:
            type: string
        - name: datasetId
          in: path
          description: The dataset id.
          required: true
          schema:
            type: string
        - name: includeFields
          in: query
          description: The optional fields to include in the response.
          schema:
            type: array
            items:
              type: string
            example:
              - '*'
              - filePath
              - description
              - tags
              - portalMetadata
              - metadata
              - systemMetadata
              - userChecksum
              - fileSize
              - downloadURL
          example:
            - '*'
            - filePath
            - description
            - tags
            - portalMetadata
            - metadata
            - systemMetadata
            - userChecksum
            - fileSize
            - downloadURL
        - name: token
          in: query
          description: The pagination token.
          schema:
            type: string
        - name: limit
          in: query
          description: The amount of assets per page.
          schema:
            maximum: 2147483647
            minimum: 1
            type: integer
            format: int32
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ReadFilesResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ReadFilesResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/projects/{projectId}/assets/{assetId}/versions':
    post:
      tags:
        - Asset management
      summary: Create asset version.
      description: "Creates a new version of an existing asset. The new asset-version is in Unfrozen state.\r\nIf the new asset-version is created from an existing asset-version, the Previews and Sources datasets will be referenced from the base version(no new dataset versions created at this point)"
      operationId: assets.v1.Assets.CreateNewAssetVersion
      parameters:
        - name: projectId
          in: path
          description: The id of the project where the asset is located.
          required: true
          schema:
            type: string
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: assetId
          in: path
          description: The id of the asset.
          required: true
          schema:
            type: string
          example: 65325f523a625f7e1acdb197
      requestBody:
        description: The asset information to create a version from.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/assets.CreateNewAssetVersionRequest'
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.CreateNewAssetVersionResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.CreateNewAssetVersionResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/projects/{projectId}/assets/versions/bulk':
    post:
      tags:
        - Bulk Operations management
      summary: Create a bulk operation task for an asset version.
      description: "Creates a bulk operation that will be performed on a group of asset versions with a project. The bulk operation can be comprised of multiple operations.\r\nAn optional flag can be provided to freeze the asset versions once the operations have completed."
      operationId: assets.v1.BulkOperations.CreateAssetVersionBulkOperationTask
      parameters:
        - name: projectId
          in: path
          description: The project id.
          required: true
          schema:
            type: string
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
      requestBody:
        description: The request.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/assets.CreateAssetVersionBulkOperationTaskRequest'
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.CreateBulkOperationResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.CreateBulkOperationResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/projects/{projectId}/collections':
    post:
      tags:
        - Collection management
      summary: Create collection.
      description: Create a collection under a project. The special character '%' is not allowed in the collection name.
      operationId: assets.v1.Collections.CreateNewCollection
      parameters:
        - name: projectId
          in: path
          description: The id of the project where the collection will be created.
          required: true
          schema:
            type: string
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
      requestBody:
        description: The request containing the collection data.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/assets.CreateCollectionRequest'
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.CreateCollectionResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.CreateCollectionResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
    get:
      tags:
        - Collection management
      summary: List collections.
      description: Return all collections within a project.
      operationId: assets.v1.Collections.ReadCollections
      parameters:
        - name: projectId
          in: path
          description: The id of the project where the collection(s) live.
          required: true
          schema:
            type: string
            example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: offset
          in: query
          description: The amount of collections to skip.
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          description: The maximum number of collections to return.
          schema:
            type: integer
            format: int32
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/assets.CollectionRead'
            application/problem+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/assets.CollectionRead'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/projects/{projectId}/assets/{assetId}/versions/{assetVersion}/datasets':
    post:
      tags:
        - Dataset management
      summary: Create dataset.
      description: "Create a new dataset in an asset.\r\nNote: New datasets are not visible (yet) from the Unity Asset Manager. Neither is dataset metadata."
      operationId: assets.v1.Datasets.CreateNewDataset
      parameters:
        - name: projectId
          in: path
          description: The id of the project where the asset belongs.
          required: true
          schema:
            type: string
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: assetId
          in: path
          description: The id of the asset.
          required: true
          schema:
            type: string
          example: 65325f523a625f7e1acdb197
        - name: assetVersion
          in: path
          description: The version of the asset.
          required: true
          schema:
            type: string
          example: b095dce9-6034-44c4-a02a-d41d7afbfab5
      requestBody:
        description: The request to create a new dataset.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/assets.CreateNewDatasetRequest'
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.CreateNewDatasetResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.CreateNewDatasetResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
    get:
      tags:
        - Dataset management
      summary: Read datasets from an asset.
      description: Read datasets from an asset in a project.
      operationId: assets.v1.Datasets.ReadDatasets
      parameters:
        - name: projectId
          in: path
          description: The project id.
          required: true
          schema:
            type: string
        - name: assetId
          in: path
          description: The asset id.
          required: true
          schema:
            type: string
        - name: assetVersion
          in: path
          description: The asset version.
          required: true
          schema:
            type: string
        - name: includeFields
          in: query
          description: The optional fields to include in the response.
          schema:
            type: array
            items:
              type: string
            example:
              - '*'
              - description
              - tags
              - portalMetadata
              - metadata
              - systemMetadata
              - files
              - filesOrder
              - files.downloadURL
          example:
            - '*'
            - description
            - tags
            - portalMetadata
            - metadata
            - systemMetadata
            - files
            - filesOrder
            - files.downloadURL
        - name: token
          in: query
          description: The pagination token.
          schema:
            type: string
        - name: limit
          in: query
          description: The amount of assets per page.
          schema:
            maximum: 2147483647
            minimum: 1
            type: integer
            format: int32
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ReadDatasetsResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ReadDatasetsResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/organizations/{organizationId}/labels':
    post:
      tags:
        - Label management
      summary: Create label.
      description: Creates a new label in the organization.
      operationId: assets.v1.Labels.CreateNewLabel
      parameters:
        - name: organizationId
          in: path
          description: The organization id.
          required: true
          schema:
            type: string
          example: '5772925064011'
      requestBody:
        description: The request containing the information of the label to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/assets.CreateNewLabelRequest'
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.CreateNewLabelResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.CreateNewLabelResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
    get:
      tags:
        - Label management
      summary: Read labels.
      description: Get all the labels in the organization.
      operationId: assets.v1.Labels.GetLabels
      parameters:
        - name: organizationId
          in: path
          description: The organization id.
          required: true
          schema:
            type: string
          example: '5772925064011'
        - name: status
          in: query
          description: The status of the labels to be returned.
          schema:
            $ref: '#/components/schemas/assets.LabelStatus'
          example: Active
        - name: isSystemLabel
          in: query
          description: The type of the labels to be returned.
          schema:
            type: boolean
            example: true
          example: true
        - name: offset
          in: query
          description: The amount of entities to skip.
          schema:
            type: integer
            format: int32
            example: 10
          example: 10
        - name: limit
          in: query
          description: The page size.
          schema:
            maximum: 1000
            minimum: 1
            type: integer
            format: int32
            example: 25
          example: 25
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.GetLabelsResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.GetLabelsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/organizations/{organizationId}/entitlements':
    get:
      tags:
        - Organization management
      summary: Get entitlements.
      description: 'Returns the organization entitlements, the current user seat entitlements and whether or not the user has a valid seat.'
      operationId: assets.v1.Organizations.GetEntitlements
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ReadOrganizationEntitlementsAndUserSeatResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ReadOrganizationEntitlementsAndUserSeatResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/organizations/{organizationId}/projects':
    post:
      tags:
        - Project management
      summary: Create project.
      description: Create a new Asset Manager project in your organization.
      operationId: assets.v1.Projects.CreateNewProject
      parameters:
        - name: organizationId
          in: path
          description: The organization id.
          required: true
          schema:
            type: string
          example: '5772925064011'
      requestBody:
        description: The create project request.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/assets.CreateNewProjectRequest'
      responses:
        '415':
          description: Unsupported Media Type
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.CreateNewProjectResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.CreateNewProjectResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
    get:
      tags:
        - Project management
      summary: Read current user or service account projects.
      description: Endpoint for reading a list of projects in an org that the current user or service account has access to.
      operationId: assets.v1.Projects.GetProjectsAsyncV1
      parameters:
        - name: organizationId
          in: path
          description: The organization id.
          required: true
          schema:
            pattern: '^[a-zA-Z0-9\\\-\\%\/\:]{1,}$'
            type: string
          example: '5772925064011'
        - name: IncludeFields
          in: query
          description: The optional fields to include in the response.
          schema:
            type: array
            items:
              type: string
            example:
              - hasCollection
          example:
            - hasCollection
        - name: Page
          in: query
          description: The page.
          schema:
            type: integer
            format: int32
            example: 1
          example: 1
        - name: Limit
          in: query
          description: The page size.
          schema:
            maximum: 100
            minimum: 1
            type: integer
            format: int32
            example: 25
          example: 25
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ReadProjectsUserBelongsToResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ReadProjectsUserBelongsToResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/service-accounts/me/organizations/{organizationId}/projects':
    get:
      tags:
        - Service account management
      summary: '[Deprecated] Reads a list of projects in an org that a service account has access to.'
      description: '[Deprecated] To be deprecated from February 2024. Please use the get projects endpoint in the project management section.'
      operationId: assets.v1.ServiceAccounts.ReadProjectsMyServiceAccountHasAccessInOrg
      parameters:
        - name: organizationId
          in: path
          description: The organization id.
          required: true
          schema:
            type: string
          example: '5772925064011'
        - name: Page
          in: query
          description: The page.
          schema:
            type: integer
            format: int32
            example: 1
          example: 1
        - name: Limit
          in: query
          description: The page size.
          schema:
            maximum: 100
            minimum: 1
            type: integer
            format: int32
            example: 25
          example: 25
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ReadProjectsServiceAccountBelongsToResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ReadProjectsServiceAccountBelongsToResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
      deprecated: true
      security:
        - ServiceAccount: [ ]
  '/assets/v1/organizations/{organizationId}/templates/fields':
    post:
      tags:
        - Metadata fields management
      summary: Create field definition.
      description: Create a Metadata Field for your organization to add to assets. The Metadata field definition is stored in your metadata’s organization library.
      operationId: assets.v1.TemplateFieldDefinitions.CreateFieldDefinition
      parameters:
        - name: organizationId
          in: path
          description: The organization id.
          required: true
          schema:
            type: string
          example: '5772925064011'
      requestBody:
        description: The request containing the details of the field definition.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/assets.CreateFieldDefinitionRequest'
      responses:
        '415':
          description: Unsupported Media Type
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
    get:
      tags:
        - Metadata fields management
      summary: List field definitions.
      description: Return metadata field definition from the organization library.
      operationId: assets.v1.TemplateFieldDefinitions.ListFieldDefinitions
      parameters:
        - name: organizationId
          in: path
          description: The organization id.
          required: true
          schema:
            type: string
          example: '5772925064011'
        - name: IncludeDeleted
          in: query
          description: A value indicating whether the result should include deleted fields.
          schema:
            type: boolean
            example: false
          example: false
        - name: Next
          in: query
          description: The pagination token for the next page.
          schema:
            type: string
        - name: Limit
          in: query
          description: The amount of field definitions per page.
          schema:
            maximum: 1000
            minimum: 1
            type: integer
            format: int32
        - name: SortingOrder
          in: query
          description: The order to sort the fields.
          schema:
            $ref: '#/components/schemas/assets.SortOrder'
          example: Ascending
        - name: FieldOrigin
          in: query
          description: 'If defined, only search for fields with the specified FieldOrigin value (either ''User'' or ''System'')'
          schema:
            type: string
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ReadFieldDefinitionsResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ReadFieldDefinitionsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/projects/{projectId}/assets/{assetId}/versions/{assetVersion}/datasets/{datasetId}/transformations/start/{workflowType}':
    post:
      tags:
        - Asset transformations
      summary: Start transformation.
      description: "Endpoint for triggering a transformation of an asset using a specific workflow type.\n\n<i>NB this section contains documentation for Built-in workflows, which don't have other public docs yet, so this section might move elsewhere soon.</i>\n\r\nThe Asset Transformation API allows API users to run a workflow of a given type on an asset. For all workflows, this call creates an output dataset on the asset for that workflow type, and the workflow will run using the source dataset, or another dataset on the asset, as input. The workflow will run on this input dataset and generate files into the output dataset, which can be retrieved and downloaded.\r\n\n\r\nSome of the built-in workflows also have certain specific behaviour to modify other aspects of the asset. For example, the thumbnail-generator will generate previews in the output dataset, but then it will also link these previews to the preview dataset so that they will appear as previews in the UI. The metadata extraction workflow will add metadata to the asset from the metadata file generated.\r\n\n\r\nYou can use the optional inputFiles parameter to specify the input file in the dataset that should be used. For simpler assets with only a single source file, this is not always needed, although the video transcoding workflow does always need an input file.\r\n\n\n<b> - These are the different built-in workflows that can be called from the Start Transformation Endpoint: - </b>\n\n<b>3d-data-streaming</b>\n\r\nThis workflow is intended for large model review use cases. It utilizes Pixyz technology to produce a representation of a large 3D model utilizing hierarchical levels of detail that are dynamically streamed into a viewer at view time. Massive 3D models that are typical in architecture, geospatial applications, and other infrastructure projects are best prepared using this workflow. This workflow is only available in the Unity Enterprise Tier. You may consider using the glb-preview workflow as an alternative for small model previewing.\r\n\n<b>asset-manager-thumbnail-generator</b>\n\r\nThis workflow uses Pixyz technology to produce four 2d images from the X, Y, Z, and Isometric-front-left directions for previewing purposes. The model is first simplified and processed before a screenshot is taken from each camera angle.\r\n\n<b>asset-manager-glb-preview</b>\n\r\nThis workflow is intended for 3D model preview use cases in the Asset Manager viewer. It utilizes Pixyz technology to produce a simplified GLB representation of the input data. Note that this representation is meant to be lightweight and is not intended for detailed review use cases. Consider using the 3d-data-streaming workflow for large model review (requires enterprise tier).\r\n\n<b>asset-manager-video-transcoding</b>\n\r\nThis workflow will transcode videos using FFMPEG technology so that they can be scrubbed at high fidelity in the web viewer of the Asset Manager.\r\n\n<b>asset-manager-metadata-extraction</b>\n\r\nThis workflow generates a metadata JSON file containing extracted 3D model metadata, and adds that metadata to the asset.\r\n\n<b>free-tier-optimize-and-convert\nhigher-tier-optimize-and-convert</b>\n\r\nOptimize and Convert allows you to transform your 3D assets using customizable parameters for strategy, polygon targets, and outputs. Free-tier users can only convert generic file formats, while Pro and Enterprise/Industry tiers have the capability to optimize and convert all supported 3D file formats. For further details, please refer to the user documentation.\r\n\n<b> - Extra optional workflow parameters available per-workflow - </b>\n\n<b>asset-manager-thumbnail-generator:</b>\n<list type=\"bullet\"><ul><item><li><term>useEnvLight\n</term><description>1 or 0. Set to 1 to use custom env lighting map.</description></li></item><item><li><term>customEnvLight\n</term><description>Specify a custom environment map HDR file.</description></li></item><item><li><term>envLightRotation\n</term><description>Environment map rotation angle.</description></li></item><item><li><term>resolution\n</term><description>example \"3840 2160\"</description></li></item><item><li><term>views\n</term><description>Which views to generate. Default example \"front left top isoFrontLeftTop\"</description></li></item><item><li><term>outputFolder\n</term><description>Specify the output folder (need to URL encode the parameter)</description></li></item><item><li><term>outputPrefix\n</term><description>Specify a prefix text to use for naming the artifacts. Defaults to \"preview\"</description></li></item><item><li><term>outputSuffix\n</term><description>Specify a suffix text to use for naming the artifacts.</description></li></item><item><li><term>outputFileExt\n</term><description>specify the output artifacts extension type, Default for example \"png\"</description></li></item><item><li><term>backgroundColorRGBA\n</term><description>Specify the background color (RGBA) example \"0.2 0.2 0.2 0.2\"</description></li></item><item><li><term>forceConvertZUpToYUp\n</term><description>1 or 0, example \"1\"</description></li></item></ul></list><b>asset-manager-glb-preview:</b>\n<list type=\"bullet\"><ul><item><li><term>outputFilenameNoExtension\n</term><description>Specify text to use for naming the artifact. Defaults to \"preview\".</description></li></item><item><li><term>useKTX2Texture\n</term><description>1 or 0. Set to \"1\" to use KTX2 texture compression.Defaults to \"0\".</description></li></item><item><li><term>useDracoCompression\n</term><description>1 or 0. Set to \"1\" to use Draco mesh compression. Defaults to \"0\".</description></li></item></ul></list><b>asset-manager-video-transcoding:</b>\n<list type=\"bullet\"><ul><item><li><term>outputFolder\n</term><description>Specify the output folder (need to URL encode the parameter)</description></li></item><item><li><term>outputPrefix\n</term><description>Specify a prefix text to use for naming the artifacts. Defaults to \"transcoded\"</description></li></item><item><li><term>outputSuffix\n</term><description>Specify a suffix text to use for naming the artifacts.</description></li></item><item><li><term>createThumbnail\n</term><description>Specify whether to create a thumbnail. Defaults to \"0\".</description></li></item></ul></list><b>asset-manager-metadata-extraction:</b>\n<list type=\"bullet\"><ul><item><li><term>outputFolder\n</term><description>Specify the output folder (need to URL encode the parameter)</description></li></item><item><li><term>outputFileName\n</term><description>Specify the filename to output. Defaults to \"metadata\"</description></li></item></ul></list><b>free-tier-optimize-and-convert:</b>\n<list type=\"bullet\"><ul><item><li><term>outputFileName\n</term><description>Specify the filename to output. Defaults to \"output\".\n<b>Type:</b> String</description></li></item><item><li><term>exportFormats\n</term><description>Specify the output file extension list. Defaults to [\"glb\"].\n<b>Type:</b> Array of String</description></li></item></ul></list><b>higher-tier-optimize-and-convert:</b>\n<list type=\"bullet\"><ul><item><li><term>outputFileName\n</term><description>Specify the filename to output. Defaults to \"output\". \n<b>Type:</b> String</description></li></item><item><li><term>exportFormats\n</term><description>Specify the output file extension list. Defaults to [\"glb\"]. \n<b>Type:</b> Array of String</description></li></item><item><li><term>strategy\n</term><description>Specify to either use a polygon target number (triangleCount) or a ratio (ratio) between 0 and 100%. Defaults to “ratio”. \n<b>Type:</b> String</description></li></item><item><li><term>target\n</term><description>Specify the target polygon count or ratio (0-100%) for the processing of the file. Defaults to \"100\". \n<b>Type:</b> Integer</description></li></item><item><li><term>mergeOptimization\n</term><description>Specify if workflow needs to do a scene optimization by merging some components. Defaults to false. \n<b>Type:</b> Boolean</description></li></item><item><li><term>meshCleaning\n</term><description>Specify if workflow needs to do a scene optimization by deleting unnecessary objects. Defaults to false. \n<b>Type:</b> Boolean</description></li></item></ul></list><b>- Obsolete workflows -</b>\n\nthumbnail-generator\n\nmetadata-extraction\n\nglb-preview\n\nvideo-transcoding\n\ngeneric-polygon-target\n"
      operationId: assets.v1.Transformations.StartTransformation
      parameters:
        - name: projectId
          in: path
          description: The project id.
          required: true
          schema:
            type: string
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: assetId
          in: path
          description: The asset id.
          required: true
          schema:
            type: string
          example: 65325f523a625f7e1acdb197
        - name: assetVersion
          in: path
          description: The asset version.
          required: true
          schema:
            type: string
          example: b095dce9-6034-44c4-a02a-d41d7afbfab5
        - name: datasetId
          in: path
          description: The dataset id.
          required: true
          schema:
            type: string
          example: d21b2715-0c09-4c0d-ba8f-647291eacfd4
        - name: workflowType
          in: path
          description: 'The work flow type. Examples: "asset-manager-3d-data-streaming", "asset-manager-thumbnail-generator", "asset-manager-video-transcoding"'
          required: true
          schema:
            type: string
          example: thumbnail-generator
      requestBody:
        description: The request.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/assets.StartAssetTransformationRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/assets.StartAssetTransformationRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/assets.StartAssetTransformationRequest'
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.StartAssetTransformationResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.StartAssetTransformationResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorResponse'
  '/assets/v1/users/me/organizations/{organizationId}/projects':
    get:
      tags:
        - User management
      summary: '[Deprecated] Read current user projects.'
      description: '[Deprecated] Endpoint for reading a list of projects in an org that the current user has access to. To be deprecated from February 2024. Please use the get projects endpoint in the project management section.'
      operationId: assets.v1.Users.ReadProjectsMyUserHasAccessInOrg
      parameters:
        - name: organizationId
          in: path
          description: The organization id.
          required: true
          schema:
            pattern: '^[a-zA-Z0-9\\\-\\%\/\:]{1,}$'
            type: string
          example: '5772925064011'
        - name: Page
          in: query
          description: The page.
          schema:
            type: integer
            format: int32
            example: 1
          example: 1
        - name: Limit
          in: query
          description: The page size.
          schema:
            maximum: 100
            minimum: 1
            type: integer
            format: int32
            example: 25
          example: 25
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ReadProjectsUserBelongsToResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ReadProjectsUserBelongsToResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
      deprecated: true
      security:
        - Client: [ ]
  '/assets/v1/projects/{projectId}/assets/{assetId}/versions/{assetVersion}/files/{filePath}':
    patch:
      tags:
        - File management
      summary: '[Deprecated] Update file.'
      description: 'Update file metadata. Note: File metadata aren’t displayed yet on the Unity Asset Manager.'
      operationId: assets.v1.AssetFiles.UpdateAssetFile
      parameters:
        - name: projectId
          in: path
          description: The id of the project where the asset belongs.
          required: true
          schema:
            type: string
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: assetId
          in: path
          description: The ID of the asset.
          required: true
          schema:
            type: string
          example: 65325f523a625f7e1acdb197
        - name: assetVersion
          in: path
          description: The version of the asset to be updated.
          required: true
          schema:
            type: string
          example: b095dce9-6034-44c4-a02a-d41d7afbfab5
        - name: filePath
          in: path
          description: The encoded path of the file. Serves as the unique identifier.
          required: true
          schema:
            type: string
          example: my-folder%2Fmy-file.txt
      requestBody:
        description: The request containing the details of the file to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/assets.UpdateAssetFileRequest'
      responses:
        '415':
          description: Unsupported Media Type
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
      deprecated: true
  '/assets/v1/projects/{projectId}/assets/{assetId}/versions/{assetVersion}/datasets/{datasetId}/files/{filePath}':
    patch:
      tags:
        - File management
      summary: Update file.
      description: 'Update file metadata. Note: File metadata aren’t displayed yet on the Unity Asset Manager.'
      operationId: assets.v1.AssetFiles.UpdateAssetFileV2
      parameters:
        - name: projectId
          in: path
          description: The id of the project where the asset belongs.
          required: true
          schema:
            type: string
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: assetId
          in: path
          description: The ID of the asset.
          required: true
          schema:
            type: string
          example: 65325f523a625f7e1acdb197
        - name: assetVersion
          in: path
          description: The version of the asset.
          required: true
          schema:
            type: string
          example: b095dce9-6034-44c4-a02a-d41d7afbfab5
        - name: datasetId
          in: path
          description: The ID of the dataset in which the file should be updated (Placeholder for future feature).
          required: true
          schema:
            type: string
          example: d21b2715-0c09-4c0d-ba8f-647291eacfd4
        - name: filePath
          in: path
          description: The encoded path of the file. Serves as the unique identifier.
          required: true
          schema:
            type: string
          example: my-folder%2Fmy-file.txt
        - name: updateEvenIfFrozen
          in: query
          description: Whether to edit a frozen version of the asset.
          schema:
            type: boolean
            default: false
          example: false
      requestBody:
        description: The request containing the details of the file to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/assets.UpdateAssetFileRequestV2'
      responses:
        '415':
          description: Unsupported Media Type
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
    get:
      tags:
        - File management
      summary: Read asset file.
      description: Reads an asset file from an asset.
      operationId: assets.v1.AssetFiles.ReadFile
      parameters:
        - name: projectId
          in: path
          description: The project id.
          required: true
          schema:
            type: string
        - name: assetId
          in: path
          description: The asset id.
          required: true
          schema:
            type: string
        - name: assetVersion
          in: path
          description: The asset version.
          required: true
          schema:
            type: string
        - name: datasetId
          in: path
          description: The dataset id.
          required: true
          schema:
            type: string
        - name: filePath
          in: path
          description: The optional fields to include in the response.
          required: true
          schema:
            type: string
        - name: includeFields
          in: query
          description: The optional fields to include in the response.
          schema:
            type: array
            items:
              type: string
            example:
              - '*'
              - filePath
              - description
              - tags
              - portalMetadata
              - metadata
              - systemMetadata
              - userChecksum
              - fileSize
              - downloadURL
          example:
            - '*'
            - filePath
            - description
            - tags
            - portalMetadata
            - metadata
            - systemMetadata
            - userChecksum
            - fileSize
            - downloadURL
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.AssetFileRead'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.AssetFileRead'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
    delete:
      tags:
        - File management
      summary: Remove file from dataset.
      description: The endpoint to remove a file from a dataset/asset.
      operationId: assets.v1.AssetFiles.RemoveFileFromDataset
      parameters:
        - name: projectId
          in: path
          description: The id of the project where the asset belongs.
          required: true
          schema:
            type: string
            example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: assetId
          in: path
          description: The ID of the asset.
          required: true
          schema:
            type: string
            example: 65325f523a625f7e1acdb197
          example: 65325f523a625f7e1acdb197
        - name: assetVersion
          in: path
          description: The version of the asset.
          required: true
          schema:
            type: string
            example: b095dce9-6034-44c4-a02a-d41d7afbfab5
          example: b095dce9-6034-44c4-a02a-d41d7afbfab5
        - name: datasetId
          in: path
          description: The ID of the dataset.
          required: true
          schema:
            type: string
            example: 042fde6b-49b8-4017-a0dd-5f3a00f4bc5c
          example: 042fde6b-49b8-4017-a0dd-5f3a00f4bc5c
        - name: filePath
          in: path
          description: The encoded path of the file. Serves as the unique identifier.
          required: true
          schema:
            type: string
            example: my-folder%2my-file.txt
          example: my-folder%2my-file.txt
      responses:
        '415':
          description: Unsupported Media Type
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/projects/{projectId}/assets/{assetId}/versions/{assetVersion}/submit':
    post:
      tags:
        - Asset management
      summary: Submit asset version.
      description: "Submits an asset version that is not frozen.\r\n            It will return a failure if the asset has transformations still running. In this case, use AutoSubmitAssetVersion."
      operationId: assets.v1.Assets.SubmitAssetVersionAsyncV1
      parameters:
        - name: projectId
          in: path
          description: The id of the project where the asset is located.
          required: true
          schema:
            type: string
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: assetId
          in: path
          description: The id of the asset.
          required: true
          schema:
            type: string
          example: 65325f523a625f7e1acdb197
        - name: assetVersion
          in: path
          description: The asset version.
          required: true
          schema:
            type: string
          example: b095dce9-6034-44c4-a02a-d41d7afbfab5
      requestBody:
        description: The request containing the details of the request.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/assets.SubmitAssetVersionRequest'
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.SubmitAssetVersionResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.SubmitAssetVersionResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/projects/{projectId}/assets/versions/bulk/criteria':
    post:
      tags:
        - Bulk Operations management
      summary: Create a bulk operation task for specified search criteria.
      description: "Creates a bulk operation that will be performed on a group of asset versions in a project that match a set of search criteria.\r\nDue to a limit of 5000 assets per bulk operation, results exceeding this number will be grouped into multiple bulk operations.\r\nFor example, 15001 assets returned means 4 bulk operations are created."
      operationId: assets.v1.BulkOperations.CreateAssetVersionBulkOperationByCriteria
      parameters:
        - name: projectId
          in: path
          description: The project id.
          required: true
          schema:
            type: string
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
      requestBody:
        description: The request.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/assets.CreateAssetVersionBulkOperationByCriteriaRequest'
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.CreateBulkOperationByCriteriaResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.CreateBulkOperationByCriteriaResponse'
        '206':
          description: Partial Content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.PartialCreateBulkOperationByCriteriaResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.PartialCreateBulkOperationByCriteriaResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/projects/{projectId}/assets/{assetId}/versions/{assetVersion}/datasets/{datasetId}':
    patch:
      tags:
        - Dataset management
      summary: Update dataset.
      description: Update dataset metadata of an asset.
      operationId: assets.v1.Datasets.UpdateDataset
      parameters:
        - name: projectId
          in: path
          description: The id of the project where the asset belongs.
          required: true
          schema:
            type: string
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: assetId
          in: path
          description: The id of the asset.
          required: true
          schema:
            type: string
          example: 65325f523a625f7e1acdb197
        - name: assetVersion
          in: path
          description: The version of the asset.
          required: true
          schema:
            type: string
          example: b095dce9-6034-44c4-a02a-d41d7afbfab5
        - name: datasetId
          in: path
          description: The id of the dataset to be updated.
          required: true
          schema:
            type: string
          example: d21b2715-0c09-4c0d-ba8f-647291eacfd4
        - name: updateEvenIfFrozen
          in: query
          description: Whether to edit a frozen version of the asset.
          schema:
            type: boolean
            default: false
      requestBody:
        description: The request to update a dataset.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/assets.UpdateDatasetRequest'
      responses:
        '415':
          description: Unsupported Media Type
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
    get:
      tags:
        - Dataset management
      summary: Read dataset.
      description: Read a specific dataset from an asset.
      operationId: assets.v1.Datasets.ReadDataset
      parameters:
        - name: projectId
          in: path
          description: The project id.
          required: true
          schema:
            type: string
        - name: assetId
          in: path
          description: The asset id.
          required: true
          schema:
            type: string
        - name: assetVersion
          in: path
          description: The asset version.
          required: true
          schema:
            type: string
        - name: datasetId
          in: path
          description: The dataset id.
          required: true
          schema:
            type: string
        - name: includeFields
          in: query
          description: The optional fields to include in the response.
          schema:
            type: array
            items:
              type: string
            example:
              - '*'
              - description
              - tags
              - portalMetadata
              - metadata
              - systemMetadata
              - files
              - filesOrder
              - files.downloadURL
          example:
            - '*'
            - description
            - tags
            - portalMetadata
            - metadata
            - systemMetadata
            - files
            - filesOrder
            - files.downloadURL
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.DatasetWithFiles'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.DatasetWithFiles'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/projects/{projectId}':
    get:
      tags:
        - Project management
      summary: Get project.
      description: Reads a project by id.
      operationId: assets.v1.Projects.ReadProjectAsyncV1
      parameters:
        - name: projectId
          in: path
          description: The project identifier.
          required: true
          schema:
            type: string
        - name: includeFields
          in: query
          description: The optional fields to include in the response.
          schema:
            type: array
            items:
              type: string
            example:
              - hasCollection
          example:
            - hasCollection
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.Project'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.Project'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/projects/{projectId}/assets/{assetId}/versions/{assetVersion}/datasets/{datasetId}/transformations/{transformationId}':
    get:
      tags:
        - Asset transformations
      summary: Get transformation.
      description: 'Endpoint to get all information around a workflow: Who, what, on what, progress, the result and the status.'
      operationId: assets.v1.Transformations.ReadDatasetTransformation
      parameters:
        - name: projectId
          in: path
          description: The project id.
          required: true
          schema:
            type: string
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: assetId
          in: path
          description: The asset id.
          required: true
          schema:
            type: string
          example: 65325f523a625f7e1acdb197
        - name: assetVersion
          in: path
          description: The asset version.
          required: true
          schema:
            type: string
          example: b095dce9-6034-44c4-a02a-d41d7afbfab5
        - name: datasetId
          in: path
          description: The dataset id.
          required: true
          schema:
            type: string
          example: d21b2715-0c09-4c0d-ba8f-647291eacfd4
        - name: transformationId
          in: path
          description: The transformation id.
          required: true
          schema:
            type: string
          example: 65539cd99a369779bd0d57ca
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.TransformationReadResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.TransformationReadResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorResponse'
  '/assets/v1/users/{userId}/organizations/{organizationId}/projects':
    get:
      tags:
        - User management
      summary: Get user projects.
      description: Endpoint for reading a list of projects in an org that a user has access to.
      operationId: assets.v1.Users.ReadProjectsUserHasAccessInOrgAsyncV1
      parameters:
        - name: userId
          in: path
          description: The user id.
          required: true
          schema:
            type: string
          example: '5772925064006'
        - name: organizationId
          in: path
          description: The organization id.
          required: true
          schema:
            pattern: '^[a-zA-Z0-9\\\-\\%\/\:]{1,}$'
            type: string
          example: '5772925064011'
        - name: Page
          in: query
          description: The page.
          schema:
            type: integer
            format: int32
            example: 1
          example: 1
        - name: Limit
          in: query
          description: The page size.
          schema:
            maximum: 100
            minimum: 1
            type: integer
            format: int32
            example: 25
          example: 25
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ReadProjectsUserBelongsToResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ReadProjectsUserBelongsToResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
      security:
        - Client: [ ]
  '/assets/v1/projects/{projectId}/assets/{assetId}/versions/{assetVersion}/references/recursive/{direction}':
    get:
      tags:
        - Asset reference management
      summary: List references originating in an asset version recursively.
      description: "<p>\r\n            This endpoint traverses the tree formed by nodes defined by [assetId,assetVersion] and references being the directed edges in the tree.\r\n            Direction of the reference (edge in graph) is defined as direction from reference's source asset version towards target asset version.\r\n            The start of the lookup is defined by pair [assetId, assetVersion]. It is the asset version where the recursive lookup will originate from.\r\n            The endpoint requires the user to choose the direction of traversal by specifying a value for direction parameter.\r\n            This direction is used on the originating asset version as well as on all visited asset versions recursively.\r\n            </p>\r\n<p>\r\n            Direction <i>Downstream</i>\r\n            traverses the tree in the direction of the references, visiting asset versions that the originating asset version depends on.\r\n            </p>\r\n<p>\r\n            With the direction <i>Upstream</i> specified,\r\n            the endpoint traverses the tree against reference direction, it goes into asset versions depending on the lookup originating asset version.\r\n            </p>\r\n<p>\r\n            Tree lookup uses breadth-first search algorithm to return immediate dependent nodes first.\r\n            When the lookup ends because of all nodes has been visited or <b>limit</b> number of references has been reached,\r\n            the references visited are returned in the <b><i>result</i></b> field\r\n            and all unhandled nodes are returned in <b><i>unresolved</i></b> field.\r\n            </p>\r\n<p>\r\n            To continue searching, the client has to issue the request for elements in <b><i>unresolved</i></b> field from the previous responses. The client must pass unresolved's assetId and assetVersion into\r\n            the url and should the element in <b><i>unresolved</i></b> contain <b><i>next</i></b> value, this value should be put into url as a value for request.next .\r\n            </p>\r\n<p>\r\n            This allows lookup algorithm to continue searching from exactly the point the search was abandoned before.\r\n            These requests could be issues in parallel (to some reasonable degree) to speed up retrieving the references.\r\n            </p>\r\n<p>\r\n            Example of serial implementation of retrieving references recursively using tree pagination :\r\n            </p>\r\n\n\r\n```\r\n            projectId = ... get id of the project in question\r\n            direction = ... choose <i>Downstream</i> or <i>Upstream</i>\r\n            limit = ... choose suitable page size, the maximal number of references to be returned from the endpoint, up to 1000.\r\n            resolvedAssetVersions = ... empty set, will contain all [assetId,assetVersion] from complete lookup; important to be a set with properly defined equality for pairs [assetId, assetVersion]\r\n            allReferences = ... empty set, will contain all references found\r\n            \n\r\n            queue = { [assetId, assetVersion, token:null ] }\r\n            while ( queue is not empty )\r\n            {\r\n                current = queue.pop();\r\n                if (resolvedAssetVersions.Contains(current))\r\n                    continue;\r\n            \n\r\n                [result, unresolved] = ListReferencesRecursive( projectId, current.assetId, current.assetVersion, direction, { next: current.Next, limit: limit });\r\n            \n\r\n                allReferences.Add( result );\r\n                foreach ( newlyVisited in unresolved.Where( un => !resolvedAssetVersions.Contains(un)) )\r\n                    queue.Enqueue(newlyVisited);\r\n            \n\r\n                if (!unresolved.Contains(current))\r\n                    resolvedAssetVersions.Add(current);\r\n            }\r\n            \n\r\n            resolvedAssetVersions ... contains all pairs of [assetId, assetVersion] the originating asset version depends on (for Downstream) or influences (for Upstream)\r\n            allReferences ... will contain all visited references.\r\n            \n\n```\r\n<p>\r\n            References could form an oriented circle. This is not recommended, but the situation is not prevented from occurring by the Asset Manager backend,\r\n            therefore should be handled by the client. Infinite visiting of nodes in a circle is prevented by checking <b>resolvedAssetVersions</b> before proceeding in the loop body.\r\n            A more sophisticated mechanism can be put there to display circles to the user.\r\n            </p>\r\n<p>\r\n            References could also form a diamond shape with one asset version being dependent on another asset version across multiple reference paths.\r\n            Traversing across these paths would not cause an infinite loop, it would just duplicate results, but this is also prevented by consulting <b>resolvedAssetVersions</b>\r\n            in the loop.\r\n            </p>\r\n<p>\r\n            if direction == <i>Downstream</i>, This endpoint lists all the references with assetId and asset version as source assetId and source assetVersion.\r\n            </p>\r\n<p>\r\n            if direction == <i>Upstream</i>, This endpoint lists all the references with assetId and asset version as target assetId and target assetVersion.\r\n            </p>"
      operationId: assets.v1.References.ListReferencesRecursive
      parameters:
        - name: projectId
          in: path
          description: The project id.
          required: true
          schema:
            type: string
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: assetId
          in: path
          description: The id of the asset.
          required: true
          schema:
            type: string
          example: 65325f523a625f7e1acdb197
        - name: assetVersion
          in: path
          description: The asset version.
          required: true
          schema:
            type: string
          example: b095dce9-6034-44c4-a02a-d41d7afbfab5
        - name: direction
          in: path
          description: The recursive references search direction.
          required: true
          schema:
            $ref: '#/components/schemas/assets.ReferencesDirection'
        - name: next
          in: query
          description: The pagination token for the next page.
          schema:
            type: string
        - name: limit
          in: query
          description: The amount of references per page.
          schema:
            maximum: 1000
            minimum: 1
            type: integer
            format: int32
            example: 25
          example: 25
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ReadAssetReferencesRecursiveResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ReadAssetReferencesRecursiveResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/projects/{projectId}/assets/{assetId}/versions/{assetVersion}':
    patch:
      tags:
        - Asset management
      summary: Update asset version.
      description: Update the asset metadata and define which file should be used as the cover image for the Unity Asset Manager web.
      operationId: assets.v1.Assets.UpdateAsset
      parameters:
        - name: projectId
          in: path
          description: The id of the project where the asset lives.
          required: true
          schema:
            type: string
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: assetId
          in: path
          description: The id of the asset.
          required: true
          schema:
            type: string
          example: 65325f523a625f7e1acdb197
        - name: assetVersion
          in: path
          description: The version of the asset.
          required: true
          schema:
            type: string
          example: b095dce9-6034-44c4-a02a-d41d7afbfab5
        - name: updateEvenIfFrozen
          in: query
          description: Flag to determine if users should be able to edit a frozen version.
          schema:
            type: boolean
            default: false
      requestBody:
        description: The asset information to begin ingesting.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/assets.UpdateAssetRequest'
      responses:
        '415':
          description: Unsupported Media Type
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
    get:
      tags:
        - Asset management
      summary: Get asset version.
      description: Return a single asset from a project with on-demand fields.
      operationId: assets.v1.Assets.GetAsset
      parameters:
        - name: projectId
          in: path
          description: The id of the project where the asset lives.
          required: true
          schema:
            type: string
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: assetId
          in: path
          description: The id of the asset.
          required: true
          schema:
            type: string
          example: 65325f523a625f7e1acdb197
        - name: assetVersion
          in: path
          description: The version of the asset.
          required: true
          schema:
            type: string
          example: b095dce9-6034-44c4-a02a-d41d7afbfab5
        - name: IncludeFields
          in: query
          description: The optional fields to include in the response.
          schema:
            type: array
            items:
              type: string
            example:
              - '*'
              - name
              - description
              - tags
              - primaryType
              - portalMetadata
              - metadata
              - metadata.yourFieldName
              - systemMetadata.fieldName
              - datasets.*
              - datasets.name
              - datasets.isVisible
              - datasets.workflowName
              - datasets.description
              - datasets.tags
              - datasets.portalMetadata
              - datasets.metadata
              - datasets.systemMetadata
              - datasets.primaryType
              - files.*
              - files.filePath
              - files.description
              - files.tags
              - files.portalMetadata
              - files.metadata
              - files.systemMetadata
              - files.userChecksum
              - files.fileSize
              - files.downloadURL
              - files.previewURL
          example:
            - '*'
            - name
            - description
            - tags
            - primaryType
            - portalMetadata
            - metadata
            - metadata.yourFieldName
            - systemMetadata.fieldName
            - datasets.*
            - datasets.name
            - datasets.isVisible
            - datasets.workflowName
            - datasets.description
            - datasets.tags
            - datasets.portalMetadata
            - datasets.metadata
            - datasets.systemMetadata
            - datasets.primaryType
            - files.*
            - files.filePath
            - files.description
            - files.tags
            - files.portalMetadata
            - files.metadata
            - files.systemMetadata
            - files.userChecksum
            - files.fileSize
            - files.downloadURL
            - files.previewURL
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/assets.AssetRead'
                  - $ref: '#/components/schemas/assets.AssetReadV2'
                description: The get asset response.
            application/problem+json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/assets.AssetRead'
                  - $ref: '#/components/schemas/assets.AssetReadV2'
                description: The get asset response.
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
    delete:
      tags:
        - Asset management
      summary: Delete an unfrozen asset version.
      description: Delete an unfrozen asset version.
      operationId: assets.v1.Assets.DeleteAssetVersion
      parameters:
        - name: projectId
          in: path
          description: The project id.
          required: true
          schema:
            type: string
            example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: assetId
          in: path
          description: The id of the asset.
          required: true
          schema:
            type: string
            example: b59940b38970
          example: b59940b38970
        - name: assetVersion
          in: path
          description: The asset version.
          required: true
          schema:
            type: string
            example: b59940b38970
          example: b59940b38970
      responses:
        '415':
          description: Unsupported Media Type
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/organizations/{organizationId}/bulk/definitions':
    get:
      tags:
        - Bulk Operations management
      summary: Read bulk operation definitions.
      description: Reads the definitions of available operations that can be performed as part of a bulk operation.
      operationId: assets.v1.BulkOperations.ReadBulkOperationDefinitions
      parameters:
        - name: organizationId
          in: path
          description: The organization id.
          required: true
          schema:
            type: string
          example: '5772925064011'
        - name: resourceType
          in: query
          description: Optional filter for resource type..
          schema:
            type: string
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ReadBulkOperationDefinitionsResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ReadBulkOperationDefinitionsResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/projects/{projectId}/collections/{collectionPath}':
    patch:
      tags:
        - Collection management
      summary: Update collection.
      description: Update a collection name or description.
      operationId: assets.v1.Collections.UpdateCollection
      parameters:
        - name: projectId
          in: path
          description: The id of the project where the collection exists.
          required: true
          schema:
            type: string
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: collectionPath
          in: path
          description: The full path of the collection to be updated. Must be URL escaped.
          required: true
          schema:
            type: string
          example: MainCollection%2FParentCollection%2FTheCollection
      requestBody:
        description: The request containing the collection data.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/assets.UpdateCollectionRequest'
      responses:
        '415':
          description: Unsupported Media Type
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
    put:
      tags:
        - Collection management
      summary: '[Deprecated] Update collection.'
      description: Update collection name.
      operationId: assets.v1.Collections.UpdateCollectionOld
      parameters:
        - name: projectId
          in: path
          description: The id of the project where the collections lives.
          required: true
          schema:
            type: string
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: collectionPath
          in: path
          description: The path of the collection to be updated. Must be URL escaped.
          required: true
          schema:
            type: string
          example: MainCollection%2FParentCollection
      requestBody:
        description: The request containing the collection data.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/assets.UpdateCollectionRequest'
      responses:
        '415':
          description: Unsupported Media Type
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
      deprecated: true
    get:
      tags:
        - Collection management
      summary: Get collection.
      description: 'Return collection’s name, parent path and description.'
      operationId: assets.v1.Collections.ReadCollection
      parameters:
        - name: projectId
          in: path
          description: The id of the project where the collection lives.
          required: true
          schema:
            type: string
            example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: collectionPath
          in: path
          description: The encoded path of the collection. Must be URL escaped.
          required: true
          schema:
            type: string
            example: MainCollection%2FParentCollection
          example: MainCollection%2FParentCollection
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.CollectionRead'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.CollectionRead'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
    delete:
      tags:
        - Collection management
      summary: Delete collection.
      description: Delete collection and child collection(s) if any.
      operationId: assets.v1.Collections.DeleteCollection
      parameters:
        - name: projectId
          in: path
          description: The id of the project where the collection lives.
          required: true
          schema:
            type: string
            example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: collectionPath
          in: path
          description: The path of the collection. Must be URL escaped.
          required: true
          schema:
            type: string
            example: MainCollection%2FMyCollection
          example: MainCollection%2FMyCollection
      responses:
        '415':
          description: Unsupported Media Type
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/organizations/{organizationId}/labels/{labelName}':
    patch:
      tags:
        - Label management
      summary: Update label.
      description: Updates a label in the organization. Only non system labels are allowed to be updated.
      operationId: assets.v1.Labels.UpdateLabel
      parameters:
        - name: organizationId
          in: path
          description: The organization id.
          required: true
          schema:
            type: string
          example: '5772925064011'
        - name: labelName
          in: path
          description: The current label name.
          required: true
          schema:
            type: string
          example: production
      requestBody:
        description: The request containing the new values for the label.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/assets.UpdateLabelRequest'
      responses:
        '415':
          description: Unsupported Media Type
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/organizations/{organizationId}/templates/fields/{name}':
    patch:
      tags:
        - Metadata fields management
      summary: Update field definition.
      description: "Update the display name and/or the accepted values of the field definition.\r\nNote: Field type and field name can’t be updated for the time being."
      operationId: assets.v1.TemplateFieldDefinitions.UpdateFieldDefinition
      parameters:
        - name: organizationId
          in: path
          description: The organization id.
          required: true
          schema:
            type: string
          example: '5772925064011'
        - name: name
          in: path
          description: The field name. Must be url escaped
          required: true
          schema:
            type: string
          example: sourceOfAsset
      requestBody:
        description: The request containing the details of the field definition to be updated.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/assets.UpdateFieldDefinitionRequest'
      responses:
        '415':
          description: Unsupported Media Type
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
    delete:
      tags:
        - Metadata fields management
      summary: Delete field definition.
      description: Delete a metadata field definition from the organization library. The deleted metadata field definition can still be returned with the get List Field definition.
      operationId: assets.v1.TemplateFieldDefinitions.DeleteFieldDefinition
      parameters:
        - name: organizationId
          in: path
          description: The organization id.
          required: true
          schema:
            type: string
          example: '5772925064011'
        - name: name
          in: path
          description: The field name. Must be url escaped
          required: true
          schema:
            type: string
          example: sourceOfAsset
      responses:
        '415':
          description: Unsupported Media Type
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
    get:
      tags:
        - Metadata fields management
      summary: Get field definition.
      description: Returns a specific field definition specification.
      operationId: assets.v1.TemplateFieldDefinitions.GetFieldDefinition
      parameters:
        - name: organizationId
          in: path
          description: The organization id.
          required: true
          schema:
            type: string
          example: '5772925064011'
        - name: name
          in: path
          description: The field name. Must be url escaped
          required: true
          schema:
            type: string
          example: MarketingPitch
        - name: fieldOrigin
          in: query
          description: The FieldOrigin (can be System or User). The default value is user.
          schema:
            type: string
            default: User
          example: System
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.FieldDefinitionRead'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.FieldDefinitionRead'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/projects/{projectId}/transformations':
    get:
      tags:
        - Asset transformations
      summary: Search transformations.
      description: Search transformations in project.
      operationId: assets.v1.Transformations.SearchTransformations
      parameters:
        - name: projectId
          in: path
          description: The project id.
          required: true
          schema:
            type: string
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: assetId
          in: query
          description: The asset id.
          schema:
            type: string
          example: 65325f523a625f7e1acdb197
        - name: assetVersion
          in: query
          description: The asset version.
          schema:
            type: string
          example: b095dce9-6034-44c4-a02a-d41d7afbfab5
        - name: datasetId
          in: query
          description: The dataset id.
          schema:
            type: string
          example: d21b2715-0c09-4c0d-ba8f-647291eacfd4
        - name: userId
          in: query
          description: The user id.
          schema:
            type: string
          example: '5772925064006'
        - name: status
          in: query
          description: The status type.
          schema:
            $ref: '#/components/schemas/assets.TransformationStatus'
          example: Succeeded
        - name: jobID
          in: query
          description: The job id.
          schema:
            type: string
          example: 65539cd99a369779bd0d57ca
        - name: offset
          in: query
          description: The offset of the first record to be returned.
          schema:
            type: integer
            format: int32
          example: 10
        - name: limit
          in: query
          description: The amount of records to be returned.
          schema:
            type: integer
            format: int32
          example: 0
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/assets.TransformationReadResponse'
            application/problem+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/assets.TransformationReadResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorResponse'
  '/assets/v1/projects/{projectId}/trash/assets/{assetId}/versions/{assetVersion}':
    get:
      tags:
        - Asset management
      summary: Get asset version from a trash.
      description: Return a single asset from a project with on-demand fields.
      operationId: assets.v1.Assets.GetAssetFromTrash
      parameters:
        - name: projectId
          in: path
          description: The id of the project where the asset lives.
          required: true
          schema:
            type: string
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: assetId
          in: path
          description: The id of the asset.
          required: true
          schema:
            type: string
          example: 65325f523a625f7e1acdb197
        - name: assetVersion
          in: path
          description: The version of the asset.
          required: true
          schema:
            type: string
          example: b095dce9-6034-44c4-a02a-d41d7afbfab5
        - name: IncludeFields
          in: query
          description: The optional fields to include in the response.
          schema:
            type: array
            items:
              type: string
            example:
              - '*'
              - name
              - description
              - tags
              - primaryType
              - portalMetadata
              - metadata
              - metadata.yourFieldName
              - systemMetadata.fieldName
              - datasets.*
              - datasets.name
              - datasets.isVisible
              - datasets.workflowName
              - datasets.description
              - datasets.tags
              - datasets.portalMetadata
              - datasets.metadata
              - datasets.systemMetadata
              - datasets.primaryType
              - files.*
              - files.filePath
              - files.description
              - files.tags
              - files.portalMetadata
              - files.metadata
              - files.systemMetadata
              - files.userChecksum
              - files.fileSize
              - files.downloadURL
              - files.previewURL
          example:
            - '*'
            - name
            - description
            - tags
            - primaryType
            - portalMetadata
            - metadata
            - metadata.yourFieldName
            - systemMetadata.fieldName
            - datasets.*
            - datasets.name
            - datasets.isVisible
            - datasets.workflowName
            - datasets.description
            - datasets.tags
            - datasets.portalMetadata
            - datasets.metadata
            - datasets.systemMetadata
            - datasets.primaryType
            - files.*
            - files.filePath
            - files.description
            - files.tags
            - files.portalMetadata
            - files.metadata
            - files.systemMetadata
            - files.userChecksum
            - files.fileSize
            - files.downloadURL
            - files.previewURL
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/assets.AssetRead'
                  - $ref: '#/components/schemas/assets.AssetReadV2'
                description: The get asset response.
            application/problem+json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/assets.AssetRead'
                  - $ref: '#/components/schemas/assets.AssetReadV2'
                description: The get asset response.
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/organizations/{organizationId}/bulk':
    get:
      tags:
        - Bulk Operations management
      summary: Read bulk operations a user has access to in an organization.
      description: Reads the bulk operations a user has access to in an organization. This will be only operations that the user has created themselves.
      operationId: assets.v1.BulkOperations.ReadUserBulkOperations
      parameters:
        - name: organizationId
          in: path
          description: The organization id.
          required: true
          schema:
            type: string
          example: '5772925064011'
        - name: offset
          in: query
          description: The amount of entities to skip.
          schema:
            type: integer
            format: int32
            example: 10
          example: 10
        - name: limit
          in: query
          description: The page size.
          schema:
            maximum: 1000
            minimum: 1
            type: integer
            format: int32
            example: 25
          example: 25
        - name: resourceType
          in: query
          description: The optional filter for resource type.
          schema:
            type: string
            example: AssetVersion
          example: AssetVersion
        - name: status
          in: query
          description: The filter for status of the bulk operation.
          schema:
            type: string
            example: Complete
          example: Complete
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ReadUserBulkOperationsResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ReadUserBulkOperationsResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/organizations/{organizationId}/labels/{labelName}/archive':
    post:
      tags:
        - Label management
      summary: Archive label.
      description: Archives the label in the organization.
      operationId: assets.v1.Labels.ArchiveLabel
      parameters:
        - name: organizationId
          in: path
          description: The organization id.
          required: true
          schema:
            type: string
            example: '5772925064011'
          example: '5772925064011'
        - name: labelName
          in: path
          description: The label name.
          required: true
          schema:
            type: string
            example: release-candidate
          example: release-candidate
      responses:
        '415':
          description: Unsupported Media Type
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/projects/{projectId}/transformations/{transformationId}/termination':
    post:
      tags:
        - Asset transformations
      summary: Terminate transformation.
      description: Terminate an ongoing transformation.
      operationId: assets.v1.Transformations.TerminateTransformation
      parameters:
        - name: projectId
          in: path
          description: The project id.
          required: true
          schema:
            type: string
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: transformationId
          in: path
          description: The transformation id.
          required: true
          schema:
            type: string
          example: 65539cd99a369779bd0d57ca
      responses:
        '415':
          description: Unsupported Media Type
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorResponse'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorResponse'
  '/assets/v1/projects/{projectId}/assets/{assetId}/references/{referenceId}':
    delete:
      tags:
        - Asset reference management
      summary: Delete reference.
      description: Deletes a reference from an asset.
      operationId: assets.v1.References.DeleteReference
      parameters:
        - name: projectId
          in: path
          description: The project id.
          required: true
          schema:
            type: string
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: assetId
          in: path
          description: The id of the asset.
          required: true
          schema:
            type: string
          example: 65325f523a625f7e1acdb197
        - name: referenceId
          in: path
          description: The id of the reference.
          required: true
          schema:
            type: string
      responses:
        '415':
          description: Unsupported Media Type
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/projects/{projectId}/assets/{assetId}/versions/{assetVersion}/metadata/history':
    get:
      tags:
        - Asset management
      summary: Reads the metadata history of an asset version.
      description: The endpoint to retrieve the metadata history of an asset version.
      operationId: assets.v1.Assets.ReadAssetVersionMetadataHistory
      parameters:
        - name: assetId
          in: path
          description: The Id of the asset.
          required: true
          schema:
            type: string
            example: b59940b38970
          example: b59940b38970
        - name: assetVersion
          in: path
          description: The asset version.
          required: true
          schema:
            type: string
            example: latest
          example: latest
        - name: projectId
          in: path
          description: The project id.
          required: true
          schema:
            type: string
            example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: offset
          in: query
          description: 'The amount of entities to skip, starting at 0.'
          schema:
            type: integer
            format: int32
            example: 10
          example: 10
        - name: limit
          in: query
          description: The page size.
          schema:
            maximum: 1000
            minimum: 1
            type: integer
            format: int32
            example: 25
          example: 25
        - name: getChildHistory
          in: query
          description: Whether to get the child history of the asset version metadata.
          schema:
            type: boolean
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ReadAssetVersionMetadataHistoryResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ReadAssetVersionMetadataHistoryResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/organizations/{organizationId}/bulk/{bulkId}':
    get:
      tags:
        - Bulk Operations management
      summary: Read bulk operation for asset versions.
      description: Reads the details of a particular asset version bulk operation. Only available for bulk operations the user has created themselves.
      operationId: assets.v1.BulkOperations.ReadAssetVersionBulkOperationDetails
      parameters:
        - name: organizationId
          in: path
          description: The organization id.
          required: true
          schema:
            type: string
          example: '5772925064011'
        - name: bulkId
          in: path
          description: The bulk id.
          required: true
          schema:
            type: string
            example: d21b2715-0c09-4c0d-ba8f-647291eacfd4
          example: d21b2715-0c09-4c0d-ba8f-647291eacfd4
        - name: offset
          in: query
          description: The amount of entities to skip.
          schema:
            type: integer
            format: int32
            example: 10
          example: 10
        - name: limit
          in: query
          description: The page size.
          schema:
            maximum: 1000
            minimum: 1
            type: integer
            format: int32
            example: 25
          example: 25
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ReadAssetVersionBulkOperationDetailsResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ReadAssetVersionBulkOperationDetailsResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/projects/{projectId}/assets/{assetId}/versions/{assetVersion}/datasets/{datasetId}/fields':
    delete:
      tags:
        - Dataset management
      summary: Remove fields from dataset metadata and system metadata
      description: Remove one or several metadata field(s) from dataset custom and system metadata
      operationId: assets.v1.Datasets.RemoveMetadataFieldsFromDataset
      parameters:
        - name: datasetId
          in: path
          description: The ID of the dataset.
          required: true
          schema:
            type: string
            example: d21b2715-0c09-4c0d-ba8f-647291eacfd4
          example: d21b2715-0c09-4c0d-ba8f-647291eacfd4
        - name: projectId
          in: path
          description: The id of the project where the asset belongs.
          required: true
          schema:
            type: string
            example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: assetId
          in: path
          description: The ID of the asset.
          required: true
          schema:
            type: string
            example: 65325f523a625f7e1acdb197
          example: 65325f523a625f7e1acdb197
        - name: assetVersion
          in: path
          description: The version of the asset.
          required: true
          schema:
            type: string
            example: b095dce9-6034-44c4-a02a-d41d7afbfab5
          example: b095dce9-6034-44c4-a02a-d41d7afbfab5
        - name: metadata
          in: query
          description: The fields to remove from user metadata.
          schema:
            type: array
            items:
              type: string
        - name: systemMetadata
          in: query
          description: The fields to remove from system metadata.
          schema:
            type: array
            items:
              type: string
      responses:
        '415':
          description: Unsupported Media Type
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/organizations/{organizationId}/labels/{labelName}/unarchive':
    post:
      tags:
        - Label management
      summary: Unarchive label.
      description: Unarchives the label in the organization.
      operationId: assets.v1.Labels.UnarchiveLabel
      parameters:
        - name: organizationId
          in: path
          description: The organization id.
          required: true
          schema:
            type: string
            example: '5772925064011'
          example: '5772925064011'
        - name: labelName
          in: path
          description: The label name.
          required: true
          schema:
            type: string
            example: release-candidate
          example: release-candidate
      responses:
        '415':
          description: Unsupported Media Type
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/projects/{projectId}/assets/{assetId}/versions/{assetVersion}/datasets/{datasetId}/files/{filePath}/content':
    patch:
      tags:
        - File management
      summary: Update asset file content.
      description: Prepare to update the asset file's content. The upload URL returned is used to upload the new content.
      operationId: assets.v1.AssetFiles.UpdateAssetFileContent
      parameters:
        - name: projectId
          in: path
          description: The id of the project where the asset belongs.
          required: true
          schema:
            type: string
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: assetId
          in: path
          description: The ID of the asset.
          required: true
          schema:
            type: string
          example: 65325f523a625f7e1acdb197
        - name: assetVersion
          in: path
          description: The version of the asset.
          required: true
          schema:
            type: string
          example: b095dce9-6034-44c4-a02a-d41d7afbfab5
        - name: datasetId
          in: path
          description: The ID of the dataset.
          required: true
          schema:
            type: string
          example: 65325f523a625f7e1acdb197
        - name: filePath
          in: path
          description: The encoded path of the file. Serves as the unique identifier.
          required: true
          schema:
            type: string
          example: my-folder%2Fmy-file.txt
      requestBody:
        description: The request containing details of the file.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/assets.UpdateAssetFileContentRequest'
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.UpdateAssetFileContentResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.UpdateAssetFileContentResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/organizations/{organizationId}/bulk/{bulkId}/cancel':
    post:
      tags:
        - Bulk Operations management
      summary: Cancel a bulk operation.
      description: Cancels a bulk operation. Only available for bulk operations the user has created themselves.
      operationId: assets.v1.BulkOperations.CancelBulkOperation
      parameters:
        - name: organizationId
          in: path
          description: The organization id.
          required: true
          schema:
            type: string
          example: '5772925064011'
        - name: bulkId
          in: path
          description: The bulk id.
          required: true
          schema:
            type: string
      responses:
        '415':
          description: Unsupported Media Type
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/projects/{projectId}/enable':
    post:
      tags:
        - Project management
      summary: Enable/link a pre-existing dashboard project in asset manager.
      description: Endpoint for enabling a non asset manager project in asset manager.
      operationId: assets.v1.Projects.LinkProject
      parameters:
        - name: projectId
          in: path
          description: The id of the project.
          required: true
          schema:
            type: string
            example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
      responses:
        '415':
          description: Unsupported Media Type
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/organizations/{organizationId}/templates/fields/{name}/accepted-values':
    post:
      tags:
        - Metadata fields management
      summary: Add accepted values to field definition.
      description: "Add accepted values to a metadata field type: selection.\r\nNote: Only content manager, org manager or org owner can add accepted values."
      operationId: assets.v1.TemplateFieldDefinitions.AddAcceptedValuesToFieldDefinition
      parameters:
        - name: organizationId
          in: path
          description: The organization id.
          required: true
          schema:
            type: string
          example: '5772925064011'
        - name: name
          in: path
          description: The field name. Must be url escaped
          required: true
          schema:
            type: string
          example: Origin
        - name: values
          in: query
          description: 'The accepted values to add. Example: Bought from partner, Legacy'
          schema:
            type: array
            items:
              type: string
      responses:
        '415':
          description: Unsupported Media Type
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
    delete:
      tags:
        - Metadata fields management
      summary: Remove accepted values from field definition.
      description: 'Remove accepted values to a metadata field type: selection. Note: Only content manager, org manager or org owner can remove accepted values.'
      operationId: assets.v1.TemplateFieldDefinitions.RemoveAcceptedValuesToFieldDefinition
      parameters:
        - name: organizationId
          in: path
          description: The organization id.
          required: true
          schema:
            type: string
          example: '5772925064011'
        - name: name
          in: path
          description: The field name. Must be url escaped
          required: true
          schema:
            type: string
          example: sourceOfAsset
        - name: values
          in: query
          description: 'The accepted values to remove. Example: Created%20By%20Partner'
          schema:
            type: array
            items:
              type: string
      responses:
        '415':
          description: Unsupported Media Type
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/projects/{projectId}/assets/{assetId}/versions/{assetVersion}/datasets/{datasetId}/files/{filePath}/reference':
    post:
      tags:
        - File management
      summary: Reference file.
      description: 'Endpoint for referencing a file in two different datasets, avoiding its duplication.'
      operationId: assets.v1.AssetFiles.ReferenceFileFromDataset
      parameters:
        - name: projectId
          in: path
          description: The id of the project where the asset belongs.
          required: true
          schema:
            type: string
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: assetId
          in: path
          description: The ID of the asset.
          required: true
          schema:
            type: string
          example: 65325f523a625f7e1acdb197
        - name: assetVersion
          in: path
          description: The version of the asset.
          required: true
          schema:
            type: string
          example: b095dce9-6034-44c4-a02a-d41d7afbfab5
        - name: datasetId
          in: path
          description: The ID of the dataset.
          required: true
          schema:
            type: string
          example: d21b2715-0c09-4c0d-ba8f-647291eacfd4
        - name: filePath
          in: path
          description: The encoded path of the file. Serves as the unique identifier.
          required: true
          schema:
            type: string
          example: my-folder%2Fmy-file.txt
      requestBody:
        description: The request to reference the file in another dataset.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/assets.ReferenceFileFromDatasetRequest'
      responses:
        '415':
          description: Unsupported Media Type
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/projects/{projectId}/assets/{assetId}/labels/{labelName}':
    get:
      tags:
        - Asset management
      summary: Get asset version by label.
      description: Finds a specific asset version by label.
      operationId: assets.v1.Assets.GetAssetVersionByLabel
      parameters:
        - name: assetId
          in: path
          description: The Id of the asset.
          required: true
          schema:
            type: string
            example: b59940b38970
          example: b59940b38970
        - name: projectId
          in: path
          description: The project id.
          required: true
          schema:
            type: string
            example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: labelName
          in: path
          description: The label name.
          required: true
          schema:
            type: string
            example: latest
          example: latest
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/assets.AssetRead'
                  - $ref: '#/components/schemas/assets.AssetReadV2'
                description: The get asset response.
            application/problem+json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/assets.AssetRead'
                  - $ref: '#/components/schemas/assets.AssetReadV2'
                description: The get asset response.
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/organizations/{organizationId}/bulk/{bulkId}/retry':
    post:
      tags:
        - Bulk Operations management
      summary: Retry a bulk operation.
      description: Retries a bulk operation. Only available for bulk operations the user has created themselves.
      operationId: assets.v1.BulkOperations.RetryBulkOperation
      parameters:
        - name: organizationId
          in: path
          description: The organization id.
          required: true
          schema:
            type: string
          example: '5772925064011'
        - name: bulkId
          in: path
          description: The bulk id.
          required: true
          schema:
            type: string
      responses:
        '415':
          description: Unsupported Media Type
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/projects/{projectId}/collections/{collectionPath}/move':
    patch:
      tags:
        - Collection management
      summary: Move collection.
      description: "To update the location of your collection by assigning a new parent collection.\r\nNote: A collection cannot be move to a different project."
      operationId: assets.v1.Collections.MoveCollection
      parameters:
        - name: projectId
          in: path
          description: The id of the project where the collection lives.
          required: true
          schema:
            type: string
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: collectionPath
          in: path
          description: The path of the collection. Must be URL escaped.
          required: true
          schema:
            type: string
          example: MainCollection%2FParentCollection
      requestBody:
        description: The request containing the collection data.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/assets.MoveCollectionRequest'
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.MoveCollectionResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.MoveCollectionResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/projects/{projectId}/collections-count':
    get:
      tags:
        - Project management
      summary: Count project collections.
      description: Get the number of collections in a project.
      operationId: assets.v1.Projects.ReadCollectionCountOfProject
      parameters:
        - name: projectId
          in: path
          description: The project identifier.
          required: true
          schema:
            type: string
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ReadCollectionCountOfCollectionPathResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ReadCollectionCountOfCollectionPathResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/projects/{projectId}/assets/{assetId}/versions/{assetVersion}/files/{filePath}/finalize':
    post:
      tags:
        - File management
      summary: Finalize file upload.
      description: "\nThis is used to inform the asset manager that the file is now in status uploaded, and that status is used for resolving download URLs. Download URLs are valid for ten minutes only.\r\n\nPreviews will be generated automatically for assets which have only one file when this endpoint is called.            If the file is a 3D file, thumbnails and a 3D preview file will be generated, and if the file is a video, a video preview will be transcoded.            For assets which contain more than one file of the supported file types when this endpoint is called, we do not automatically generate previews."
      operationId: assets.v1.AssetFiles.FinalizeAssetFileUpload
      parameters:
        - name: projectId
          in: path
          description: The id of the project where the asset belongs.
          required: true
          schema:
            type: string
            example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: assetId
          in: path
          description: The ID of the asset.
          required: true
          schema:
            type: string
            example: 65325f523a625f7e1acdb197
          example: 65325f523a625f7e1acdb197
        - name: assetVersion
          in: path
          description: 'The version of the asset. For the time being, generated by the system.'
          required: true
          schema:
            type: string
            example: b095dce9-6034-44c4-a02a-d41d7afbfab5
          example: b095dce9-6034-44c4-a02a-d41d7afbfab5
        - name: filePath
          in: path
          description: The encoded path of the file. Serves as the unique identifier.
          required: true
          schema:
            type: string
            example: my-folder%2Fmy-file.txt
          example: my-folder%2Fmy-file.txt
        - name: enableCheckForPreviewAndMetadataGeneration
          in: query
          description: 'An optional query parameter which can disable the automatic preview generation and metadata extraction checks for this asset, when set to false. By default this is enabled.'
          schema:
            type: boolean
            default: true
      responses:
        '415':
          description: Unsupported Media Type
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
      deprecated: true
  '/assets/v1/projects/{projectId}/assets/{assetId}/versions/{assetVersion}/download-urls':
    get:
      tags:
        - Asset management
      summary: Get asset download URLs.
      description: 'Get all the files download URLs of one or several datasets of the same asset. Note that every asset has by default 2 datasets: The source and the preview. Download URLs are valid for ten minutes only.'
      operationId: assets.v1.Assets.GetAssetDownloadUrlsAsyncV1
      parameters:
        - name: projectId
          in: path
          description: The id of the project where the asset lives.
          required: true
          schema:
            type: string
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: assetId
          in: path
          description: The id of the asset.
          required: true
          schema:
            type: string
          example: 65325f523a625f7e1acdb197
        - name: assetVersion
          in: path
          description: The version of the asset.
          required: true
          schema:
            type: string
          example: b095dce9-6034-44c4-a02a-d41d7afbfab5
        - name: datasets
          in: query
          description: The list of datasets from which to download files. Optional parameter.
          schema:
            type: array
            items:
              type: string
            example:
              - d21b2715-0c09-4c0d-ba8f-647291eacfd4
              - d21b2715-0c09-4c0d-ba8f-647291eacdf9
          example:
            - d21b2715-0c09-4c0d-ba8f-647291eacfd4
            - d21b2715-0c09-4c0d-ba8f-647291eacdf9
        - name: width
          in: query
          description: The desired width of the images. Should be between 50 and 3850.
          schema:
            type: integer
            format: int32
            example: 256
          example: 256
        - name: maxDimension
          in: query
          description: 'The desired length to resize the larger image dimension to, while maintaining the same aspect ratio. Should be between 50 and 3850. For DownloadURL.'
          schema:
            type: integer
            format: int32
            example: 512
          example: 512
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.GetAssetDownloadUrlsResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.GetAssetDownloadUrlsResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/organizations/{organizationId}/bulk/{bulkId}/assets/{assetId}/versions/{assetVersion}':
    get:
      tags:
        - Bulk Operations management
      summary: Read the details of a batch operation for an asset version.
      description: "Reads the details of a batch operation (this being the operations within a bulk operation being performed on one asset version). Only available for bulk operations the user has created themselves.\r\nA batch id = asset id + asset version + asset id."
      operationId: assets.v1.BulkOperations.ReadAssetVersionBatchOperationDetails
      parameters:
        - name: organizationId
          in: path
          description: The organization id.
          required: true
          schema:
            type: string
          example: '5772925064011'
        - name: bulkId
          in: path
          description: The bulk id.
          required: true
          schema:
            type: string
            example: d21b2715-0c09-4c0d-ba8f-647291eacfd4
          example: d21b2715-0c09-4c0d-ba8f-647291eacfd4
        - name: assetId
          in: path
          description: The asset id.
          required: true
          schema:
            type: string
            example: 65325f523a625f7e1acdb197
          example: 65325f523a625f7e1acdb197
        - name: assetVersion
          in: path
          description: The asset version.
          required: true
          schema:
            type: string
            example: '1'
          example: '1'
        - name: offset
          in: query
          description: The amount of entities to skip.
          schema:
            type: integer
            format: int32
            example: 10
          example: 10
        - name: limit
          in: query
          description: The page size.
          schema:
            maximum: 1000
            minimum: 1
            type: integer
            format: int32
            example: 25
          example: 25
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ReadAssetVersionBatchOperationDetailsResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ReadAssetVersionBatchOperationDetailsResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/projects/{projectId}/collections/{collectionPath}/assets':
    post:
      tags:
        - Collection management
      summary: Link assets to collection.
      description: 'Link assets to a collection in the same project. When linkReferencedAssets is set to true, all assets recursively referenced by any asset being linked are also linked to the destination collection.'
      operationId: assets.v1.Collections.InsertAssetsInCollection
      parameters:
        - name: projectId
          in: path
          description: The id of the project where the collection will be updated.
          required: true
          schema:
            type: string
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: collectionPath
          in: path
          description: The encoded path of the collection to be updated. Must be URL escaped.
          required: true
          schema:
            type: string
          example: MainCollection%2FParentCollection
        - name: linkReferencedAssets
          in: query
          description: Boolean flag determining whether also all assets referenced by any linked asset will be linked to destination project.
          schema:
            type: boolean
      requestBody:
        description: The request containing the collection data.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/assets.InsertAssetsInCollectionRequest'
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.InsertAssetsInCollectionResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.InsertAssetsInCollectionResponse'
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
    patch:
      tags:
        - Collection management
      summary: Unlink assets.
      description: Unlink assets from a collection.
      operationId: assets.v1.Collections.RemoveAssetsFromCollection
      parameters:
        - name: projectId
          in: path
          description: The id of the project where the collection will be updated.
          required: true
          schema:
            type: string
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: collectionPath
          in: path
          description: The path of the Collection to be updated. Must be URL escaped.
          required: true
          schema:
            type: string
          example: MainCollection%2FParentCollection
      requestBody:
        description: The request containing the collection data.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/assets.RemoveAssetsFromCollectionRequest'
      responses:
        '415':
          description: Unsupported Media Type
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/projects/{projectId}/assets/{assetId}/versions/{assetVersion}/datasets/{datasetId}/metadata/history':
    get:
      tags:
        - Dataset management
      summary: Reads the metadata history of a dataset.
      description: The endpoint to retrieve the metadata history of a dataset.
      operationId: assets.v1.Datasets.ReadDatasetMetadataHistory
      parameters:
        - name: assetId
          in: path
          description: The Id of the asset.
          required: true
          schema:
            type: string
            example: b59940b38970
          example: b59940b38970
        - name: assetVersion
          in: path
          description: The asset version.
          required: true
          schema:
            type: string
            example: latest
          example: latest
        - name: datasetId
          in: path
          description: The dataset id.
          required: true
          schema:
            type: string
            example: d21b2715-0c09-4c0d-ba8f-647291eacfd4
          example: d21b2715-0c09-4c0d-ba8f-647291eacfd4
        - name: projectId
          in: path
          description: The project id.
          required: true
          schema:
            type: string
            example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: offset
          in: query
          description: 'The amount of entities to skip, starting at 0.'
          schema:
            type: integer
            format: int32
            example: 10
          example: 10
        - name: limit
          in: query
          description: The page size.
          schema:
            maximum: 1000
            minimum: 1
            type: integer
            format: int32
            example: 25
          example: 25
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ReadDatasetMetadataHistoryResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ReadDatasetMetadataHistoryResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/projects/{projectId}/assets/count':
    get:
      tags:
        - Project management
      summary: Count assets.
      description: Get the number of assets in a project.
      operationId: assets.v1.Projects.ReadAssetCountOfProject
      parameters:
        - name: projectId
          in: path
          description: The project identifier.
          required: true
          schema:
            type: string
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ReadAssetCountOfProjectResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ReadAssetCountOfProjectResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/projects/{projectId}/assets/{assetId}/versions/{assetVersion}/datasets/{datasetId}/files/{filePath}/finalize':
    post:
      tags:
        - File management
      summary: Finalize file upload.
      description: "\nThis is used to inform the asset manager that the file is now in status uploaded, and that status is used for resolving download URLs. Download URLs are valid for ten minutes only.\r\n\nPreviews will be generated automatically for assets which have only one file when this endpoint is called.            If the file is a 3D file, thumbnails and a 3D preview file will be generated, and if the file is a video, a video preview will be transcoded.            For assets which contain more than one file of the supported file types when this endpoint is called, we do not automatically generate previews."
      operationId: assets.v1.AssetFiles.FinalizeAssetFileUploadV2
      parameters:
        - name: projectId
          in: path
          description: The id of the project where the asset belongs.
          required: true
          schema:
            type: string
            example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: assetId
          in: path
          description: The ID of the asset.
          required: true
          schema:
            type: string
            example: 65325f523a625f7e1acdb197
          example: 65325f523a625f7e1acdb197
        - name: assetVersion
          in: path
          description: 'The version of the asset. For the time being, generated by the system.'
          required: true
          schema:
            type: string
            example: b095dce9-6034-44c4-a02a-d41d7afbfab5
          example: b095dce9-6034-44c4-a02a-d41d7afbfab5
        - name: datasetId
          in: path
          description: The ID of the dataset in which finalize asset file upload should be performed.
          required: true
          schema:
            type: string
            example: 21ed7f73-beef-cace-abba-5610c52be79c
          example: 21ed7f73-beef-cace-abba-5610c52be79c
        - name: filePath
          in: path
          description: The encoded path of the file. Serves as the unique identifier.
          required: true
          schema:
            type: string
            example: my-folder%2Fmy-file.txt
          example: my-folder%2Fmy-file.txt
        - name: enableCheckForPreviewAndMetadataGeneration
          in: query
          description: 'An optional query parameter which can disable the automatic preview generation and metadata extraction checks for this asset, when set to false. By default this is enabled.'
          schema:
            type: boolean
            default: true
      responses:
        '415':
          description: Unsupported Media Type
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/projects/{projectId}/assets/{assetId}/versions/{assetVersion}/status/{targetStatus}':
    patch:
      tags:
        - Asset management
      summary: Update asset status.
      description: "Update the status of the asset.\r\nNote: User can only put asset in Draft or in Published state through web UI. Only contributors or above role can see draft asset(s)."
      operationId: assets.v1.Assets.UpdateAssetStatus
      parameters:
        - name: projectId
          in: path
          description: The id of the project where the asset lives.
          required: true
          schema:
            type: string
            example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: assetId
          in: path
          description: The id of the asset.
          required: true
          schema:
            type: string
            example: 65325f523a625f7e1acdb197
          example: 65325f523a625f7e1acdb197
        - name: assetVersion
          in: path
          description: The version of the asset.
          required: true
          schema:
            type: string
            example: b095dce9-6034-44c4-a02a-d41d7afbfab5
          example: b095dce9-6034-44c4-a02a-d41d7afbfab5
        - name: targetStatus
          in: path
          description: The new status of the asset.
          required: true
          schema:
            type: string
            example: InReview
          example: InReview
      responses:
        '415':
          description: Unsupported Media Type
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/projects/{projectId}/assets/{assetId}/versions/{assetVersion}/datasets/{datasetId}/metadata/rollback/{sequenceNumber}':
    patch:
      tags:
        - Dataset management
      summary: Rolls the metadata of a dataset to a previous version.
      description: The endpoint to roll back metadata to a previous version.
      operationId: assets.v1.Datasets.RollbackDatasetMetadataHistory
      parameters:
        - name: assetId
          in: path
          description: The Id of the asset.
          required: true
          schema:
            type: string
            example: b59940b38970
          example: b59940b38970
        - name: assetVersion
          in: path
          description: The asset version.
          required: true
          schema:
            type: string
            example: latest
          example: latest
        - name: datasetId
          in: path
          description: The dataset id.
          required: true
          schema:
            type: string
            example: d21b2715-0c09-4c0d-ba8f-647291eacfd4
          example: d21b2715-0c09-4c0d-ba8f-647291eacfd4
        - name: projectId
          in: path
          description: The project id.
          required: true
          schema:
            type: string
            example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: sequenceNumber
          in: path
          description: The sequence to roll back to.
          required: true
          schema:
            type: integer
            format: int64
            example: 10
          example: 10
      responses:
        '415':
          description: Unsupported Media Type
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/projects/{projectId}/assets/{assetId}/versions/{assetVersion}/datasets/{datasetId}/files/{filePath}/download-url':
    get:
      tags:
        - File management
      summary: Get download file URL.
      description: Return a download URL for a given file.
      operationId: assets.v1.AssetFiles.GetDownloadAssetFileUrl
      parameters:
        - name: projectId
          in: path
          description: The id of the project where the asset lives.
          required: true
          schema:
            type: string
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: assetId
          in: path
          description: The ID of the asset.
          required: true
          schema:
            type: string
            example: 65325f523a625f7e1acdb197
          example: 65325f523a625f7e1acdb197
        - name: assetVersion
          in: path
          description: 'The version of the asset. For the time being, generated by the system.'
          required: true
          schema:
            type: string
            example: b095dce9-6034-44c4-a02a-d41d7afbfab5
          example: b095dce9-6034-44c4-a02a-d41d7afbfab5
        - name: datasetId
          in: path
          description: The ID of the dataset.
          required: true
          schema:
            type: string
            example: d21b2715-0c09-4c0d-ba8f-647291eacfd4
          example: d21b2715-0c09-4c0d-ba8f-647291eacfd4
        - name: filePath
          in: path
          description: The encoded path of the file. Serves as the unique identifier.
          required: true
          schema:
            type: string
            example: my-folder%2Fmy-file.txt
          example: my-folder%2Fmy-file.txt
        - name: width
          in: query
          description: '[Deprecated] This parameter is deprecated. Please use maxDimension instead./>'
          schema:
            type: integer
            format: int32
          example: 512
        - name: maxDimension
          in: query
          description: 'The desired length to resize the larger image dimension to, while maintaining the same aspect ratio. Should be between 50 and 3850. For DownloadURL.'
          schema:
            type: integer
            format: int32
          example: 512
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.GetAssetFileUrlResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.GetAssetFileUrlResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/projects/{projectId}/assets/{assetId}/link/projects/{destinationProjectId}':
    post:
      tags:
        - Asset management
      summary: Link asset to project.
      description: "Link asset to an existing project inside the same organization.\r\nWhen value for an optional parameter linkReferencedAssets is specified, the expected success response is HTTP 200 OK with a structure\r\ncontaining detailed information about assets being linked and assets not linked because they are in trash or they are already linked.\r\nOmitting an optional parameter linkReferencedAssets will result into HTTP 204 NoContent result in the case of success.\r\nWhen linkReferencedAssets is set to true, all assets recursively referenced by the asset being linked are also linked to the destination project."
      operationId: assets.v1.Assets.LinkAssetToProject
      parameters:
        - name: projectId
          in: path
          description: The project id.
          required: true
          schema:
            type: string
            example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: assetId
          in: path
          description: The asset id.
          required: true
          schema:
            type: string
            example: 65325f523a625f7e1acdb197
          example: 65325f523a625f7e1acdb197
        - name: destinationProjectId
          in: path
          description: The id of the project to which the asset will be linked.
          required: true
          schema:
            type: string
            example: 5567b2aa-2035-4d50-b66f-e71e4a1e04dd
          example: 5567b2aa-2035-4d50-b66f-e71e4a1e04dd
        - name: linkReferencedAssets
          in: query
          description: Boolean flag determining whether also all referenced assets will be linked to destination project.
          schema:
            type: boolean
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.LinkAssetsToProjectResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.LinkAssetsToProjectResponse'
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/projects/{projectId}/collections/{collectionPath}/assets/count':
    get:
      tags:
        - Collection management
      summary: Get the number of assets in a collection.
      description: Return the number of assets in collection.
      operationId: assets.v1.Collections.ReadAssetCountOfCollection
      parameters:
        - name: projectId
          in: path
          description: The id of the project where the asset lives.
          required: true
          schema:
            type: string
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: collectionPath
          in: path
          description: The encoded path of the collection. Must be URL escaped.
          required: true
          schema:
            type: string
            example: MainCollection%2FParentCollection
          example: MainCollection%2FParentCollection
        - name: includeSubCollections
          in: query
          description: Flag to include child collections' assets in the count.
          schema:
            type: boolean
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ReadAssetCountOfCollectionResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ReadAssetCountOfCollectionResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/projects/{projectId}/collections/{collectionPath}/count':
    get:
      tags:
        - Collection management
      summary: Get the number of collections within a collection path.
      description: Return the number of collections within a collection path.
      operationId: assets.v1.Collections.ReadCollectionCountOfCollectionPath
      parameters:
        - name: projectId
          in: path
          description: The id of the project where the collection lives.
          required: true
          schema:
            type: string
            example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: collectionPath
          in: path
          description: The encoded path of the collection. Must be URL escaped.
          required: true
          schema:
            type: string
            example: MainCollection%2FParentCollection
          example: MainCollection%2FParentCollection
        - name: includeSubCollections
          in: query
          description: Flag to include child collections' collections in the count.
          schema:
            type: boolean
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ReadCollectionCountOfCollectionPathResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ReadCollectionCountOfCollectionPathResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/projects/{projectId}/assets/{assetId}/versions/{assetVersion}/datasets/{datasetId}/files/{filePath}/upload-url':
    get:
      tags:
        - File management
      summary: Get upload file URL.
      description: "Return an upload URL for a given file.\r\n\n\r\nWhen using the upload URL returned by this method, it is necessary to include the following header in your HTTP request:\r\n`x-ms-blob-type: BlockBlob`.\r\nThis header specifies the type of blob being uploaded to Azure Blob Storage and ensures that the upload operation is properly recognized and processed as a block blob.\r\n\n\r\nAdditionally, for streamed uploads where the file is uploaded in chunks, it is necessary to include the `Content-Type: application/octet-stream` header.\r\nThis ensures that the storage service correctly interprets the data being streamed and processes it without errors.\r\n\n<b>Failing to include the required headers may result in errors or unexpected behavior during the upload operation.</b>\r\nEnsure that all HTTP clients interacting with the upload URL are configured to set these headers correctly based on the upload method."
      operationId: assets.v1.AssetFiles.GetUploadAssetFileUrl
      parameters:
        - name: projectId
          in: path
          description: The id of the project where the asset lives.
          required: true
          schema:
            type: string
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: assetId
          in: path
          description: The ID of the asset.
          required: true
          schema:
            type: string
            example: 65325f523a625f7e1acdb197
          example: 65325f523a625f7e1acdb197
        - name: assetVersion
          in: path
          description: 'The version of the asset. For the time being, generated by the system.'
          required: true
          schema:
            type: string
            example: b095dce9-6034-44c4-a02a-d41d7afbfab5
          example: b095dce9-6034-44c4-a02a-d41d7afbfab5
        - name: datasetId
          in: path
          description: The ID of the dataset.
          required: true
          schema:
            type: string
            example: d21b2715-0c09-4c0d-ba8f-647291eacfd4
          example: d21b2715-0c09-4c0d-ba8f-647291eacfd4
        - name: filePath
          in: path
          description: The encoded path of the file. Serves as the unique identifier.
          required: true
          schema:
            type: string
            example: my-folder%2Fmy-file.txt
          example: my-folder%2Fmy-file.txt
        - name: userChecksum
          in: query
          description: Available field for checksum use-case.
          schema:
            type: string
          example: 5a828ca5302b19ae8c7a66149f3e1e98
        - name: fileSize
          in: query
          description: The file size.
          schema:
            type: integer
            format: int64
          example: 1024
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.GetAssetFileUrlResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.GetAssetFileUrlResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/projects/{projectId}/assets/link/projects/{destinationProjectId}':
    post:
      tags:
        - Asset management
      summary: Link assets to project.
      description: "Link asset to an existing project.\r\nWhen value for an optional parameter linkReferencedAssets is specified, the expected success response is HTTP 200 OK with a structure\r\ncontaining detailed information about assets being linked and assets not linked because they are in trash or they are already linked.\r\nOmitting an optional parameter linkReferencedAssets will result into HTTP 204 NoContent result in the case of success.\r\nWhen linkReferencedAssets is set to true, all assets recursively referenced by any asset being linked are also linked to the destination project."
      operationId: assets.v1.Assets.LinkAssetsToProject
      parameters:
        - name: projectId
          in: path
          description: The id of the project where the assets live.
          required: true
          schema:
            type: string
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: destinationProjectId
          in: path
          description: The id of the project where the assets will be linked.
          required: true
          schema:
            type: string
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: linkReferencedAssets
          in: query
          description: Boolean flag determining whether also all referenced assets will be linked to destination project.
          schema:
            type: boolean
      requestBody:
        description: The request containing details of asset and project.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/assets.LinkAssetsToProjectRequest'
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.LinkAssetsToProjectResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.LinkAssetsToProjectResponse'
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/projects/{projectId}/assets/{assetId}/versions/{assetVersion}/datasets/{datasetId}/files/{filePath}/url':
    get:
      tags:
        - File management
      summary: '[Deprecated] Get file URL.'
      description: Return an UploadURL or a DownloadURL for a given file.
      operationId: assets.v1.AssetFiles.GetAssetFileUrl
      parameters:
        - name: projectId
          in: path
          description: The id of the project where the asset lives.
          required: true
          schema:
            type: string
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: assetId
          in: path
          description: The ID of the asset.
          required: true
          schema:
            type: string
            example: 65325f523a625f7e1acdb197
          example: 65325f523a625f7e1acdb197
        - name: assetVersion
          in: path
          description: 'The version of the asset. For the time being, generated by the system.'
          required: true
          schema:
            type: string
            example: b095dce9-6034-44c4-a02a-d41d7afbfab5
          example: b095dce9-6034-44c4-a02a-d41d7afbfab5
        - name: datasetId
          in: path
          description: The ID of the dataset.
          required: true
          schema:
            type: string
            example: d21b2715-0c09-4c0d-ba8f-647291eacfd4
          example: d21b2715-0c09-4c0d-ba8f-647291eacfd4
        - name: filePath
          in: path
          description: The encoded path of the file. Serves as the unique identifier.
          required: true
          schema:
            type: string
            example: my-folder%2Fmy-file.txt
          example: my-folder%2Fmy-file.txt
        - name: urlType
          in: query
          description: The type of url.
          required: true
          schema:
            $ref: '#/components/schemas/assets.UrlType'
          example: Download
        - name: userChecksum
          in: query
          description: Available field for checksum use-case. For UploadURL.
          schema:
            type: string
          example: 5a828ca5302b19ae8c7a66149f3e1e98
        - name: fileSize
          in: query
          description: The file size. For UploadURL.
          schema:
            type: integer
            format: int64
          example: 1024
        - name: width
          in: query
          description: '[Deprecated] This parameter is deprecated. Please use maxDimension instead./>'
          schema:
            type: integer
            format: int32
          example: 512
        - name: maxDimension
          in: query
          description: 'The desired length to resize the larger image dimension to, while maintaining the same aspect ratio. Should be between 50 and 3850. For DownloadURL.'
          schema:
            type: integer
            format: int32
          example: 512
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.GetAssetFileUrlResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.GetAssetFileUrlResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
      deprecated: true
  '/assets/v1/projects/{projectId}/assets/{assetId}/unlink':
    post:
      tags:
        - Asset management
      summary: Unlink asset from project.
      description: Unlink asset from a project. When unlinking from source project asset is deleted.
      operationId: assets.v1.Assets.UnlinkAssetFromProject
      parameters:
        - name: projectId
          in: path
          description: The project id.
          required: true
          schema:
            type: string
            example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: assetId
          in: path
          description: The asset id.
          required: true
          schema:
            type: string
            example: 65325f523a625f7e1acdb197
          example: 65325f523a625f7e1acdb197
        - name: trash
          in: query
          description: Whether to put asset in the trash instead of hard deleting it. Default value is <i>false</i>.
          schema:
            type: boolean
            default: false
      responses:
        '415':
          description: Unsupported Media Type
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/projects/{projectId}/assets/{assetId}/versions/{assetVersion}/datasets/{datasetId}/files/{filePath}/auto-tags':
    get:
      tags:
        - File management
      summary: Generate tags for the file.
      description: Uses AI to generate tags based on the file. Works only with images. Returns also a confidence level.
      operationId: assets.v1.AssetFiles.CreateAssetFileTags
      parameters:
        - name: projectId
          in: path
          description: The id of the project where the asset belongs.
          required: true
          schema:
            type: string
            example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: assetId
          in: path
          description: The ID of the asset.
          required: true
          schema:
            type: string
            example: 65325f523a625f7e1acdb197
          example: 65325f523a625f7e1acdb197
        - name: assetVersion
          in: path
          description: 'The version of the asset. For the time being, generated by the system.'
          required: true
          schema:
            type: string
            example: b095dce9-6034-44c4-a02a-d41d7afbfab5
          example: b095dce9-6034-44c4-a02a-d41d7afbfab5
        - name: filePath
          in: path
          description: "The encoded path of the file. Serves as the unique identifier.\r\nSupported file types include: .jpeg, .jpg, .png, .webp, .tiff, .tif, .gif"
          required: true
          schema:
            type: string
            example: my-folder%2Fmy-file.jpeg
          example: my-folder%2Fmy-file.jpeg
        - name: datasetId
          in: path
          description: The ID of the dataset.
          required: true
          schema:
            type: string
            example: 2ba1c430-086d-4b0b-a4cc-3120a2fab86a
          example: 2ba1c430-086d-4b0b-a4cc-3120a2fab86a
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.CreateAssetFileTagsResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.CreateAssetFileTagsResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/projects/{projectId}/assets/unlink':
    post:
      tags:
        - Asset management
      summary: Unlink assets from project.
      description: Unlink assets from project. When unlinking from source project asset is deleted.
      operationId: assets.v1.Assets.UnlinkAssetsFromProject
      parameters:
        - name: projectId
          in: path
          description: The id of the project where the assets live.
          required: true
          schema:
            type: string
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: trash
          in: query
          description: Whether to put asset in the trash instead of hard deleting it. Default value is <i>false</i>.
          schema:
            type: boolean
            default: false
      requestBody:
        description: Request containing the details of asset and project.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/assets.UnlinkAssetsFromProjectRequest'
      responses:
        '415':
          description: Unsupported Media Type
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/projects/{projectId}/assets/{assetId}/versions/{assetVersion}/datasets/{datasetId}/files/{filePath}/fields':
    delete:
      tags:
        - File management
      summary: Remove fields from files metadata and system metadata.
      description: Remove one or several metadata field(s) from file custom and system metadata.
      operationId: assets.v1.AssetFiles.RemoveMetadataFieldsFromAssetFile
      parameters:
        - name: projectId
          in: path
          description: The id of the project where the asset belongs.
          required: true
          schema:
            type: string
            example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: assetId
          in: path
          description: The ID of the asset.
          required: true
          schema:
            type: string
            example: 65325f523a625f7e1acdb197
          example: 65325f523a625f7e1acdb197
        - name: assetVersion
          in: path
          description: The version of the asset.
          required: true
          schema:
            type: string
            example: b095dce9-6034-44c4-a02a-d41d7afbfab5
          example: b095dce9-6034-44c4-a02a-d41d7afbfab5
        - name: datasetId
          in: path
          description: The ID of the dataset.
          required: true
          schema:
            type: string
            example: d21b2715-0c09-4c0d-ba8f-647291eacfd4
          example: d21b2715-0c09-4c0d-ba8f-647291eacfd4
        - name: filePath
          in: path
          description: The filePath
          required: true
          schema:
            type: string
            example: my-folder%2Fmy-file.txt
          example: my-folder%2Fmy-file.txt
        - name: metadata
          in: query
          description: The fields to remove from user metadata.
          schema:
            type: array
            items:
              type: string
        - name: systemMetadata
          in: query
          description: The fields to remove from system metadata.
          schema:
            type: array
            items:
              type: string
      responses:
        '415':
          description: Unsupported Media Type
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/projects/{projectId}/assets/restore':
    post:
      tags:
        - Asset management
      summary: Restores assets from a trash can.
      description: Make assets accessible in the project they were originally removed from.
      operationId: assets.v1.Assets.RestoreAssets
      parameters:
        - name: projectId
          in: path
          description: The project ID.
          required: true
          schema:
            type: string
      requestBody:
        description: The restore assets request containing asset ids and project id.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/assets.RestoreAssetsRequest'
      responses:
        '415':
          description: Unsupported Media Type
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/projects/{projectId}/trash/assets':
    delete:
      tags:
        - Asset management
      summary: Delete assets permanently from the trash can.
      description: Restoration of these assets will not be possible.
      operationId: assets.v1.Assets.DeleteAssetsFromTrash
      parameters:
        - name: projectId
          in: path
          description: The project ID.
          required: true
          schema:
            type: string
        - name: assetIds
          in: query
          description: Ids of assets to wipe out of the project.
          schema:
            type: array
            items:
              type: string
      responses:
        '415':
          description: Unsupported Media Type
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/projects/{projectId}/assets/{assetId}/versions/{assetVersion}/datasets/{datasetId}/files/{filePath}/metadata/history':
    get:
      tags:
        - File management
      summary: Reads the metadata history of an asset file.
      description: The endpoint to retrieve the metadata history of an asset file.
      operationId: assets.v1.AssetFiles.ReadAssetFileMetadataHistory
      parameters:
        - name: assetId
          in: path
          description: The Id of the asset.
          required: true
          schema:
            type: string
            example: b59940b38970
          example: b59940b38970
        - name: assetVersion
          in: path
          description: The asset version.
          required: true
          schema:
            type: string
            example: latest
          example: latest
        - name: datasetId
          in: path
          description: The dataset id.
          required: true
          schema:
            type: string
            example: d21b2715-0c09-4c0d-ba8f-647291eacfd4
          example: d21b2715-0c09-4c0d-ba8f-647291eacfd4
        - name: filePath
          in: path
          description: The file path.
          required: true
          schema:
            type: string
            example: directory/file1.extension
          example: directory/file1.extension
        - name: projectId
          in: path
          description: The project id.
          required: true
          schema:
            type: string
            example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: offset
          in: query
          description: 'The amount of entities to skip, starting at 0.'
          schema:
            type: integer
            format: int32
            example: 10
          example: 10
        - name: limit
          in: query
          description: The page size.
          schema:
            maximum: 1000
            minimum: 1
            type: integer
            format: int32
            example: 25
          example: 25
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ReadAssetFileMetadataHistoryResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ReadAssetFileMetadataHistoryResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/projects/{projectId}/trash/assets/all':
    delete:
      tags:
        - Asset management
      summary: Empty trash can for the specified projectId.
      description: Restoration of assets in the trash can will not be possible.
      operationId: assets.v1.Assets.DeleteAllAssetsFromTrash
      parameters:
        - name: projectId
          in: path
          description: The project ID.
          required: true
          schema:
            type: string
      responses:
        '415':
          description: Unsupported Media Type
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/projects/{projectId}/assets/{assetId}/versions/{assetVersion}/datasets/{datasetId}/files/{filePath}/metadata/rollback/{sequenceNumber}':
    patch:
      tags:
        - File management
      summary: Rolls the metadata of an asset file to a previous version.
      description: The endpoint to roll back metadata to a previous version.
      operationId: assets.v1.AssetFiles.RollbackAssetFileMetadataHistory
      parameters:
        - name: assetId
          in: path
          description: The Id of the asset.
          required: true
          schema:
            type: string
            example: b59940b38970
          example: b59940b38970
        - name: assetVersion
          in: path
          description: The asset version.
          required: true
          schema:
            type: string
            example: latest
          example: latest
        - name: datasetId
          in: path
          description: The dataset id.
          required: true
          schema:
            type: string
            example: d21b2715-0c09-4c0d-ba8f-647291eacfd4
          example: d21b2715-0c09-4c0d-ba8f-647291eacfd4
        - name: filePath
          in: path
          description: The file path.
          required: true
          schema:
            type: string
            example: directory/file1.extension
          example: directory/file1.extension
        - name: projectId
          in: path
          description: The project id.
          required: true
          schema:
            type: string
            example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: sequenceNumber
          in: path
          description: The sequence to roll back to.
          required: true
          schema:
            type: integer
            format: int64
            example: 10
          example: 10
      responses:
        '415':
          description: Unsupported Media Type
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/projects/{projectId}/assets/{assetId}/versions/{assetVersion}/fields':
    delete:
      tags:
        - Asset management
      summary: Remove fields from asset metadata and system metadata
      description: Remove one or several metadata field(s) from asset custom and system metadata.
      operationId: assets.v1.Assets.RemoveMetadataFieldsFromAsset
      parameters:
        - name: projectId
          in: path
          description: The id of the project where the asset belongs.
          required: true
          schema:
            type: string
            example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: assetId
          in: path
          description: The ID of the asset.
          required: true
          schema:
            type: string
            example: 65325f523a625f7e1acdb197
          example: 65325f523a625f7e1acdb197
        - name: assetVersion
          in: path
          description: The version of the asset.
          required: true
          schema:
            type: string
            example: b095dce9-6034-44c4-a02a-d41d7afbfab5
          example: b095dce9-6034-44c4-a02a-d41d7afbfab5
        - name: metadata
          in: query
          description: The metadata field name(s) to remove from custom metadata.
          schema:
            type: array
            items:
              type: string
        - name: systemMetadata
          in: query
          description: The metadata field name(s) to remove from System metadata.
          schema:
            type: array
            items:
              type: string
      responses:
        '415':
          description: Unsupported Media Type
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/projects/{projectId}/assets/{assetId}/versions/{assetVersion}/labels/assign':
    post:
      tags:
        - Asset management
      summary: Assign labels to an asset version.
      description: 'Note: The Latest label is restricted and can not be directly assigned.'
      operationId: assets.v1.Assets.AssignLabelsToAsset
      parameters:
        - name: projectId
          in: path
          description: The id of the project where the asset is located.
          required: true
          schema:
            type: string
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: assetId
          in: path
          description: The id of the asset.
          required: true
          schema:
            type: string
          example: 65325f523a625f7e1acdb197
        - name: assetVersion
          in: path
          description: The version of the asset to which the labels will be assigned.
          required: true
          schema:
            type: string
          example: b095dce9-6034-44c4-a02a-d41d7afbfab5
      requestBody:
        description: The request containing the labels to assign.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/assets.AssignLabelsToAssetVersionRequest'
      responses:
        '415':
          description: Unsupported Media Type
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/projects/{projectId}/assets/{assetId}/versions/{assetVersion}/labels/unassign':
    post:
      tags:
        - Asset management
      summary: Unassign labels from an asset version.
      description: 'Note: The Latest label is restricted and can not be directly unassigned.'
      operationId: assets.v1.Assets.UnassignLabelsFromAsset
      parameters:
        - name: projectId
          in: path
          description: The id of the project where the asset is located.
          required: true
          schema:
            type: string
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: assetId
          in: path
          description: The id of the asset.
          required: true
          schema:
            type: string
          example: 65325f523a625f7e1acdb197
        - name: assetVersion
          in: path
          description: The version of the asset to which the labels will be unassigned from.
          required: true
          schema:
            type: string
          example: b095dce9-6034-44c4-a02a-d41d7afbfab5
      requestBody:
        description: The request containing the labels to be unassigned.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/assets.UnassignLabelsFromAssetVersionRequest'
      responses:
        '415':
          description: Unsupported Media Type
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/projects/{projectId}/assets/{assetId}/labels':
    get:
      tags:
        - Asset management
      summary: List asset versions labels.
      description: List all labels assigned across all versions of an asset.
      operationId: assets.v1.Assets.ListAssetLabels
      parameters:
        - name: projectId
          in: path
          description: The id of the project where the asset is located.
          required: true
          schema:
            type: string
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: assetId
          in: path
          description: The id of the asset.
          required: true
          schema:
            type: string
          example: 65325f523a625f7e1acdb197
        - name: offset
          in: query
          description: The amount of entities to skip.
          schema:
            type: integer
            format: int32
            example: 10
          example: 10
        - name: limit
          in: query
          description: The page size.
          schema:
            maximum: 1000
            minimum: 1
            type: integer
            format: int32
            example: 25
          example: 25
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ListAssignedLabelsFromAssetResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ListAssignedLabelsFromAssetResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/organizations/{organizationId}/assets/aggregations/search':
    post:
      tags:
        - Asset management
      summary: Aggregate assets across projects.
      description: "Search aggregations by a specific field across projects. This will group the assets by this field, returning the field value and how many are in the group.\r\n\n\r\nNote: if no labels filter is specified only versions with latest or pending labels will be returned.\r\n\n\r\nNote 2: Asset manager search endpoints work on the basis of the Eventual Consistency model. This means that at times, an update may take a short time to be reflected in search results."
      operationId: assets.v1.Assets.SearchAggregationsAcrossProjects
      parameters:
        - name: organizationId
          in: path
          description: The organization id.
          required: true
          schema:
            type: string
          example: '5772925064011'
      requestBody:
        description: The search aggregation request criteria.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/assets.SearchAggregationsAcrossProjectsRequest'
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.SearchAggregationsResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.SearchAggregationsResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/projects/{projectId}/assets/aggregations/search':
    post:
      tags:
        - Asset management
      summary: Aggregate assets by field.
      description: "Search aggregations by a specific field. This will group the assets by this field, returning the field value and how many are in the group.\r\nNote: if no labels filter is specified only versions with latest or pending labels will be returned."
      operationId: assets.v1.Assets.SearchAggregations
      parameters:
        - name: projectId
          in: path
          description: The project id.
          required: true
          schema:
            type: string
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
      requestBody:
        description: The request containing the read filter and the field to be used in the aggregation..
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/assets.SearchAggregationsRequest'
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.SearchAggregationsResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.SearchAggregationsResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/libraries/{libraryId}/assets/aggregations/search':
    post:
      tags:
        - Library Management
      summary: Aggregate assets by field.
      description: "Search aggregations by a specific field. This will group the assets by this field, returning the field value and how many are in the group.\r\nNote: if no labels filter is specified only versions with latest or pending labels will be returned."
      operationId: assets.v1.Library.SearchLibraryAggregations
      parameters:
        - name: libraryId
          in: path
          description: The library id.
          required: true
          schema:
            type: string
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
      requestBody:
        description: The request containing the read filter and the field to be used in the aggregation..
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/assets.SearchAggregationsRequest'
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.SearchAggregationsResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.SearchAggregationsResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/projects/{projectId}/assets/search':
    post:
      tags:
        - Asset management
      summary: Search assets by criteria.
      description: "Searches multiple assets filtering by the specified criteria.\r\n\n\r\nNote: if no labels filter is specified only versions with latest or pending labels will be returned.\r\n\n\r\nNote 2: Asset manager search endpoints work on the basis of the Eventual Consistency model. This means that at times, an update may take a short time to be reflected in search results."
      operationId: assets.v1.Assets.SearchAssets
      parameters:
        - name: projectId
          in: path
          description: The project id.
          required: true
          schema:
            type: string
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
      requestBody:
        description: The search asset request criteria.
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/assets.SearchAssetsRequest'
                - $ref: '#/components/schemas/assets.SearchAssetVersionsRequest'
              description: The request to read the assets.
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.SearchAssetsResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.SearchAssetsResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/projects/{projectId}/trash/assets/search':
    post:
      tags:
        - Asset management
      summary: Search assets in a project trash by criteria.
      description: "Searches multiple assets filtering by the specified criteria. Looks into projectId trash only.\r\n\n\r\nNote: if no labels filter is specified only versions with latest or pending labels will be returned.\r\n\n\r\nNote 2: Asset manager search endpoints work on the basis of the Eventual Consistency model. This means that at times, an update may take a short time to be reflected in search results."
      operationId: assets.v1.Assets.SearchAssetsInTrash
      parameters:
        - name: projectId
          in: path
          description: The project id.
          required: true
          schema:
            type: string
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
      requestBody:
        description: The search asset request criteria.
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/assets.SearchAssetsRequest'
                - $ref: '#/components/schemas/assets.SearchAssetVersionsRequest'
              description: The request to read the assets.
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.SearchAssetsResponseV2'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.SearchAssetsResponseV2'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/projects/{projectId}/assets/{assetId}/versions/search':
    post:
      tags:
        - Asset management
      summary: Search asset versions by criteria.
      description: "Searches multiple assets filtering by the specified criteria.\r\n\n\r\nNote: Asset manager search endpoints work on the basis of the Eventual Consistency model. This means that at times, an update may take a short time to be reflected in search results.\r\n\n<b>Supported Query Objects</b>\r\n---\r\n\n<b>Exact Match</b>\nSearch for values that exactly match the field.\n<pre>{    \"type\": \"exact-match\",    \"value\": \"my-exact-value\"}</pre>\n\n<b>Date Range</b>\nSearch for values where the date field is in a given range.\n<pre>{    \"type\": \"date-range\",    \"conditions\" : [        {            \"conditionType\": \"greaterThanOrEqual\",            \"value\": \"2023-08-16T09:16:39Z\"        },        {            \"conditionType\": \"lessThan\",            \"value\": \"2023-08-27T09:00:00Z\"        },    ]}</pre>\n\n<b>Wildcard</b>\nSearch for values with wildcard placeholder characters ('?' for a single character, '*' for zero or more characters).\n<pre>{    \"type\": \"wildcard\",    \"value\": \"my-*-?-value\"}</pre>\n\n<b>Regex</b>\nSearch for values matching a regular expression.\n<pre>{    \"type\": \"regex\",    \"value\": \"^([1-9]|[a-z])\"}</pre>\n\n<b>Prefix</b>\nSearch for values beginning with a given term.\n<pre>{    \"type\": \"prefix\",    \"value\": \"term-starter\"}</pre>\n\n<b>Fuzzy</b>\nSearch for values similar to the given search term.<pre>{    \"type\": \"fuzzy\",    \"value\": \"bat\"}</pre>\n\n<b>Numeric Range</b>\nSearch for values in a given numeric range.<pre>{    \"type\": \"numeric-range\",    \"conditions\": [        {            \"conditionType\": \"greaterThanOrEqual\",            \"value\": 16384        },        {            \"conditionType\": \"lessThan\",            \"value\" : 1048576.256        }    ]}</pre>\n\n<b>Exists</b>\nSearch for assets that contain the field.\n<pre>{    \"type\": \"exists\",}</pre>\n\n<b>Nested Operator</b>\nSearch for values where all inner conditions (files or datasets) must match.\n<pre>{    \"type\": \"nested\",    \"conditions\": {        \"nested.field1\" : {            \"type\" : \"exact-match\",            \"value\" : \"my-exact-value\"        }        \"nested.field2\" : {            \"type\" : \"exact-match\",            \"value\" : \"my-exact-value-2\"        }    }}</pre>\n\n<b>AND Operator</b>\n<pre>{    \"type\": \"and\",    \"conditions\": [        {            \"type\" : \"prefix\",            \"value\": \"begins-with-this\"        },        {            \"type\": \"or\",            \"conditions\": [                {                    \"type\": \"wildcard\",                    \"value\": \"*-ends-with-this\"                },                {                    \"type\": \"wildcard\",                    \"value\": \"*-other-this\"                }            ]        }    ]}</pre>\n\n<b>OR Operator</b>\nSearch for results that match ONE or MORE of the given query conditions.<pre>{    \"type\": \"or\",    \"conditions\": [        {            \"type\" : \"prefix\",            \"value\": \"begins-with-this\"        },        {            \"type\": \"wildcard\",            \"value\": \"*-ends-with-this\"        }    ]}</pre>\n\n<b>NOT Operator</b>\nSearch for results that do NOT match the given query condition.<pre>{    \"type\": \"not\",    \"condition\": {        \"type\": \"or\",        \"conditions\": [            {                \"type\": \"prefix\",                \"value\": \"doesn't-begin-with-this\"            },            {                \"type\": \"wildcard\",                \"value\": \"*-or-end-with-this\"            }        ]    }}</pre>\n"
      operationId: assets.v1.Assets.SearchAssetVersions
      parameters:
        - name: projectId
          in: path
          description: The project id.
          required: true
          schema:
            type: string
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: assetId
          in: path
          description: The id of the asset.
          required: true
          schema:
            type: string
          example: 65325f523a625f7e1acdb197
      requestBody:
        description: The search asset versions request criteria.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/assets.SearchAssetVersionsRequest'
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.SearchAssetsResponseV2'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.SearchAssetsResponseV2'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/organizations/{organizationId}/assets/search':
    post:
      tags:
        - Asset management
      summary: Search assets across projects by criteria.
      description: "Searches multiple assets across multiple projects filtering by the specified criteria.\r\n\n\r\nNote: if no labels filter is specified only versions with latest or pending labels will be returned.\r\n\n\r\nNote 2: Asset manager search endpoints work on the basis of the Eventual Consistency model. This means that at times, an update may take a short time to be reflected in search results."
      operationId: assets.v1.Assets.SearchAssetsAcrossProjects
      parameters:
        - name: organizationId
          in: path
          description: The organization id.
          required: true
          schema:
            type: string
          example: '5772925064011'
      requestBody:
        description: The search asset request criteria.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/assets.SearchAssetsAcrossProjectsRequest'
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.SearchAssetsResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.SearchAssetsResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/organizations/{organizationId}/trash/assets/search':
    post:
      tags:
        - Asset management
      summary: Search assets across projects trashes by criteria.
      description: "Searches multiple assets across multiple projects filtering by the specified criteria.\r\n\n\r\nNote: if no labels filter is specified only versions with latest or pending labels will be returned.\r\n\n\r\nNote 2: Asset manager search endpoints work on the basis of the Eventual Consistency model. This means that at times, an update may take a short time to be reflected in search results."
      operationId: assets.v1.Assets.SearchAssetsAcrossProjectsTrash
      parameters:
        - name: organizationId
          in: path
          description: The organization id.
          required: true
          schema:
            type: string
          example: '5772925064011'
      requestBody:
        description: The search asset request criteria.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/assets.SearchAssetsAcrossProjectsRequest'
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.SearchAssetsResponseV2'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.SearchAssetsResponseV2'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/projects/{projectId}/assets/{assetId}/versions/{assetVersion}/collections':
    get:
      tags:
        - Asset management
      summary: '[Deprecated] Get asset collections.'
      description: "[Deprecated] Get all the collections to which an asset belongs.\r\nUse endpoint without the asset version instead."
      operationId: assets.v1.Assets.GetAssetCollectionsOld
      parameters:
        - name: projectId
          in: path
          description: The project id.
          required: true
          schema:
            type: string
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: assetId
          in: path
          description: The asset id.
          required: true
          schema:
            type: string
          example: 65325f523a625f7e1acdb197
        - name: assetVersion
          in: path
          description: The asset version.
          required: true
          schema:
            type: string
          example: b095dce9-6034-44c4-a02a-d41d7afbfab5
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/assets.CollectionRead'
            application/problem+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/assets.CollectionRead'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
      deprecated: true
  '/assets/v1/projects/{projectId}/assets/{assetId}/collections':
    get:
      tags:
        - Asset management
      summary: Get asset collections.
      description: Get all the collections to which an asset belongs.
      operationId: assets.v1.Assets.GetAssetCollections
      parameters:
        - name: projectId
          in: path
          description: The project id.
          required: true
          schema:
            type: string
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: assetId
          in: path
          description: The asset id.
          required: true
          schema:
            type: string
          example: 65325f523a625f7e1acdb197
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/assets.CollectionRead'
            application/problem+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/assets.CollectionRead'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/organizations/{organizationId}/assets/{assetId}/collections':
    get:
      tags:
        - Asset management
      summary: Get asset collections across projects.
      description: Get all the collections to which an asset belongs in all projects of the organization.
      operationId: assets.v1.Assets.GetAssetCollectionsAcrossProjects
      parameters:
        - name: organizationId
          in: path
          description: The organization id.
          required: true
          schema:
            type: string
          example: '5772925064011'
        - name: assetId
          in: path
          description: The asset id.
          required: true
          schema:
            type: string
          example: 65325f523a625f7e1acdb197
        - name: offset
          in: query
          description: The offset of the first record to be returned.
          schema:
            maximum: 2147483647
            minimum: 1
            type: integer
            format: int32
            default: 1
        - name: limit
          in: query
          description: the page size.
          schema:
            maximum: 1000
            minimum: 1
            type: integer
            format: int32
            default: 99
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.GetAssetCollectionsAcrossProjectsResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.GetAssetCollectionsAcrossProjectsResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/projects/{projectId}/assets/{assetId}/is-source-project':
    get:
      tags:
        - Asset management
      summary: Check asset source project.
      description: This endpoint checks whether the project is the source project of the asset or not.
      operationId: assets.v1.Assets.IsAssetSourceProject
      parameters:
        - name: projectId
          in: path
          description: The project id.
          required: true
          schema:
            type: string
            example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: assetId
          in: path
          description: The asset id.
          required: true
          schema:
            type: string
            example: 65325f523a625f7e1acdb197
          example: 65325f523a625f7e1acdb197
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
            application/problem+json:
              schema:
                type: boolean
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/projects/{projectId}/assets/{assetId}/check':
    get:
      tags:
        - Asset management
      summary: Check asset belongs to project.
      description: Endpoint for validating whether an asset belongs to a project.
      operationId: assets.v1.Assets.CheckAssetInProject
      parameters:
        - name: projectId
          in: path
          description: The project id.
          required: true
          schema:
            type: string
            example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: assetId
          in: path
          description: The asset id.
          required: true
          schema:
            type: string
            example: 65325f523a625f7e1acdb197
          example: 65325f523a625f7e1acdb197
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
            application/problem+json:
              schema:
                type: boolean
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/projects/{projectId}/assets/{assetId}/versions/{assetVersion}/status/reachable':
    get:
      tags:
        - Asset management
      summary: List reachable statuses.
      description: List statuses reachable from the current status.
      operationId: assets.v1.Assets.ReadReachableStatuses
      parameters:
        - name: projectId
          in: path
          description: The project id.
          required: true
          schema:
            type: string
            example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: assetId
          in: path
          description: The asset id.
          required: true
          schema:
            type: string
            example: 65325f523a625f7e1acdb197
          example: 65325f523a625f7e1acdb197
        - name: assetVersion
          in: path
          description: The asset version.
          required: true
          schema:
            type: string
            example: b095dce9-6034-44c4-a02a-d41d7afbfab5
          example: b095dce9-6034-44c4-a02a-d41d7afbfab5
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ReadReachableStatusesResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ReadReachableStatusesResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
  '/assets/v1/projects/{projectId}/assets/{assetId}/versions/{assetVersion}/status':
    get:
      tags:
        - Asset management
      summary: Read status flow.
      description: Read the status flow for an asset version.
      operationId: assets.v1.Assets.ReadAssetVersionStatusFlow
      parameters:
        - name: projectId
          in: path
          description: The project id.
          required: true
          schema:
            type: string
            example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
          example: e5a3ca16-13c7-4f2d-a5bb-984e349911df
        - name: assetId
          in: path
          description: The asset id.
          required: true
          schema:
            type: string
            example: 65325f523a625f7e1acdb197
          example: 65325f523a625f7e1acdb197
        - name: assetVersion
          in: path
          description: The asset version.
          required: true
          schema:
            type: string
            example: b095dce9-6034-44c4-a02a-d41d7afbfab5
          example: b095dce9-6034-44c4-a02a-d41d7afbfab5
      responses:
        '415':
          description: Unsupported Media Type
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ReadAssetVersionStatusFlowResponse'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ReadAssetVersionStatusFlowResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/assets.ErrorMessage'
components:
  schemas:
    assets.Aggregation:
      type: object
      properties:
        count:
          type: integer
          description: How many items were aggregated.
          format: int64
        value:
          type: object
          description: The value for the aggregation.
          nullable: true
      additionalProperties: false
      description: Represents a single aggregations.
    assets.AssetError:
      type: object
      properties:
        assetId:
          type: string
          nullable: true
        errorMessage:
          type: string
          nullable: true
        errorCode:
          type: string
          nullable: true
      additionalProperties: false
    assets.AssetFileEntityMetadata:
      type: object
      allOf:
        - $ref: '#/components/schemas/assets.EntityMetadata'
      properties:
        fileSize:
          type: integer
          description: The size of the asset file in bytes.
          format: int64
          nullable: true
          example: 512
        mainFile:
          type: boolean
          description: Gets or sets the the flag to indicate the main file.
          nullable: true
      additionalProperties: false
      description: The metadata describing an asset file entity.
    assets.AssetFileRead:
      required:
        - datasetIds
        - filePath
        - status
        - systemTags
        - tags
      type: object
      properties:
        datasetIds:
          type: array
          items:
            type: string
          description: The dataset ids of the asset file.
        filePath:
          minLength: 1
          type: string
          description: The file path.
          example: directory/file1.extension
        description:
          type: string
          description: The description of the file.
          nullable: true
          example: Normal map 1 for tree object
        status:
          minLength: 1
          type: string
          description: The status of the file.
          example: Uploaded
        created:
          type: string
          description: The date when the asset file was created.
          format: date-time
          nullable: true
          example: '2023-09-15T15:48:26.731Z'
        createdBy:
          type: string
          description: The creator of the asset file.
          nullable: true
          example: '5772465996530'
        updated:
          type: string
          description: The date when the asset file was last updated.
          format: date-time
          nullable: true
          example: '2023-09-15T15:48:26.731Z'
        updatedBy:
          type: string
          description: The name of the user whom last updated the asset file.
          nullable: true
          example: '5772465996530'
        tags:
          type: array
          items:
            type: string
          description: The tags of the asset file.
          example:
            - thumbnail
            - small
            - model
        systemTags:
          type: array
          items:
            type: string
          description: The system tags associated with the asset file.
        portalMetadata:
          type: string
          description: The metadata provided by the frontend.
          nullable: true
        metadata:
          type: object
          additionalProperties:
            oneOf:
              - type: string
              - type: boolean
              - type: number
                format: double
              - type: array
                items:
                  oneOf:
                    - type: string
                    - type: boolean
                    - type: number
              - type: object
                additionalProperties:
                  oneOf:
                    - type: string
                    - type: boolean
                    - type: number
                      format: double
                    - type: array
                      items:
                        oneOf:
                          - type: string
                          - type: boolean
                          - type: number
          description: The custom user metadata of the asset file.
          nullable: true
          example:
            StringField: string value
            BoolField: true
            Base64BytesField: dGVzdCB0ZXh0IGVuY29kaW5n
            DoubleField: 10.5
            FloatField: 10.005
            IntField: 10
            LongField: 9.223372E+18
            DateTimeField: '2023-08-16T08:49:12.1674180-04:00'
            ListField:
              - string value
              - 10
              - false
        systemMetadata:
          type: object
          additionalProperties:
            oneOf:
              - type: string
              - type: boolean
              - type: number
                format: double
              - type: array
                items:
                  oneOf:
                    - type: string
                    - type: boolean
                    - type: number
              - type: object
                additionalProperties:
                  oneOf:
                    - type: string
                    - type: boolean
                    - type: number
                      format: double
                    - type: array
                      items:
                        oneOf:
                          - type: string
                          - type: boolean
                          - type: number
          description: 'The system metadata of the asset file, which is not searchable.'
          nullable: true
          example:
            externalID: 4a86205c-5506-4546-9b86-a815507bc7d1
            autoGenerated: true
            dateProcessed: '2023-09-15T15:42:52.106Z'
            externalUserId: 55e5725f-5722-4249-ad7a-5ee32d9e3178
        userChecksum:
          type: string
          description: The checksum of the file.
          nullable: true
          example: b0ab4c79218a8a510761e25458bb69b2
        fileSize:
          type: integer
          description: The size of the file.
          format: int64
          nullable: true
          example: 4096
        downloadURL:
          type: string
          description: The download URL.
          format: uri
          nullable: true
          example: http://testdownloadurl.com/file123
        isDownloadURLOriginalImage:
          type: boolean
          description: The flag that indicates if DownloadURL is the Url to the original image.
          nullable: true
        previewURL:
          type: string
          description: The preview URL
          format: uri
          nullable: true
        previewDatasetId:
          type: string
          description: The preview dataset id.
          nullable: true
        primaryType:
          type: string
          description: The type of the file.
          nullable: true
        transformationInputFiles:
          type: array
          items:
            type: string
          description: The transformation input files.
          nullable: true
        isPreviewURLOriginalImage:
          type: boolean
          description: The flag that indicates if PreviewURL is the Url to the original image.
          nullable: true
        mainFile:
          type: boolean
          description: Flag to indicate the main file.
      additionalProperties: false
      description: Represents the read of an asset file.
    assets.AssetFileTag:
      type: object
      properties:
        tag:
          type: string
          description: The tag.
          nullable: true
        confidence:
          type: number
          description: The confidence level of tag.
          format: float
      additionalProperties: false
      description: Generated asset file tag.
    assets.AssetPredicate:
      type: object
      properties:
        id:
          type: string
          description: The predicate id.
          nullable: true
        name:
          type: string
          description: The predicate name.
          nullable: true
      additionalProperties: false
      description: The representation of an asset predicate.
    assets.AssetRead:
      required:
        - archivedLabels
        - assetId
        - assetVersion
        - labels
        - name
        - primaryType
        - projectIds
        - sourceProjectId
        - status
        - systemTags
        - tags
      type: object
      properties:
        assetId:
          minLength: 1
          type: string
          description: The Id of the asset.
          example: b59940b38970
        assetVersion:
          minLength: 1
          type: string
          description: The version of the asset.
          example: b095dce9-6034-44c4-a02a-d41d7afbfab5
        name:
          minLength: 1
          type: string
          description: The name of the asset.
          example: Tree material
        description:
          type: string
          description: The description of the asset.
          nullable: true
          example: This is a material to be used in trees
        tags:
          type: array
          items:
            type: string
          description: The tags of the asset.
        systemTags:
          type: array
          items:
            type: string
          description: The system tags associated with the asset version.
        labels:
          type: array
          items:
            type: string
          description: The labels associated with the asset version.
        archivedLabels:
          type: array
          items:
            type: string
          description: The archived labels associated with the asset version.
        primaryType:
          minLength: 1
          type: string
          description: The primary type of the asset.
          example: Material
        portalMetadata:
          type: string
          description: The metadata provided by the frontend.
          nullable: true
        versionNumber:
          type: integer
          description: The version number assigned on commit.
          format: int32
          nullable: true
          example: 3
        parentVersionNumber:
          type: integer
          description: The parent's version number.
          format: int32
          nullable: true
          example: 2
        changeLog:
          type: string
          description: The change log of the asset.
          nullable: true
          example: '- Added tag ''Wood'' to asset;\r\n- Added a metallic map to material;'
        parentAssetVersion:
          type: string
          description: The AssetVersion from which the current version is derived from.
          nullable: true
          example: '4'
        metadata:
          type: object
          additionalProperties:
            oneOf:
              - type: string
              - type: boolean
              - type: number
                format: double
              - type: array
                items:
                  oneOf:
                    - type: string
                    - type: boolean
                    - type: number
              - type: object
                additionalProperties:
                  oneOf:
                    - type: string
                    - type: boolean
                    - type: number
                      format: double
                    - type: array
                      items:
                        oneOf:
                          - type: string
                          - type: boolean
                          - type: number
          description: The custom user metadata of the asset.
          nullable: true
          example:
            MarketingPitch: Your marketing pitch
            Price: 0.5
            Length: 200
            ScorePoints: 15
            IsReadyForPostProcess: true
            ValidatedByManager: false
            ConnectedToWebPortal: false
            LaunchDate: '2023-08-16T08:49:12.1674180'
            LastCheckPlan: '2023-08-16T08:49:12.1674180'
            DateScanned: 2023-06-05T010:35:05.1674180
            License: https://assetfilelicense.com
            WebProductPage: https://productpage.com
            RepoSource: https://github.com/myprojectrepo
            Priority: Low|Medium|High
            Certifications: ISO 4905|ISO 3013
            TeamCharter: Seoul|Shanghai|Jakarta
            IndustryType:
              - Architecture
              - Industrial
              - Energy and Oil
            Sprints:
              - 1
              - 2
              - 3
              - 4
              - 5
            Owner: '5772465996530'
            Reviewer: '5772465996530'
            Project Lead: '5772465996530'
        systemMetadata:
          type: object
          additionalProperties:
            oneOf:
              - type: string
              - type: boolean
              - type: number
                format: double
              - type: array
                items:
                  oneOf:
                    - type: string
                    - type: boolean
                    - type: number
              - type: object
                additionalProperties:
                  oneOf:
                    - type: string
                    - type: boolean
                    - type: number
                      format: double
                    - type: array
                      items:
                        oneOf:
                          - type: string
                          - type: boolean
                          - type: number
          description: 'The system metadata of the asset, which is not searchable.'
          nullable: true
          example:
            externalID: 4a86205c-5506-4546-9b86-a815507bc7d1
            autoGenerated: true
            dateProcessed: '2023-09-15T15:42:52.106Z'
            externalUserId: 55e5725f-5722-4249-ad7a-5ee32d9e3178
        status:
          minLength: 1
          type: string
          description: The status of the asset.
          example: Draft
        isFrozen:
          type: boolean
          description: A value indicating whether the asset is frozen.
          nullable: true
        created:
          type: string
          description: The date when the asset was created.
          format: date-time
          nullable: true
        createdBy:
          type: string
          description: The creator of the asset.
          nullable: true
          example: '5772465996530'
        updated:
          type: string
          description: The date when the assed was last updated.
          format: date-time
          nullable: true
        updatedBy:
          type: string
          description: The name of the user whom last updated the asset.
          nullable: true
          example: '5772465996530'
        sourceProjectId:
          minLength: 1
          type: string
          description: The source project id for the asset.
        projectIds:
          type: array
          items:
            type: string
          description: The project ids of the asset.
          example:
            - 87cf845f-8ca7-4b2f-9cc1-c3d731335810
            - 5fd931ab-0950-4e9c-9264-d888f490b5a5
            - 5e7b9c90-b07e-490c-bfb7-80897f6f7e7e
        previewFile:
          type: string
          description: The name of the preview file.
          nullable: true
          example: folder/thumbnail.gif
        previewFileDatasetId:
          type: string
          description: The preview file dataset id.
          nullable: true
        previewFileUrl:
          type: string
          description: The name of the preview file url.
          format: uri
          nullable: true
          example: https://teststorage.com/files/folder/thumbnail.gif
        isPreviewFileUrlOriginalImage:
          type: boolean
          description: The flag that indicates if PreviewFileUrl is the Url to the original image.
          nullable: true
        files:
          type: array
          items:
            $ref: '#/components/schemas/assets.AssetFileRead'
          description: The files of the asset.
          nullable: true
        datasets:
          type: array
          items:
            $ref: '#/components/schemas/assets.Dataset'
          description: The datasets of the asset.
          nullable: true
        assetTemplateId:
          type: string
          description: The asset template id.
          nullable: true
        statusFlowId:
          type: string
          description: The identifier of the status flow in use by the asset.
          nullable: true
        statusFlowName:
          type: string
          description: The name of the status flow in use by the asset.
          nullable: true
        autoSubmit:
          type: boolean
          description: The AutoSubmit flag.
        trashDetails:
          type: array
          items:
            $ref: '#/components/schemas/assets.TrashDetails'
          description: Details about an asset that has been moved to the trash.
          nullable: true
      additionalProperties: false
      description: The get asset response.
    assets.AssetReadFilter:
      type: object
      properties:
        includeQuery:
          type: object
          additionalProperties:
            oneOf:
              - type: string
              - type: boolean
              - type: number
                format: double
              - type: array
                items:
                  oneOf:
                    - type: string
                    - type: boolean
                    - type: number
              - type: object
                properties:
                  type:
                    type: string
                  conditions:
                    type: array
                    items:
                      oneOf:
                        - type: object
                          properties:
                            conditionType:
                              type: string
                            value:
                              oneOf:
                                - type: string
                                - type: boolean
                                - type: number
          description: The dictionary to include all the entries matching all the criteria.
          nullable: true
          example:
            created:
              type: date-range
              conditions:
                - conditionType: greaterThanOrEqual
                  value: '2023-08-16T09:16:39Z'
                - conditionType: lessThan
                  value: '2023-08-27T09:00:00Z'
            updated:
              type: date-range
              conditions:
                - conditionType: greaterThanOrEqual
                  value: '2023-08-16T09:16:39Z'
                - conditionType: lessThan
                  value: '2023-08-27T09:00:00Z'
            assetId: included-asset-id
            assetVersion:
              type: exact-match
              value: a83f650b-3e86-4457-8ce4-8decef827da0
              caseInsensitive: false
            name:
              type: wildcard
              value: '*auto*'
            description:
              type: regex
              value: .*auto.*
            tags:
              - tag1
              - tag2
              - tag3
            systemTags:
              - tag1
              - tag2
              - tag3
            labels:
              - label1
              - label2
            status: Draft
            primaryType: included-asset-type
            metadata.fieldName:
              type: prefix
              value: fieldVal
            systemMetadata.fieldName: fieldValue
            files.FileSize:
              type: numeric-range
              conditions:
                - conditionType: greaterThanOrEqual
                  value: 16384
                - conditionType: lessThan
                  value: 1048576.2
            portalMetadata: ''
            previewFile: folder/thumbnail.gif
            createdBy: '5772465996530'
            updatedBy: '5772465996530'
            versionNumber: 13
            parentVersionNumber: 12
            changeLog: "- Added tag 'Wood' to asset;\r\n- Added a metallic map to material;"
            parentAssetVersion: '1'
            datasets.name:
              type: fuzzy
              value: nsme
            datasets.description: description of the dataset
            datasets.isVisible: true
            datasets.workflowName: thumbnail-generation
            datasets.tags:
              - tag1
              - tag2
              - tag3
            datasets.portalMetadata: portalMetadata
            datasets.metadata.fieldName: fieldValue
            datasets.systemMetadata.fieldName: fieldValue
            datasets.primaryType: primaryTypeValue
            datasets.created:
              type: date-range
              conditions:
                - conditionType: greaterThanOrEqual
                  value: '2023-08-16T09:16:39Z'
                - conditionType: lessThan
                  value: '2023-08-27T09:00:00Z'
            datasets.updated:
              type: date-range
              conditions:
                - conditionType: greaterThanOrEqual
                  value: '2023-08-16T09:16:39Z'
                - conditionType: lessThan
                  value: '2023-08-27T09:00:00Z'
            files.filePath: file-example.txt
            files.description: file-description
            files.status: Uploaded
            files.created:
              type: date-range
              conditions:
                - conditionType: greaterThanOrEqual
                  value: '2023-08-16T09:16:39Z'
                - conditionType: lessThan
                  value: '2023-08-27T09:00:00Z'
            files.updated:
              type: date-range
              conditions:
                - conditionType: greaterThanOrEqual
                  value: '2023-08-16T09:16:39Z'
                - conditionType: lessThan
                  value: '2023-08-27T09:00:00Z'
            files.tags:
              - tag1
              - tag2
              - tag3
            files.portalMetadata: portalMetadata
            files.checksum: checksum
            files.fileSize: 4096
            files.metadata.fieldName: fieldValue
            files.systemMetadata.fieldName: fieldValue
        excludeQuery:
          type: object
          additionalProperties:
            oneOf:
              - type: string
              - type: boolean
              - type: number
                format: double
              - type: array
                items:
                  oneOf:
                    - type: string
                    - type: boolean
                    - type: number
              - type: object
                properties:
                  type:
                    type: string
                  conditions:
                    type: array
                    items:
                      oneOf:
                        - type: object
                          properties:
                            conditionType:
                              type: string
                            value:
                              oneOf:
                                - type: string
                                - type: boolean
                                - type: number
          description: The dictionary to exclude all the entries matching all the criteria.
          nullable: true
          example:
            created:
              type: date-range
              conditions:
                - conditionType: greaterThanOrEqual
                  value: '2023-08-16T09:16:39Z'
                - conditionType: lessThan
                  value: '2023-08-27T09:00:00Z'
            updated:
              type: date-range
              conditions:
                - conditionType: greaterThanOrEqual
                  value: '2023-08-16T09:16:39Z'
                - conditionType: lessThan
                  value: '2023-08-27T09:00:00Z'
            assetId: included-asset-id
            assetVersion:
              type: exact-match
              value: a83f650b-3e86-4457-8ce4-8decef827da0
              caseInsensitive: false
            name:
              type: wildcard
              value: '*auto*'
            description:
              type: regex
              value: .*auto.*
            tags:
              - tag1
              - tag2
              - tag3
            systemTags:
              - tag1
              - tag2
              - tag3
            labels:
              - label1
              - label2
            status: Draft
            primaryType: included-asset-type
            metadata.fieldName:
              type: prefix
              value: fieldVal
            systemMetadata.fieldName: fieldValue
            files.FileSize:
              type: numeric-range
              conditions:
                - conditionType: greaterThanOrEqual
                  value: -163.84
                - conditionType: lessThan
                  value: 1048576
            portalMetadata: ''
            previewFile: folder/thumbnail.gif
            createdBy: '5772465996530'
            updatedBy: '5772465996530'
            versionNumber: 13
            parentVersionNumber: 12
            changeLog: "- Added tag 'Wood' to asset;\r\n- Added a metallic map to material;"
            parentAssetVersion: '1'
            datasets.name:
              type: fuzzy
              value: nsme
            datasets.isVisible: true
            datasets.workflowName: thumbnail-generation
            datasets.description: description of the dataset
            datasets.tags:
              - tag1
              - tag2
              - tag3
            datasets.portalMetadata: portalMetadata
            datasets.metadata.fieldName: fieldValue
            datasets.systemMetadata.fieldName: fieldValue
            datasets.primaryType: primaryTypeValue
            datasets.created:
              type: date-range
              conditions:
                - conditionType: greaterThanOrEqual
                  value: '2023-08-16T09:16:39Z'
                - conditionType: lessThan
                  value: '2023-08-27T09:00:00Z'
            datasets.updated:
              type: date-range
              conditions:
                - conditionType: greaterThanOrEqual
                  value: '2023-08-16T09:16:39Z'
                - conditionType: lessThan
                  value: '2023-08-27T09:00:00Z'
            files.filePath: file-example.txt
            files.description: file-description
            files.status: Uploaded
            files.created:
              type: date-range
              conditions:
                - conditionType: greaterThanOrEqual
                  value: '2023-08-16T09:16:39Z'
                - conditionType: lessThan
                  value: '2023-08-27T09:00:00Z'
            files.updated:
              type: date-range
              conditions:
                - conditionType: greaterThanOrEqual
                  value: '2023-08-16T09:16:39Z'
                - conditionType: lessThan
                  value: '2023-08-27T09:00:00Z'
            files.tags:
              - tag1
              - tag2
              - tag3
            files.portalMetadata: portalMetadata
            files.checksum: checksum
            files.fileSize: 4096
            files.metadata.fieldName: fieldValue
            files.systemMetadata.fieldName: fieldValue
        anyQuery:
          type: object
          additionalProperties:
            oneOf:
              - type: string
              - type: boolean
              - type: number
                format: double
              - type: array
                items:
                  oneOf:
                    - type: string
                    - type: boolean
                    - type: number
              - type: object
                properties:
                  type:
                    type: string
                  conditions:
                    type: array
                    items:
                      oneOf:
                        - type: object
                          properties:
                            conditionType:
                              type: string
                            value:
                              oneOf:
                                - type: string
                                - type: boolean
                                - type: number
          description: The dictionary to Include all entries matching any of the criteria.
          nullable: true
          example:
            created:
              type: date-range
              conditions:
                - conditionType: greaterThanOrEqual
                  value: '2023-08-16T09:16:39Z'
                - conditionType: lessThan
                  value: '2023-08-27T09:00:00Z'
            updated:
              type: date-range
              conditions:
                - conditionType: greaterThanOrEqual
                  value: '2023-08-16T09:16:39Z'
                - conditionType: lessThan
                  value: '2023-08-27T09:00:00Z'
            assetId: included-asset-id
            assetVersion:
              type: exact-match
              value: a83f650b-3e86-4457-8ce4-8decef827da0
              caseInsensitive: false
            name:
              type: wildcard
              value: '*auto*'
            description:
              type: regex
              value: .*auto.*
            tags:
              - tag1
              - tag2
              - tag3
            systemTags:
              - tag1
              - tag2
              - tag3
            labels:
              - label1
              - label2
            status: Draft
            primaryType: included-asset-type
            metadata.fieldName:
              type: prefix
              value: fieldVal
            systemMetadata.fieldName: fieldValue
            files.FileSize:
              type: numeric-range
              conditions:
                - conditionType: greaterThanOrEqual
                  value: 16384
                - conditionType: lessThan
                  value: 1048576
            portalMetadata: ''
            previewFile: folder/thumbnail.gif
            createdBy: '5772465996530'
            versionNumber: 13
            parentVersionNumber: 12
            changeLog: "- Added tag 'Wood' to asset;\r\n- Added a metallic map to material;"
            parentAssetVersion: '1'
            datasets.isVisible: true
            datasets.workflowName: thumbnail-generation
            datasets.name:
              type: fuzzy
              value: nsme
            datasets.description: description of the dataset
            datasets.tags:
              - tag1
              - tag2
              - tag3
            datasets.portalMetadata: portalMetadata
            datasets.metadata.fieldName: fieldValue
            datasets.systemMetadata.fieldName: fieldValue
            datasets.primaryType: primaryTypeValue
            datasets.created:
              type: date-range
              conditions:
                - conditionType: greaterThanOrEqual
                  value: '2023-08-16T09:16:39Z'
                - conditionType: lessThan
                  value: '2023-08-27T09:00:00Z'
            datasets.updated:
              type: date-range
              conditions:
                - conditionType: greaterThanOrEqual
                  value: '2023-08-16T09:16:39Z'
                - conditionType: lessThan
                  value: '2023-08-27T09:00:00Z'
            files.filePath: file-example.txt
            files.description: file-description
            files.status: Uploaded
            files.created:
              type: date-range
              conditions:
                - conditionType: greaterThanOrEqual
                  value: '2023-08-16T09:16:39Z'
                - conditionType: lessThan
                  value: '2023-08-27T09:00:00Z'
            files.updated:
              type: date-range
              conditions:
                - conditionType: greaterThanOrEqual
                  value: '2023-08-16T09:16:39Z'
                - conditionType: lessThan
                  value: '2023-08-27T09:00:00Z'
            files.tags:
              - tag1
              - tag2
              - tag3
            files.portalMetadata: portalMetadata
            files.checksum: checksum
            files.fileSize: 4096
            files.metadata.fieldName: fieldValue
            files.systemMetadata.fieldName: fieldValue
        anyQueryMinimumMatch:
          maximum: 2147483647
          minimum: 1
          type: integer
          description: The minimum any query match amount to be considered a match for return.
          format: int32
          nullable: true
        collections:
          type: array
          items:
            type: string
          description: The collection paths.
          nullable: true
      additionalProperties: false
      description: The asset read filter.
    assets.AssetReadV2:
      type: object
      allOf:
        - $ref: '#/components/schemas/assets.AssetRead'
      properties:
        totalFiles:
          type: integer
          description: The total count files of the asset.
          format: int32
          nullable: true
      additionalProperties: false
      description: The get asset response.
    assets.AssetStatus:
      type: object
      properties:
        id:
          type: string
          description: The id of the asset status.
          nullable: true
        name:
          type: string
          description: The name of the asset status.
          nullable: true
        description:
          type: string
          description: The description of the asset status.
          nullable: true
        canBeSkipped:
          type: boolean
          description: If the status can be skipped or not.
        inPredicate:
          $ref: '#/components/schemas/assets.AssetPredicate'
        outPredicate:
          $ref: '#/components/schemas/assets.AssetPredicate'
        sortingOrder:
          type: integer
          description: The sorting order of the asset.
          format: int32
      additionalProperties: false
      description: The representation of an asset status.
    assets.AssetVersionEntityMetadata:
      type: object
      allOf:
        - $ref: '#/components/schemas/assets.EntityMetadata'
      properties:
        name:
          type: string
          description: The name of the asset.
          nullable: true
          example: Blue car
        primaryType:
          type: string
          description: The primary type of the asset.
          nullable: true
          example: Material
        assetTemplateId:
          type: string
          description: The asset template identifier.
          nullable: true
          example: '7772465992134'
        portalMetadata:
          type: string
          description: The portal metadata for the asset.
          nullable: true
        previewFile:
          type: string
          description: The preview file for the asset.
          nullable: true
          example: folder/thumbnail.gif
        changeLog:
          type: string
          description: The change log for the asset.
          nullable: true
          example: '- Added tag ''Wood'' to asset;\r\n- Added a metallic map to material;'
        child:
          $ref: '#/components/schemas/assets.AssetVersionEntityMetadataChild'
      additionalProperties: false
      description: The metadata describing an asset entity.
    assets.AssetVersionEntityMetadataChild:
      type: object
      properties:
        id:
          type: string
          description: The identifier of the child entity.
          nullable: true
        childType:
          type: string
          description: The type of the child entity.
          nullable: true
        sequenceNumber:
          type: integer
          description: The sequence number of the child.
          format: int32
        fileInfo:
          $ref: '#/components/schemas/assets.EntityMetadataChildFileInfo'
      additionalProperties: false
      description: Describes a child entity of an asset version metadata.
    assets.AssetVersionInfo:
      type: object
      properties:
        assetId:
          type: string
          description: The asset id.
          nullable: true
          example: 65325f523a625f7e1acdb197
        assetVersion:
          type: string
          description: The asset version.
          nullable: true
          example: b095dce9-6034-44c4-a02a-d41d7afbfab5
      additionalProperties: false
      description: Class containing information about an asset version.
    assets.AssetVersionOperation:
      type: object
      allOf:
        - $ref: '#/components/schemas/assets.OperationBase'
      properties:
        assetId:
          type: string
          description: The Id of the asset.
          nullable: true
          example: b59940b38970
        assetVersion:
          type: string
          description: The version of the asset the bulk operation was performed on.
          nullable: true
          example: b095dce9-6034-44c4-a02a-d41d7afbfab5
        sourceAssetVersion:
          type: string
          description: The source asset version this operation was called on.
          nullable: true
          example: b095dce9-6034-44c4-a02a-d41d7afbfab5
        submitOnCompletion:
          type: boolean
          description: The flag to indicate if the asset should be submitted on successful completion.
          nullable: true
      additionalProperties: false
      description: Class providing a definition of a single operation (as a constituent part of a bulk operation).
    assets.AssignLabelsToAssetVersionRequest:
      required:
        - labelNames
      type: object
      properties:
        labelNames:
          type: array
          items:
            type: string
          description: "The labels to assign to the asset.\r\nNote: Latest and Pending label are restricted labels, and can not be directly assigned or unassigned."
          example:
            - release-candidate
            - production
      additionalProperties: false
      description: Represents a request to assign labels to an asset version.
    assets.AutoSubmitAssetVersionRequest:
      type: object
      properties:
        changeLog:
          type: string
          description: The change log for the asset version.
          nullable: true
          example: '- Added tag ''Wood'' to asset;\r\n- Added a metallic map to material;'
      additionalProperties: false
      description: Represents a request to autosubmit asset version.
    assets.AutoSubmitAssetVersionResponse:
      type: object
      properties:
        versionNumber:
          type: integer
          description: The version number of asset.
          format: int32
          nullable: true
      additionalProperties: false
      description: The response for an autosubmit asset version.
    assets.BulkOperationInfo:
      type: object
      properties:
        bulkId:
          type: string
          description: The id of the bulk operation.
          nullable: true
        failReasons:
          type: array
          items:
            type: string
          description: Reasons for failure of the operation.
          nullable: true
        status:
          type: string
          description: The status of the operation.
          nullable: true
        startedBy:
          type: string
          description: The creator of the bulk operation.
          nullable: true
          example: '5772465996530'
        started:
          type: string
          description: The timestamp for when the bulk operation started.
          format: date-time
          nullable: true
        ended:
          type: string
          description: The timestamp for when the bulk operation ended.
          format: date-time
          nullable: true
        resourceType:
          type: string
          description: The type of resource the bulk operation is performed on.
          nullable: true
      additionalProperties: false
      description: Model for returning information about a bulk operation.
    assets.CollectionRead:
      type: object
      properties:
        name:
          type: string
          description: The name of the existing collection.
          nullable: true
        description:
          type: string
          description: The description of the collection.
          nullable: true
        parentPath:
          type: string
          description: The path where the collection is located separated by /. eg. Organization/SubOrganization/Project1.
          nullable: true
      additionalProperties: false
      description: The existing collection.
    assets.Context:
      enum:
        - Both
        - Source
        - Target
        - Downstream
        - Upstream
      type: string
      description: The reference search context.
      format: int32
    assets.CopyLibraryAssetToProjectProgress:
      type: object
      properties:
        value:
          type: number
          description: The progress percentage.
          format: double
          example: 0.5
        message:
          type: string
          description: Description of the job's current step
          nullable: true
          example: Copying asset to project.
      additionalProperties: false
      description: Represents the progress of copying a library asset to a project.
    assets.CopyLibraryAssetToProjectResult:
      type: object
      additionalProperties: false
      description: Represents the result of copying a library asset to a project.
    assets.CreateAssetDataset:
      type: object
      properties:
        datasetId:
          type: string
          description: The id of the dataset.
          nullable: true
        name:
          type: string
          description: The name of the dataset.
          nullable: true
        systemTags:
          type: array
          items:
            type: string
          description: The system tags associated with the dataset.
          nullable: true
      additionalProperties: false
      description: Describes a dataset.
    assets.CreateAssetFileTagsResponse:
      type: object
      properties:
        tags:
          type: array
          items:
            $ref: '#/components/schemas/assets.AssetFileTag'
          description: The tags for asset file.
          nullable: true
      additionalProperties: false
      description: Represents the response to get tags for an existing file.
    assets.CreateAssetReferenceRequest:
      required:
        - assetVersion
      type: object
      properties:
        assetVersion:
          minLength: 1
          type: string
          description: The asset version.
        target:
          $ref: '#/components/schemas/assets.TargetAsset'
        datasetId:
          type: string
          description: The optional source dataset identifier.
          nullable: true
      additionalProperties: false
      description: Represents a request to create a references.
    assets.CreateAssetReferenceResponse:
      type: object
      properties:
        referenceId:
          type: string
          description: The id of the reference.
          nullable: true
      additionalProperties: false
      description: Represents the response for a create reference request.
    assets.CreateAssetVersionBulkOperationByCriteriaRequest:
      type: object
      properties:
        filter:
          $ref: '#/components/schemas/assets.AssetReadFilter'
        operations:
          type: array
          items:
            $ref: '#/components/schemas/assets.OperationSettings'
          description: The list of operations.
          nullable: true
        submitOnCompletion:
          type: boolean
          description: The flag to indicate if the asset should be submitted on successful completion.
          nullable: true
      additionalProperties: false
      description: A request to create a new bulk operation for specified search criteria.
    assets.CreateAssetVersionBulkOperationTaskRequest:
      type: object
      properties:
        assetVersions:
          type: array
          items:
            $ref: '#/components/schemas/assets.AssetVersionInfo'
          description: 'The list of assets involved in the bulk operation, by asset id and asset version.'
          nullable: true
        operations:
          type: array
          items:
            $ref: '#/components/schemas/assets.OperationSettings'
          description: The list of operations.
          nullable: true
        submitOnCompletion:
          type: boolean
          description: The flag to indicate if the asset should be submitted on successful completion.
          nullable: true
      additionalProperties: false
      description: A request to create a new bulk operation for an asset version.
    assets.CreateBulkOperationByCriteriaResponse:
      type: object
      properties:
        bulkIds:
          type: array
          items:
            type: string
          description: The list of bulk ids.
          nullable: true
      additionalProperties: false
      description: The response for creating a new bulk operation by search criteria.
    assets.CreateBulkOperationResponse:
      type: object
      properties:
        bulkId:
          type: string
          description: The id of the bulk operation.
          nullable: true
      additionalProperties: false
      description: The response for creating a new bulk operation.
    assets.CreateCollectionRequest:
      required:
        - name
      type: object
      properties:
        parentPath:
          type: string
          description: The parent collection's path
          nullable: true
          example: RootCollection/ParentCollection
        name:
          minLength: 1
          pattern: '^[^%]+$'
          type: string
          description: The name of the collection.
          example: Trees
        description:
          type: string
          description: The description of the collection.
          nullable: true
          example: Collection of trees
      additionalProperties: false
      description: A request to create a new collection.
    assets.CreateCollectionResponse:
      type: object
      properties:
        path:
          type: string
          description: The newly created collection path.
          nullable: true
      additionalProperties: false
      description: The success response of the collection creation.
    assets.CreateFieldDefinitionRequest:
      required:
        - displayName
        - name
        - type
      type: object
      properties:
        name:
          minLength: 1
          type: string
          description: "The unique name of the field.\r\nThe field definition name is unique within the organization."
          example: SourceOfAsset
        displayName:
          minLength: 1
          type: string
          description: "The name that will be used to display the field on the UI.\r\nThe type of the field definition. Refer to user documentation for more info."
          example: Source of asset
        type:
          $ref: '#/components/schemas/assets.FieldDefinitionType'
        acceptedValues:
          type: array
          items:
            type: string
          description: "The accepted values of the field.\r\nRequired only when the type is \"Selection\"."
          nullable: true
          example:
            - Internally created
            - Bought from asset store
            - Created by partner
        multiSelection:
          type: boolean
          description: "A value indicating whether the field is multi selection.\r\nRequired only when the type is \"Selection\"."
          nullable: true
          example: false
      additionalProperties: false
      description: The request to create a field definition.
    assets.CreateNewAssetFileRequest:
      required:
        - filePath
      type: object
      properties:
        filePath:
          minLength: 1
          type: string
          description: The path of the file. Serves as the unique identifier.
          example: my-folder/my-file.txt
        description:
          type: string
          description: A description of the file.
          nullable: true
          example: File from technical equipment
        tags:
          type: array
          items:
            type: string
          description: A list of tags associated with the file.
          nullable: true
          example:
            - Industry
            - CAD
        portalMetadata:
          type: string
          description: The metadata provided by the frontend.
          nullable: true
        metadata:
          type: object
          additionalProperties:
            oneOf:
              - type: string
              - type: boolean
              - type: number
                format: double
              - type: array
                items:
                  oneOf:
                    - type: string
                    - type: boolean
                    - type: number
              - type: object
                additionalProperties:
                  oneOf:
                    - type: string
                    - type: boolean
                    - type: number
                      format: double
                    - type: array
                      items:
                        oneOf:
                          - type: string
                          - type: boolean
                          - type: number
          description: Available field to add searchable custom metadata.
          nullable: true
          example:
            Triangle count: '45002'
            IsRigged: 'True'
            FileExtension: fbx
            BoundingBoxSize (m): '3.02'
            CameraType: Sony X
            Lens: Leica
            CapturedTime: '2023-08-16T08:49:12.1674180-04:00'
            FPS: '29.43'
            Length (s): '143'
            Resolution: '1024'
            BitDepth: '32'
            Bitrate: 320 Kbps
        systemMetadata:
          type: object
          additionalProperties:
            oneOf:
              - type: string
              - type: boolean
              - type: number
                format: double
              - type: array
                items:
                  oneOf:
                    - type: string
                    - type: boolean
                    - type: number
              - type: object
                additionalProperties:
                  oneOf:
                    - type: string
                    - type: boolean
                    - type: number
                      format: double
                    - type: array
                      items:
                        oneOf:
                          - type: string
                          - type: boolean
                          - type: number
          description: '[Deprecated] This field is deprecated for this request and is read-only. Please use the Metadata field to store additional information.'
          nullable: true
        userChecksum:
          type: string
          description: Available field for checksum use-case.
          nullable: true
          example: 5a828ca5302b19ae8c7a66149f3e1e98
        fileSize:
          type: integer
          description: The file size.
          format: int64
          example: 512
        mainFile:
          type: boolean
          description: Flag to indicate the main file.
        createEvenIfFrozen:
          type: boolean
          description: Flag to indicate whether it should create even if asset is frozen.
      additionalProperties: false
      description: Represents the request to create a new file in an existing asset.
    assets.CreateNewAssetFileResponse:
      type: object
      properties:
        uploadUrl:
          type: string
          description: The upload url of the asset. Expires after one hour.
          format: uri
          nullable: true
      additionalProperties: false
      description: Represents a response of creating a new file in an asset.
    assets.CreateNewAssetRequest:
      required:
        - name
      type: object
      properties:
        name:
          minLength: 1
          type: string
          description: The name of the asset.
        description:
          type: string
          description: The description of the asset.
          nullable: true
        tags:
          type: array
          items:
            type: string
          description: A list of tags associated with the asset (optionally empty).
          nullable: true
          example:
            - Industry
            - CAD
        primaryType:
          type: string
          description: The primary type of the asset.
          nullable: true
          example: Other | 3D Model | Audio | Video | 2D Asset | Script | Material
        portalMetadata:
          type: string
          description: The metadata provided by the frontend.
          nullable: true
        metadata:
          type: object
          additionalProperties:
            oneOf:
              - type: string
              - type: boolean
              - type: number
                format: double
              - type: array
                items:
                  oneOf:
                    - type: string
                    - type: boolean
                    - type: number
              - type: object
                additionalProperties:
                  oneOf:
                    - type: string
                    - type: boolean
                    - type: number
                      format: double
                    - type: array
                      items:
                        oneOf:
                          - type: string
                          - type: boolean
                          - type: number
          description: "The searchable custom metadata.\r\nMetadata fields need to exist in the organization library.\r\nRefer to Metadata field management endpoints."
          nullable: true
          example:
            MarketingPitch: Your marketing pitch
            Price: 0.5
            Length: 200
            ScorePoints: 15
            IsReadyForPostProcess: true
            ValidatedByManager: false
            ConnectedToWebPortal: false
            LaunchDate: '2023-09-15T15:42:52.106Z'
            LastCheckPlan: '2023-09-15T15:42:52.106Z'
            DateScanned: '2023-09-15T15:42:52.106Z'
            License: https://assetfilelicense.com
            WebProductPage: https://productpage.com
            RepoSource: https://github.com/myprojectrepo
            Priority: Low|Medium|High
            Certifications: ISO 4905|ISO 3013
            TeamCharter: Seoul|Shanghai|Jakarta
            IndustryType:
              - Architecture
              - Industrial
              - Energy and Oil
            Sprints:
              - 1
              - 2
              - 3
              - 4
              - 5
            Owner: '5772465996530'
            Reviewer: '5772465996530'
            Project Lead: '5772465996530'
        systemMetadata:
          type: object
          additionalProperties:
            oneOf:
              - type: string
              - type: boolean
              - type: number
                format: double
              - type: array
                items:
                  oneOf:
                    - type: string
                    - type: boolean
                    - type: number
              - type: object
                additionalProperties:
                  oneOf:
                    - type: string
                    - type: boolean
                    - type: number
                      format: double
                    - type: array
                      items:
                        oneOf:
                          - type: string
                          - type: boolean
                          - type: number
          description: '[Deprecated] This field is deprecated for this request and is read-only. Please use the Metadata field to store additional information.'
          nullable: true
        collections:
          type: array
          items:
            type: string
          description: The collection(s) to which the asset is linked.
          nullable: true
          example:
            - collection1
            - project1/collection2
        statusFlowId:
          type: string
          description: The identifier of the status flow to assign to the asset.
          nullable: true
      additionalProperties: false
      description: A request to create a new asset.
    assets.CreateNewAssetResponse:
      type: object
      properties:
        assetId:
          type: string
          description: The asset id.
          nullable: true
        assetVersion:
          type: string
          description: The asset version.
          nullable: true
        datasets:
          type: array
          items:
            $ref: '#/components/schemas/assets.CreateAssetDataset'
          description: The array of datasets associated with the asset.
          nullable: true
      additionalProperties: false
      description: Represents the response of a create new asset request.
    assets.CreateNewAssetVersionRequest:
      type: object
      properties:
        parentAssetVersion:
          type: string
          description: "The AssetVersion from which the new version will be derived.\r\nIf this parameter is omitted, the latest version will be used."
          nullable: true
          example: b095dce9-6034-44c4-a02a-d41d7afbfab5
        statusFlowId:
          type: string
          description: The identifier of the status flow to assign to the asset version.
          nullable: true
      additionalProperties: false
      description: A request to create a new asset version.
    assets.CreateNewAssetVersionResponse:
      type: object
      properties:
        assetVersion:
          type: string
          description: The created asset version.
          nullable: true
          example: '2'
        parentAssetVersion:
          type: string
          description: The AssetVersion from which the current version is derived from.
          nullable: true
          example: '4'
        parentVersionNumber:
          type: integer
          description: The parent's version number.
          format: int32
          example: 2
      additionalProperties: false
      description: The response containing the newly created version of the asset.
    assets.CreateNewDatasetRequest:
      required:
        - name
      type: object
      properties:
        name:
          minLength: 1
          type: string
          description: The name of the dataset.
        description:
          type: string
          description: The description of the dataset.
          nullable: true
        tags:
          type: array
          items:
            type: string
          description: A list of tags associated with the dataset.
          nullable: true
          example:
            - Materials
            - Textures
        portalMetadata:
          type: string
          description: The metadata provided by the frontend.
          nullable: true
        primaryType:
          type: string
          description: The primary type of the asset.
          nullable: true
        isVisible:
          type: boolean
          description: Define if the dataset is visible in the UI.
          nullable: true
        metadata:
          type: object
          additionalProperties:
            oneOf:
              - type: string
              - type: boolean
              - type: number
                format: double
              - type: array
                items:
                  oneOf:
                    - type: string
                    - type: boolean
                    - type: number
              - type: object
                additionalProperties:
                  oneOf:
                    - type: string
                    - type: boolean
                    - type: number
                      format: double
                    - type: array
                      items:
                        oneOf:
                          - type: string
                          - type: boolean
                          - type: number
          description: Available field to add custom and searchable metadata.
          nullable: true
          example:
            StringField: string value
            BoolField: true
            Base64BytesField: dGVzdCB0ZXh0IGVuY29kaW5n
            DoubleField: 10.5
            FloatField: 10.005
            IntField: 10
            LongField: 9.223372E+18
            DateTimeField: '2023-08-16T08:49:12.1674180-04:00'
            ListField:
              - string value
              - 10
              - false
        systemMetadata:
          type: object
          additionalProperties:
            oneOf:
              - type: string
              - type: boolean
              - type: number
                format: double
              - type: array
                items:
                  oneOf:
                    - type: string
                    - type: boolean
                    - type: number
              - type: object
                additionalProperties:
                  oneOf:
                    - type: string
                    - type: boolean
                    - type: number
                      format: double
                    - type: array
                      items:
                        oneOf:
                          - type: string
                          - type: boolean
                          - type: number
          description: '[Deprecated] This field is deprecated for this request and is read-only. Please use the Metadata field to store additional information.'
          nullable: true
      additionalProperties: false
      description: A request to create a new dataset.
    assets.CreateNewDatasetResponse:
      type: object
      properties:
        datasetId:
          type: string
          description: The dataset id.
          nullable: true
      additionalProperties: false
      description: Represents the response of a create new dataset request.
    assets.CreateNewLabelRequest:
      required:
        - description
        - name
      type: object
      properties:
        name:
          minLength: 1
          type: string
          description: The name of the label.
          example: release-candidate
        description:
          minLength: 1
          type: string
          description: The description of the label.
          example: Assets ready to be used in 'release-candidate' releases.
        colour:
          type: string
          description: The RGB Hex color code of the label.
          nullable: true
          example: '#00FF00'
      additionalProperties: false
      description: A request to create a new label.
    assets.CreateNewLabelResponse:
      type: object
      properties:
        labelName:
          type: string
          description: The label name.
          nullable: true
      additionalProperties: false
      description: The response of a create new label request.
    assets.CreateNewProjectRequest:
      required:
        - name
      type: object
      properties:
        name:
          minLength: 1
          type: string
          description: The name of the project.
        isPrivateProject:
          type: boolean
          description: Private project setting.
          nullable: true
        metadata:
          type: object
          additionalProperties:
            type: string
          description: The metadata of the project (Optional).
          nullable: true
      additionalProperties: false
      description: Represents a request for creating a new project.
    assets.CreateNewProjectResponse:
      type: object
      properties:
        projectId:
          type: string
          description: The project id.
          nullable: true
      additionalProperties: false
      description: The response for a create new project request.
    assets.Dataset:
      required:
        - datasetId
        - isVisible
        - name
        - status
        - systemTags
        - tags
      type: object
      properties:
        datasetId:
          minLength: 1
          type: string
          description: The id of the dataset.
          example: 2ba1c430-086d-4b0b-a4cc-3120a2fab86a
        name:
          minLength: 1
          type: string
          description: The name of the dataset.
          example: Thumbnails
        description:
          type: string
          description: An optional description of the dataset.
          nullable: true
          example: Dataset with thumbnails images of the asset.
        isVisible:
          type: boolean
          description: Whether the dataset is visible.
          example: true
        workflowName:
          type: string
          description: The name of the workflow.
          nullable: true
          example: thumbnail-generation
        tags:
          type: array
          items:
            type: string
          description: A list of tags associated with the dataset.
          example:
            - thumbnail
            - image
        portalMetadata:
          type: string
          description: The metadata from the frontend.
          nullable: true
        primaryType:
          type: string
          description: The primary type of the asset.
          nullable: true
        metadata:
          type: object
          additionalProperties:
            oneOf:
              - type: string
              - type: boolean
              - type: number
                format: double
              - type: array
                items:
                  oneOf:
                    - type: string
                    - type: boolean
                    - type: number
              - type: object
                additionalProperties:
                  oneOf:
                    - type: string
                    - type: boolean
                    - type: number
                      format: double
                    - type: array
                      items:
                        oneOf:
                          - type: string
                          - type: boolean
                          - type: number
          description: The user custom metadata.
          nullable: true
          example:
            StringField: string value
            BoolField: true
            Base64BytesField: dGVzdCB0ZXh0IGVuY29kaW5n
            DoubleField: 10.5
            FloatField: 10.005
            IntField: 10
            LongField: 9.223372E+18
            DateTimeField: '2023-08-16T08:49:12.1674180-04:00'
            ListField:
              - string value
              - 10
              - false
        systemMetadata:
          type: object
          additionalProperties:
            oneOf:
              - type: string
              - type: boolean
              - type: number
                format: double
              - type: array
                items:
                  oneOf:
                    - type: string
                    - type: boolean
                    - type: number
              - type: object
                additionalProperties:
                  oneOf:
                    - type: string
                    - type: boolean
                    - type: number
                      format: double
                    - type: array
                      items:
                        oneOf:
                          - type: string
                          - type: boolean
                          - type: number
          description: The system metadata that is not searchable.
          nullable: true
        status:
          minLength: 1
          type: string
          description: The status of the dataset.
        systemTags:
          type: array
          items:
            type: string
          description: The system tags associated with the dataset.
        createdBy:
          type: string
          description: The id of the user who created the dataset.
          nullable: true
          example: 2ba1c430-086d-4b0b-a4cc-3120a2fab86a
        created:
          type: string
          description: The timestamp for when the dataset was created.
          format: date-time
          example: '2023-09-15T10:52:34.398Z'
        updatedBy:
          type: string
          description: The id of the user who last updated the dataset.
          nullable: true
          example: 2ba1c430-086d-4b0b-a4cc-3120a2fab86a
        updated:
          type: string
          description: The timestamp for when the dataset was last updated.
          format: date-time
          example: '2023-09-15T10:52:34.398Z'
        filesOrder:
          type: array
          items:
            type: string
          description: The full names of the files in the order they should be presented to the user.
          nullable: true
        vcsMappingId:
          type: string
          description: Field with the Vcs Mapping Id (Alpha feature) (disabled on unity cloud).
          nullable: true
      additionalProperties: false
      description: Describes a dataset.
    assets.DatasetEntityMetadata:
      type: object
      allOf:
        - $ref: '#/components/schemas/assets.EntityMetadata'
      properties:
        name:
          type: string
          description: The name of the dataset.
          nullable: true
          example: Primary set
        primaryType:
          type: string
          description: The primary type of the dataset.
          nullable: true
          example: Material
        datasetTemplateId:
          type: string
          description: The dataset template identifier.
          nullable: true
          example: '5178392017736'
        fileOrder:
          type: array
          items:
            type: string
          description: Gets or sets the order of files in the dataset.
          nullable: true
        isVisible:
          type: boolean
          description: Gets or sets a value indicating whether the dataset is visible.
          nullable: true
        workflowName:
          type: string
          description: Gets or sets the workflow name associated with the dataset.
          nullable: true
      additionalProperties: false
      description: The metadata describing an dataset entity.
    assets.DatasetWithFiles:
      required:
        - datasetId
        - isVisible
        - name
        - status
        - systemTags
        - tags
      type: object
      properties:
        datasetId:
          minLength: 1
          type: string
          description: The id of the dataset.
          example: 2ba1c430-086d-4b0b-a4cc-3120a2fab86a
        name:
          minLength: 1
          type: string
          description: The name of the dataset.
          example: Thumbnails
        description:
          type: string
          description: An optional description of the dataset.
          nullable: true
          example: Dataset with thumbnails images of the asset.
        isVisible:
          type: boolean
          description: Whether the dataset is visible.
          example: true
        workflowName:
          type: string
          description: The name of the workflow.
          nullable: true
          example: thumbnail-generation
        tags:
          type: array
          items:
            type: string
          description: A list of tags associated with the dataset.
          example:
            - thumbnail
            - image
        portalMetadata:
          type: string
          description: The metadata from the frontend.
          nullable: true
        primaryType:
          type: string
          description: The primary type of the asset.
          nullable: true
        metadata:
          type: object
          additionalProperties:
            oneOf:
              - type: string
              - type: boolean
              - type: number
                format: double
              - type: array
                items:
                  oneOf:
                    - type: string
                    - type: boolean
                    - type: number
              - type: object
                additionalProperties:
                  oneOf:
                    - type: string
                    - type: boolean
                    - type: number
                      format: double
                    - type: array
                      items:
                        oneOf:
                          - type: string
                          - type: boolean
                          - type: number
          description: The user custom metadata.
          nullable: true
          example:
            StringField: string value
            BoolField: true
            Base64BytesField: dGVzdCB0ZXh0IGVuY29kaW5n
            DoubleField: 10.5
            FloatField: 10.005
            IntField: 10
            LongField: 9.223372E+18
            DateTimeField: '2023-08-16T08:49:12.1674180-04:00'
            ListField:
              - string value
              - 10
              - false
        systemMetadata:
          type: object
          additionalProperties:
            oneOf:
              - type: string
              - type: boolean
              - type: number
                format: double
              - type: array
                items:
                  oneOf:
                    - type: string
                    - type: boolean
                    - type: number
              - type: object
                additionalProperties:
                  oneOf:
                    - type: string
                    - type: boolean
                    - type: number
                      format: double
                    - type: array
                      items:
                        oneOf:
                          - type: string
                          - type: boolean
                          - type: number
          description: The system metadata that is not searchable.
          nullable: true
        status:
          minLength: 1
          type: string
          description: The status of the dataset.
        systemTags:
          type: array
          items:
            type: string
          description: The system tags associated with the dataset.
        createdBy:
          type: string
          description: The id of the user who created the dataset.
          nullable: true
          example: 2ba1c430-086d-4b0b-a4cc-3120a2fab86a
        created:
          type: string
          description: The timestamp for when the dataset was created.
          format: date-time
          example: '2023-09-15T10:52:34.398Z'
        updatedBy:
          type: string
          description: The id of the user who last updated the dataset.
          nullable: true
          example: 2ba1c430-086d-4b0b-a4cc-3120a2fab86a
        updated:
          type: string
          description: The timestamp for when the dataset was last updated.
          format: date-time
          example: '2023-09-15T10:52:34.398Z'
        filesOrder:
          type: array
          items:
            type: string
          description: The full names of the files in the order they should be presented to the user.
          nullable: true
        files:
          type: array
          items:
            $ref: '#/components/schemas/assets.AssetFileRead'
          description: The files in the dataset.
          nullable: true
        vcsMappingId:
          type: string
          description: Field with the Vcs Mapping Id (Alpha feature) (disabled on unity cloud).
          nullable: true
      additionalProperties: false
      description: Describes a dataset.
    assets.DuplicateAsset:
      required:
        - assetId
        - assetVersion
        - collectionPath
        - statusFlowId
      type: object
      properties:
        assetId:
          minLength: 1
          type: string
          description: The ID of the asset to duplicate.
          example: 65325f523a625f7e1acdb197
        assetVersion:
          minLength: 1
          type: string
          description: The version of the asset to duplicate.
          example: b095dce9-6034-44c4-a02a-d41d7afbfab5
        collectionPath:
          minLength: 1
          type: string
          description: The path to the collection to duplicate the asset to.
          example: MainCollection/Collection1
        statusFlowId:
          minLength: 1
          type: string
          description: The ID of the status flow to apply to the duplicated asset.
          example: 6ca4a681-a48a-4e8e-aa49-4112c2285b2c
      additionalProperties: false
      description: Represents a request to copy library asset to project.
    assets.EntityMetadata:
      type: object
      properties:
        description:
          type: string
          description: The description of the entity.
          nullable: true
          example: A blue car
        tags:
          type: array
          items:
            type: string
          description: The tags associated with the entity.
          nullable: true
          example:
            - Tag1
            - Tag2
        createdBy:
          type: string
          description: The user who created the entity.
          nullable: true
          example: '5772465996530'
        created:
          type: string
          description: The date and time the entity was created.
          format: date-time
          nullable: true
          example: '2023-09-15T10:52:34.398Z'
        metadata:
          type: object
          additionalProperties:
            type: object
          description: The user-defined metadata for the entity.
          nullable: true
        metadataSequenceNumber:
          type: integer
          description: The number of the metadata in the sequence of updates.
          format: int32
          example: 1
        parentSequenceNumber:
          type: integer
          description: 'The parent sequence number of the metadata, if applicable.'
          format: int32
          nullable: true
          example: 0
      additionalProperties: false
      description: The entity metadata class.
    assets.EntityMetadataChildFileInfo:
      type: object
      properties:
        datasetId:
          type: string
          description: The dataset id
          nullable: true
        filePath:
          type: string
          description: The file path of the child if applicable.
          nullable: true
      additionalProperties: false
      description: The info of a child file in entity metadata.
    assets.ErrorMessage:
      type: object
      properties:
        code:
          type: string
          nullable: true
        message:
          type: string
          nullable: true
        stackTrace:
          type: string
          nullable: true
        details:
          type: array
          items:
            $ref: '#/components/schemas/assets.ErrorMessageDetail'
          nullable: true
      additionalProperties: false
    assets.ErrorMessageDetail:
      type: object
      properties:
        errorCode:
          type: string
          nullable: true
        errorMessage:
          type: string
          nullable: true
      additionalProperties: false
    assets.ErrorResponse:
      type: object
      properties:
        title:
          type: string
          nullable: true
        detail:
          type: string
          nullable: true
        code:
          type: string
          nullable: true
        status:
          type: integer
          format: int32
        details:
          type: array
          items:
            type: object
          nullable: true
      additionalProperties: false
    assets.FieldDefinitionRead:
      type: object
      properties:
        name:
          type: string
          description: The name.
          nullable: true
          example: GeometryArea
        displayName:
          type: string
          description: The display name.
          nullable: true
          example: Geometry Area
        type:
          $ref: '#/components/schemas/assets.FieldDefinitionType'
        acceptedValues:
          type: array
          items:
            type: string
          description: "The values that are accepted in this field.\r\nfilled only when the type is Unity.ContentAssetCloud.Api.Domain.V1.FieldDefinitionType.Selection."
          nullable: true
          example:
            - Area
            - Volume
        multiSelection:
          type: boolean
          description: A value indicating whether the field is multi selection.
          nullable: true
        status:
          type: string
          description: The status.
          nullable: true
          example: Active|Deleted
        createdBy:
          type: string
          description: The user who created this field.
          nullable: true
          example: 2ba1c430-086d-4b0b-a4cc-3120a2fab86a
        created:
          type: string
          description: The date when this field was created.
          format: date-time
          nullable: true
          example: '2023-09-15T10:52:34.398Z'
        updatedBy:
          type: string
          description: The user who updated this field.
          nullable: true
          example: 2ba1c430-086d-4b0b-a4cc-3120a2fab86a
        updated:
          type: string
          description: The date when this field was updated.
          format: date-time
          nullable: true
          example: '2023-09-15T10:52:34.398Z'
        fieldOrigin:
          type: string
          description: The field origin (User or System).
          nullable: true
          example: User
      additionalProperties: false
      description: Represents a field definition.
    assets.FieldDefinitionType:
      enum:
        - Boolean
        - Selection
        - Number
        - Text
        - Timestamp
        - Url
        - User
      type: string
      description: The type of a field definition.
    assets.GetAssetCollectionsAcrossProjectsResponse:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/assets.ProjectWithCollections'
          description: The projects to which an asset is assigned.
          nullable: true
        total:
          type: integer
          description: The total of projects the consumer has access to.
          format: int64
      additionalProperties: false
      description: The response for a list asset collections request.
    assets.GetAssetDownloadUrlsResponse:
      type: object
      properties:
        files:
          type: array
          items:
            $ref: '#/components/schemas/assets.GetDownloadUrlAssetFileRead'
          description: The files.
          nullable: true
      additionalProperties: false
      description: Represents a response containing the download url's for all files and attachments in one asset.
    assets.GetAssetDownloadUrlsResponseV2:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/assets.GetDownloadUrlAssetFileRead'
          description: The files.
          nullable: true
        total:
          type: integer
          description: Total file count.
          format: int32
      additionalProperties: false
      description: Represents a response containing the download url's for all files and attachments in one asset.
    assets.GetAssetFileUrlResponse:
      type: object
      properties:
        url:
          type: string
          description: The asset file url.
          format: uri
          nullable: true
        isOriginalImage:
          type: boolean
          description: The flag that indicates if RedirectedUrl is the Url to the original image.
          nullable: true
      additionalProperties: false
      description: The response of a get asset file url request.
    assets.GetDownloadUrlAssetFileRead:
      type: object
      properties:
        datasetId:
          type: string
          description: The id of the dataset.
          nullable: true
        filePath:
          type: string
          description: The path of the file.
          nullable: true
        url:
          type: string
          description: The download url for the file. Download URLs are valid for ten minutes only.
          nullable: true
        isOriginalImage:
          type: boolean
          description: The flag that indicates if RedirectedUrl is the Url to the original image.
          nullable: true
      additionalProperties: false
      description: Describes an asset file with download url.
    assets.GetLabelsResponse:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/assets.LabelRead'
          description: The labels that match the request.
          nullable: true
        total:
          type: integer
          description: The total of labels available in the organization.
          format: int32
      additionalProperties: false
      description: The response for a get labels request.
    assets.InsertAssetsInCollectionRequest:
      type: object
      properties:
        assetIds:
          type: array
          items:
            type: string
          description: The asset ids.
          nullable: true
          example:
            - 65325f523a625f7e1acdb197
            - 65325f523a625f7e1acdb188
      additionalProperties: false
      description: The request to insert assets to a collection.
    assets.InsertAssetsInCollectionResponse:
      type: object
      properties:
        addedAssetIds:
          type: array
          items:
            type: string
          nullable: true
        ignoredInTrashAssetIds:
          type: array
          items:
            type: string
          nullable: true
        alreadyLinkedAssetIds:
          type: array
          items:
            type: string
          nullable: true
        assetErrors:
          type: array
          items:
            $ref: '#/components/schemas/assets.AssetError'
          nullable: true
      additionalProperties: false
      description: Represents the response from linking assets into a collection.
    assets.LabelRead:
      type: object
      properties:
        name:
          type: string
          description: The name of the label.
          nullable: true
        description:
          type: string
          description: The description of the label.
          nullable: true
        colour:
          type: string
          description: The hex color of the label.
          nullable: true
        isSystemLabel:
          type: boolean
          description: Whether the label is a system label or not.
        isUserAssignable:
          type: boolean
          description: Whether the label is user assignable.
        created:
          type: string
          description: The date the label was created.
          format: date-time
          nullable: true
        createdBy:
          type: string
          description: The user who created the label.
          nullable: true
        updated:
          type: string
          description: The date the label was updated.
          format: date-time
          nullable: true
        updatedBy:
          type: string
          description: The user who updated the label.
          nullable: true
      additionalProperties: false
      description: Represents a label.
    assets.LabelStatus:
      enum:
        - Active
        - Archived
      type: string
      description: The status of a label.
      format: int32
    assets.LabelsByVersion:
      type: object
      properties:
        assetVersion:
          type: string
          description: The version of the asset.
          nullable: true
          example: d3a30060-7213-4f15-a183-2e87267d0c12
        labels:
          type: array
          items:
            $ref: '#/components/schemas/assets.LabelRead'
          description: The labels currently assigned to the asset version.
          nullable: true
        archivedLabels:
          type: array
          items:
            $ref: '#/components/schemas/assets.LabelRead'
          description: The archived labels to the asset version.
          nullable: true
      additionalProperties: false
      description: The labels assigned by version.
    assets.Library:
      type: object
      properties:
        id:
          type: string
          description: The id for the library.
          nullable: true
          example: 02cc56be-968b-4a38-b06f-16dfb2953d95
        name:
          type: string
          description: The Library Name.
          nullable: true
          example: Test Library
        hasCollection:
          type: boolean
          description: The library has collection(s).
        supportedBy:
          type: array
          items:
            type: string
          description: The list of libraries that can be displayed on UI.
          nullable: true
      additionalProperties: false
      description: The representation of a library.
    assets.LibraryJob:
      type: object
      properties:
        id:
          type: string
          description: The id of the job for copying.
          nullable: true
          example: 6ca4a681-a48a-4e8e-aa49-4112c2285b2c
        name:
          type: string
          description: The name of the job for copying.
          nullable: true
          example: Importing Electricity Box
        type:
          type: string
          description: The type of the job for copying.
          nullable: true
          example: duplication
        progress:
          $ref: '#/components/schemas/assets.CopyLibraryAssetToProjectProgress'
        state:
          type: string
          description: The state of the job for copying.
          nullable: true
          example: prioritized
        results:
          $ref: '#/components/schemas/assets.CopyLibraryAssetToProjectResult'
        failedReason:
          type: string
          description: The reason for the failure of the job for copying.
          nullable: true
          example: Failed to copy the asset.
      additionalProperties: false
      description: Represents the response to copy library asset to project.
    assets.LinkAssetsToProjectRequest:
      type: object
      properties:
        assetIds:
          type: array
          items:
            type: string
          description: The IDs of the assets to be linked.
          nullable: true
          example:
            - 65325f523a625f7e1acdb197
            - 65325f523a625f7e1acdb198
            - 65325f523a625f7e1acdb199
      additionalProperties: false
      description: A request to an asset from a project to another project.
    assets.LinkAssetsToProjectResponse:
      type: object
      properties:
        addedAssetIds:
          type: array
          items:
            type: string
          nullable: true
        ignoredInTrashAssetIds:
          type: array
          items:
            type: string
          nullable: true
        alreadyLinkedAssetIds:
          type: array
          items:
            type: string
          nullable: true
        assetErrors:
          type: array
          items:
            $ref: '#/components/schemas/assets.AssetError'
          nullable: true
      additionalProperties: false
      description: Represents the response from linking assets to a project.
    assets.ListAssignedLabelsFromAssetResponse:
      type: object
      properties:
        assetVersionLabels:
          type: array
          items:
            $ref: '#/components/schemas/assets.LabelsByVersion'
          description: The collection of versions and it's assigned labels.
          nullable: true
        total:
          type: integer
          description: The total number of versions available in the asset.
          format: int32
      additionalProperties: false
      description: Represents the response for a list assigned labels from asset request.
    assets.MoveCollectionRequest:
      required:
        - destinationParentPath
      type: object
      properties:
        destinationParentPath:
          type: string
          description: The parent collection path to move the collection.
          example: MainCollection/ParentCollection
      additionalProperties: false
      description: The request to move the collection to another path.
    assets.MoveCollectionResponse:
      type: object
      properties:
        path:
          type: string
          description: The newly moved collection path.
          nullable: true
      additionalProperties: false
      description: The response for a move collection request.
    assets.OperationBase:
      type: object
      properties:
        id:
          type: string
          description: The id of the individual operation.
          nullable: true
        bulkId:
          type: string
          description: The id of the bulk operation.
          nullable: true
        organizationId:
          type: string
          description: The organization id.
          nullable: true
          example: '5772925064011'
        status:
          type: string
          description: The status of the operation.
          nullable: true
        failReason:
          type: string
          description: The reason for operation failure.
          nullable: true
        started:
          type: string
          description: The timestamp for when the bulk operation started.
          format: date-time
          nullable: true
        ended:
          type: string
          description: The timestamp for when the bulk operation ended.
          format: date-time
          nullable: true
        startedBy:
          type: string
          description: The creator of the bulk operation.
          nullable: true
          example: '5772465996530'
        operationType:
          type: string
          description: The creator of the bulk operation.
          nullable: true
        operationArguments:
          type: object
          additionalProperties:
            oneOf:
              - type: string
              - type: boolean
              - type: number
                format: double
              - type: array
                items:
                  oneOf:
                    - type: string
                    - type: boolean
                    - type: number
              - type: object
                additionalProperties:
                  oneOf:
                    - type: string
                    - type: boolean
                    - type: number
                      format: double
                    - type: array
                      items:
                        oneOf:
                          - type: string
                          - type: boolean
                          - type: number
          description: The arguments to the operation.
          nullable: true
        stage:
          type: string
          description: The stage of the bulk operation.
          nullable: true
        resourceType:
          type: string
          description: The type of resource the operation is performed on.
          nullable: true
      additionalProperties: false
      description: Class providing a definition of a single operation (as a constituent part of a bulk operation).
    assets.OperationDefinition:
      type: object
      properties:
        type:
          type: string
          description: The type of the operation.
          nullable: true
        description:
          type: string
          description: The description of the operation.
          nullable: true
        operationArguments:
          type: object
          additionalProperties:
            oneOf:
              - type: string
              - type: boolean
              - type: number
                format: double
              - type: array
                items:
                  oneOf:
                    - type: string
                    - type: boolean
                    - type: number
              - type: object
                additionalProperties:
                  oneOf:
                    - type: string
                    - type: boolean
                    - type: number
                      format: double
                    - type: array
                      items:
                        oneOf:
                          - type: string
                          - type: boolean
                          - type: number
          description: The arguments to the operation.
          nullable: true
        resourceType:
          type: string
          description: The type of resource the bulk operation is performed on.
          nullable: true
        operationFields:
          type: object
          additionalProperties:
            oneOf:
              - type: string
              - type: boolean
              - type: number
                format: double
              - type: array
                items:
                  oneOf:
                    - type: string
                    - type: boolean
                    - type: number
              - type: object
                additionalProperties:
                  oneOf:
                    - type: string
                    - type: boolean
                    - type: number
                      format: double
                    - type: array
                      items:
                        oneOf:
                          - type: string
                          - type: boolean
                          - type: number
          description: 'The resource-specific arguments to the operation, e.g. UnfrozenOnly = true.'
          nullable: true
      additionalProperties: false
      description: Class providing definition of an operation.
    assets.OperationSettings:
      required:
        - operationArguments
        - operationType
      type: object
      properties:
        operationType:
          minLength: 1
          type: string
          description: The type of the operation.
        operationArguments:
          type: object
          additionalProperties:
            oneOf:
              - type: string
              - type: boolean
              - type: number
                format: double
              - type: array
                items:
                  oneOf:
                    - type: string
                    - type: boolean
                    - type: number
              - type: object
                additionalProperties:
                  oneOf:
                    - type: string
                    - type: boolean
                    - type: number
                      format: double
                    - type: array
                      items:
                        oneOf:
                          - type: string
                          - type: boolean
                          - type: number
          description: The arguments to the operation.
      additionalProperties: false
      description: Settings for a bulk operation.
    assets.Pagination:
      required:
        - sortingField
      type: object
      properties:
        token:
          type: string
          description: The pagination token.
          nullable: true
        limit:
          maximum: 100
          minimum: 1
          type: integer
          description: The amount of assets per page.
          format: int32
        sortingField:
          minLength: 1
          type: string
          description: The field to sort the assets from the page.
        sortingOrder:
          type: string
          description: The order to sort the assets (Ascending/Descending).
          nullable: true
      additionalProperties: false
      description: The pagination of the request.
    assets.PartialCreateBulkOperationByCriteriaResponse:
      type: object
      properties:
        partial:
          $ref: '#/components/schemas/assets.CreateBulkOperationByCriteriaResponse'
        message:
          type: string
          description: The error message.
          nullable: true
        errorMessage:
          $ref: '#/components/schemas/assets.ErrorMessage'
      additionalProperties: false
      description: 'Represents a partial response when creating a bulk operation by criteria, indicating an error has happened along the way.'
    assets.PartialCreateNewAssetFileResponse:
      type: object
      properties:
        partial:
          $ref: '#/components/schemas/assets.CreateNewAssetFileResponse'
        message:
          type: string
          description: The error message.
          nullable: true
        errorMessage:
          $ref: '#/components/schemas/assets.ErrorMessage'
      additionalProperties: false
      description: 'Represents a partial response when creating a file, indicating an error has happened along the way.'
    assets.Project:
      type: object
      properties:
        organizationId:
          type: string
          description: The id for the organization.
          nullable: true
          example: '5772925064011'
        id:
          type: string
          description: The id for the project.
          nullable: true
          example: 02cc56be-968b-4a38-b06f-16dfb2953d95
        name:
          type: string
          description: The Name.
          nullable: true
          example: Test Project
        metadata:
          type: object
          additionalProperties:
            type: string
          description: The Metadata.
          nullable: true
        storageIds:
          type: array
          items:
            type: string
          description: The StorageIds.
          nullable: true
        status:
          $ref: '#/components/schemas/assets.ProjectStatus'
        userCount:
          type: integer
          description: '[Deprecated] The users in the project.'
          format: int32
          nullable: true
          deprecated: true
        hasCollection:
          type: boolean
          description: The project has collection(s).
          nullable: true
      additionalProperties: false
      description: The representation of a project.
    assets.ProjectStatus:
      enum:
        - Unknown
        - Active
        - Archived
      type: string
      description: Represents the status of a project.
    assets.ProjectWithCollections:
      type: object
      properties:
        id:
          type: string
          description: The id for the project.
          nullable: true
          example: 02cc56be-968b-4a38-b06f-16dfb2953d95
        collections:
          type: array
          items:
            $ref: '#/components/schemas/assets.CollectionRead'
          description: The list of collections.
          nullable: true
      additionalProperties: false
      description: The representation of a project.
    assets.ReadAssetCountOfCollectionResponse:
      type: object
      properties:
        count:
          type: integer
          description: The number of assets in collection.
          format: int32
      additionalProperties: false
      description: The response to read the number of assets in a collection request.
    assets.ReadAssetCountOfProjectResponse:
      type: object
      properties:
        count:
          type: integer
          description: The number of assets in project.
          format: int32
      additionalProperties: false
      description: The response to read the number of assets in a project request.
    assets.ReadAssetFileMetadataHistoryResponse:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/assets.AssetFileEntityMetadata'
          description: The asset file metadata history.
          nullable: true
        total:
          type: integer
          description: The total amount of asset versions in the history.
          format: int64
      additionalProperties: false
      description: The response containing the metadata history of an asset file.
    assets.ReadAssetReferencesRecursiveResponse:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/assets.Reference'
          description: The list of references that match the request.
          nullable: true
        unresolved:
          type: array
          items:
            $ref: '#/components/schemas/assets.ReferenceUnresolved'
          description: The list of unresolved references.
          nullable: true
      additionalProperties: false
      description: Represents the response for a list asset reference recursive request.
    assets.ReadAssetReferencesResponse:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/assets.Reference'
          description: The list of references that match the request.
          nullable: true
        total:
          type: integer
          description: The total number of references available for the asset.
          format: int32
      additionalProperties: false
      description: Represents the response for a list asset reference request.
    assets.ReadAssetVersionBatchOperationDetailsResponse:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/assets.AssetVersionOperation'
          description: The resulting list of operations.
          nullable: true
        status:
          type: string
          description: The status of the operation.
          nullable: true
        failReasons:
          type: array
          items:
            type: string
          description: Reasons for failure of the operation.
          nullable: true
        total:
          type: integer
          description: The total number of bulk operations in the batch operation.
          format: int32
      additionalProperties: false
      description: The response for reading batch operation details for an asset.
    assets.ReadAssetVersionBulkOperationDetailsResponse:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/assets.AssetVersionOperation'
          description: The resulting list of bulk operations.
          nullable: true
        status:
          type: string
          description: The status of the operation.
          nullable: true
        failReasons:
          type: array
          items:
            type: string
          description: Reasons for failure of the operation.
          nullable: true
        total:
          type: integer
          description: The total number of bulk operations in the organization.
          format: int32
      additionalProperties: false
      description: The response for reading bulk operation details for an asset.
    assets.ReadAssetVersionMetadataHistoryResponse:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/assets.AssetVersionEntityMetadata'
          description: The asset version metadata history.
          nullable: true
        total:
          type: integer
          description: The total amount of asset versions in the history.
          format: int64
      additionalProperties: false
      description: The response containing the metadata history of an asset version.
    assets.ReadAssetVersionStatusFlowResponse:
      type: object
      properties:
        statusFlow:
          $ref: '#/components/schemas/assets.StatusFlow'
        currentStatus:
          type: string
          description: The current status of the asset version.
          nullable: true
      additionalProperties: false
      description: Response to the request to read the status flow of an asset version.
    assets.ReadBulkOperationDefinitionsResponse:
      type: object
      properties:
        operationDefinitions:
          type: array
          items:
            $ref: '#/components/schemas/assets.OperationDefinition'
          description: The list of operation definitions
          nullable: true
      additionalProperties: false
      description: The response for reading bulk operation definitions.
    assets.ReadCollectionCountOfCollectionPathResponse:
      type: object
      properties:
        count:
          type: integer
          description: The number of collections in collection path.
          format: int32
      additionalProperties: false
      description: The response to read the number of collections in a collection path request.
    assets.ReadCollectionsResponseV2:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/assets.CollectionRead'
          description: The list of existing collections.
          nullable: true
        total:
          type: integer
          description: The total of collections available.
          format: int64
      additionalProperties: false
      description: The response to a read collection request.
    assets.ReadDatasetMetadataHistoryResponse:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/assets.DatasetEntityMetadata'
          description: The dataset metadata history.
          nullable: true
        total:
          type: integer
          description: The total amount of asset versions in the history.
          format: int64
      additionalProperties: false
      description: The response containing the metadata history of a dataset.
    assets.ReadDatasetsResponse:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/assets.DatasetWithFiles'
          description: The datasets that match the request.
          nullable: true
        total:
          type: integer
          description: The total of datasets available in the asset.
          format: int32
        next:
          type: string
          description: The pagination token for the next page.
          nullable: true
        previous:
          type: string
          description: The pagination token for the previous page.
          nullable: true
      additionalProperties: false
      description: The response for a get datasets request.
    assets.ReadFieldDefinitionsResponse:
      type: object
      properties:
        fieldDefinitions:
          type: array
          items:
            $ref: '#/components/schemas/assets.FieldDefinitionRead'
          description: The definition of the fields.
          nullable: true
        next:
          type: string
          description: The pagination token for next page.
          nullable: true
      additionalProperties: false
      description: The response with the existing field definitions.
    assets.ReadFieldDefinitionsResponseV2:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/assets.FieldDefinitionRead'
          description: The definition of the fields.
          nullable: true
        next:
          type: string
          description: The pagination token for next page.
          nullable: true
      additionalProperties: false
      description: The response with the existing field definitions.
    assets.ReadFilesResponse:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/assets.AssetFileRead'
          description: The files that match the request.
          nullable: true
        total:
          type: integer
          description: The total of files available in the asset dataset.
          format: int32
        next:
          type: string
          description: The pagination token for the next page.
          nullable: true
        previous:
          type: string
          description: The pagination token for the previous page.
          nullable: true
      additionalProperties: false
      description: The response for a get labels request.
    assets.ReadLibrariesResponse:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/assets.Library'
          description: The Libraries that match the request.
          nullable: true
        total:
          type: integer
          description: The total of libraries available.
          format: int32
      additionalProperties: false
      description: The response for a read libraries request.
    assets.ReadOrganizationEntitlementsAndUserSeatResponse:
      type: object
      properties:
        entitlements:
          type: array
          items:
            type: string
          description: The organization entitlements.
          nullable: true
        userSeats:
          type: array
          items:
            type: string
          description: The user seats in the organization.
          nullable: true
        validSeat:
          type: boolean
          description: Whether or not the user seat is valid.
      additionalProperties: false
      description: The response containing the org entitlements plus user seats.
    assets.ReadProjectsServiceAccountBelongsToResponse:
      type: object
      properties:
        projects:
          type: array
          items:
            $ref: '#/components/schemas/assets.Project'
          description: The projects.
          nullable: true
        projectsRole:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
          description: The mapping of project roles.
          nullable: true
      additionalProperties: false
      description: Represents the response of reading service accounts that belong to a project.
    assets.ReadProjectsUserBelongsToResponse:
      type: object
      properties:
        projects:
          type: array
          items:
            $ref: '#/components/schemas/assets.Project'
          description: The projects.
          nullable: true
        projectsRole:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
          description: The mapping of project roles.
          nullable: true
      additionalProperties: false
      description: Represents the response of reading users that belong to a project.
    assets.ReadReachableStatusesResponse:
      type: object
      properties:
        reachableStatuses:
          type: array
          items:
            type: string
          description: The list of statuses reachable from the current status.
          nullable: true
        currentStatus:
          type: string
          description: The current status.
          nullable: true
        statusFlowId:
          type: string
          description: The status flow ID.
          nullable: true
      additionalProperties: false
      description: Represents the response of a read reachable statuses request.
    assets.ReadStatusFlowsByOrganizationResponse:
      type: object
      properties:
        statusFlows:
          type: array
          items:
            $ref: '#/components/schemas/assets.StatusFlow'
          description: The list of status flows in the organization.
          nullable: true
        total:
          type: integer
          description: The total amount of status flows in the organization.
          format: int32
      additionalProperties: false
      description: Response to the request to read all status flows in an organization.
    assets.ReadUserBulkOperationsResponse:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/assets.BulkOperationInfo'
          description: The resulting list of bulk operation information.
          nullable: true
        total:
          type: integer
          description: The total number of bulk operations in the organization.
          format: int32
      additionalProperties: false
      description: The response for reading bulk operation definitions.
    assets.Reference:
      type: object
      properties:
        referenceId:
          type: string
          description: The id of the reference.
          nullable: true
        type:
          type: string
          description: The type of reference.
          nullable: true
        isValid:
          type: boolean
          description: The indicator whether the current reference is valid.
        source:
          $ref: '#/components/schemas/assets.SourceAsset'
        target:
          $ref: '#/components/schemas/assets.TargetAsset'
      additionalProperties: false
      description: The reference.
    assets.ReferenceFileFromDatasetRequest:
      required:
        - targetDatasetId
      type: object
      properties:
        targetDatasetId:
          minLength: 1
          type: string
          description: The id of the dataset to which the file will be referenced.
          example: f81e64c9-ebbc-4bf4-a7f4-ac342c9f05e8
      additionalProperties: false
      description: Request to reference a file from one dataset in another.
    assets.ReferenceUnresolved:
      type: object
      properties:
        assetId:
          type: string
          description: The asset id.
          nullable: true
        assetVersion:
          type: string
          description: The asset version.
          nullable: true
        next:
          type: string
          description: The pagination token to be used for asset reference resolution (if possible).
          nullable: true
      additionalProperties: false
      description: The unresolved asset reference.
    assets.ReferencesDirection:
      enum:
        - Downstream
        - Upstream
      type: string
      description: The recursive references search direction.
      format: int32
    assets.RemoveAssetsFromCollectionRequest:
      type: object
      properties:
        assetIds:
          type: array
          items:
            type: string
          description: The asset ids.
          nullable: true
          example:
            - 03c62469-e164-4b79-8cb2-5e792fa98777
            - 042fde6b-49b8-4017-a0dd-5f3a00f4bc5c
            - 67a4bbb5-62ef-44f2-9b6c-847f3108a879
      additionalProperties: false
      description: The request to remove assets from a collection.
    assets.RestoreAssetsRequest:
      type: object
      properties:
        assetIds:
          type: array
          items:
            type: string
          description: Gets or sets an array of asset IDs to be restored.
          nullable: true
      additionalProperties: false
      description: Represents a request to restore assets.
    assets.SearchAggregationsAcrossProjectsRequest:
      required:
        - aggregateBy
      type: object
      properties:
        projectIds:
          type: array
          items:
            type: string
          description: 'The project id(s). If null, aggregate assets of all projects the user has access.'
          nullable: true
          example:
            - 87cf845f-8ca7-4b2f-9cc1-c3d731335810
            - 5fd931ab-0950-4e9c-9264-d888f490b5a5
            - 5e7b9c90-b07e-490c-bfb7-80897f6f7e7e
        filter:
          $ref: '#/components/schemas/assets.AssetReadFilter'
        aggregateBy:
          type: object
          description: "The field that can be used in the aggregation. Can be either a string to aggregate for one field or array of strings to aggregate for multiple fields.\r\n\n<b>Possible values for aggregateBy: assetId, assetVersion, name, description, tags, systemTags, labels, status, primaryType, metadata.{FIELD_NAME}, systemMetadata.{FIELD_NAME}, datasets.name, datasets.description, datasets.isVisible, datasets.workflowName, datasets.primaryType, datasets.description, datasets.tags, datasets.portalMetadata, datasets.metadata.{FIELD_NAME}, datasets.systemMetadata.{FIELD_NAME}, datasets.primaryType, files.filePath, files.description, files.tags, files.portalMetadata, files.metadata.{FIELD_NAME}, files.systemMetadata.{FIELD_NAME}, files.userChecksum, files.userChecksum, files.fileSize</b>"
        maximumNumberOfItems:
          type: integer
          description: The maximum number of items to be returned.
          format: int32
          nullable: true
      additionalProperties: false
      description: The request for searching for aggregations.
    assets.SearchAggregationsRequest:
      required:
        - aggregateBy
      type: object
      properties:
        filter:
          $ref: '#/components/schemas/assets.AssetReadFilter'
        aggregateBy:
          type: object
          description: "The field that can be used in the aggregation. Can be either a string to aggregate for one field or array of strings to aggregate for multiple fields.\r\n\n<b>Possible values for aggregateBy: assetId, assetVersion, name, description, tags, systemTags, labels, status, primaryType, metadata.{FIELD_NAME}, systemMetadata.{FIELD_NAME}, datasets.name, datasets.description, datasets.isVisible, datasets.workflowName, datasets.primaryType, datasets.description, datasets.tags, datasets.portalMetadata, datasets.metadata.{FIELD_NAME}, datasets.systemMetadata.{FIELD_NAME}, datasets.primaryType, files.filePath, files.description, files.tags, files.portalMetadata, files.metadata.{FIELD_NAME}, files.systemMetadata.{FIELD_NAME}, files.userChecksum, files.userChecksum, files.fileSize</b>"
        maximumNumberOfItems:
          type: integer
          description: The maximum number of items to be returned.
          format: int32
          nullable: true
      additionalProperties: false
      description: The request for searching for aggregations.
    assets.SearchAggregationsResponse:
      type: object
      properties:
        aggregations:
          type: array
          items:
            $ref: '#/components/schemas/assets.Aggregation'
          description: The aggregations.
          nullable: true
          example:
            - value:
                primaryType: Material
              count: 42
      additionalProperties: false
      description: Represents the response containing the aggregations of the search.
    assets.SearchAssetVersionsRequest:
      type: object
      allOf:
        - $ref: '#/components/schemas/assets.SearchAssetsRequest'
      additionalProperties: false
      description: The request to read the assets versions.
    assets.SearchAssetsAcrossProjectsRequest:
      type: object
      properties:
        projectIds:
          type: array
          items:
            type: string
          description: The project ids.
          nullable: true
          example:
            - 87cf845f-8ca7-4b2f-9cc1-c3d731335810
            - 5fd931ab-0950-4e9c-9264-d888f490b5a5
            - 5e7b9c90-b07e-490c-bfb7-80897f6f7e7e
        filter:
          $ref: '#/components/schemas/assets.AssetReadFilter'
        includeFields:
          type: array
          items:
            type: string
          description: The fields to be returned.
          nullable: true
          example:
            - '*'
            - name
            - description
            - tags
            - primaryType
            - portalMetadata
            - metadata
            - metadata.yourFieldName
            - systemMetadata.fieldName
            - previewFileUrl
            - datasets.*
            - datasets.name
            - datasets.description
            - datasets.tags
            - datasets.portalMetadata
            - datasets.metadata
            - datasets.systemMetadata
            - datasets.primaryType
            - files.*
            - files.filePath
            - files.description
            - files.tags
            - files.portalMetadata
            - files.metadata
            - files.systemMetadata
            - files.userChecksum
            - files.fileSize
            - files.downloadUrl
            - files.previewURL
        pagination:
          $ref: '#/components/schemas/assets.Pagination'
      additionalProperties: false
      description: The request to search assets across projects.
    assets.SearchAssetsRequest:
      type: object
      properties:
        filter:
          $ref: '#/components/schemas/assets.AssetReadFilter'
        includeFields:
          type: array
          items:
            type: string
          description: The fields to be returned.
          nullable: true
          example:
            - '*'
            - name
            - description
            - tags
            - primaryType
            - portalMetadata
            - metadata
            - metadata.yourFieldName
            - VersionNumber
            - parentVersionNumber
            - systemMetadata.fieldName
            - previewFileUrl
            - changeLog
            - parentAssetVersion
            - datasets.*
            - datasets.name
            - datasets.description
            - datasets.tags
            - datasets.portalMetadata
            - datasets.metadata
            - datasets.systemMetadata
            - datasets.primaryType
            - files.*
            - files.filePath
            - files.description
            - files.tags
            - files.portalMetadata
            - files.metadata
            - files.systemMetadata
            - files.userChecksum
            - files.fileSize
            - files.downloadUrl
            - files.previewURL
        pagination:
          $ref: '#/components/schemas/assets.Pagination'
      additionalProperties: false
      description: The request to read the assets.
    assets.SearchAssetsResponse:
      type: object
      properties:
        next:
          type: string
          description: The pagination token for next page.
          nullable: true
        assets:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/assets.AssetRead'
              - $ref: '#/components/schemas/assets.AssetReadV2'
            description: The get asset response.
          description: The asset collection.
          nullable: true
      additionalProperties: false
      description: The response for the get assets.
    assets.SearchAssetsResponseV2:
      type: object
      properties:
        next:
          type: string
          description: The pagination token for next page.
          nullable: true
        results:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/assets.AssetRead'
              - $ref: '#/components/schemas/assets.AssetReadV2'
            description: The get asset response.
          description: The asset collection.
          nullable: true
      additionalProperties: false
      description: The response for the get assets.
    assets.SortOrder:
      enum:
        - Ascending
        - Descending
      type: string
      description: Order to sort the results.
    assets.SourceAsset:
      type: object
      properties:
        assetId:
          type: string
          description: The id of the asset.
          nullable: true
        assetVersion:
          type: string
          description: The asset version.
          nullable: true
        datasetId:
          type: string
          description: The optional source dataset identifier.
          nullable: true
      additionalProperties: false
      description: The reference's source asset.
    assets.StartAssetTransformationRequest:
      type: object
      properties:
        workflowScope:
          type: string
          description: The workflow scope. Used for internal-only custom workflows.
          nullable: true
          example: Custom
        inputFiles:
          type: array
          items:
            type: string
          description: The list of input files.
          nullable: true
          example:
            - filename.png
            - my-folder/my-file.txt
        extraParameters:
          type: object
          additionalProperties:
            oneOf:
              - type: string
              - type: boolean
              - type: number
                format: double
              - type: array
                items:
                  oneOf:
                    - type: string
                    - type: boolean
                    - type: number
              - type: object
                additionalProperties:
                  oneOf:
                    - type: string
                    - type: boolean
                    - type: number
                      format: double
                    - type: array
                      items:
                        oneOf:
                          - type: string
                          - type: boolean
                          - type: number
          description: The extra parameters for workflow engine.
          nullable: true
          example:
            useDracoCompression: '1'
        useAdditiveOutputDataset:
          type: boolean
          description: The flag use additive output dataset.
          example: true
      additionalProperties: false
      description: The request to start asset transformation operation.
    assets.StartAssetTransformationResponse:
      type: object
      properties:
        transformationId:
          type: string
          description: Transformation operation identifier.
          nullable: true
      additionalProperties: false
      description: The start asset transformations operation response.
    assets.StatusFlow:
      type: object
      properties:
        id:
          type: string
          description: The id of the status flow.
          nullable: true
        organizationId:
          type: string
          description: The organization id.
          nullable: true
        name:
          type: string
          description: The name of the status flow.
          nullable: true
        assetStatuses:
          type: array
          items:
            $ref: '#/components/schemas/assets.AssetStatus'
          description: The asset statuses.
          nullable: true
        transitions:
          type: array
          items:
            $ref: '#/components/schemas/assets.Transition'
          description: The transitions.
          nullable: true
        startAssetStatusId:
          type: string
          description: The start id of the status flow.
          nullable: true
        isDefault:
          type: boolean
          description: If this status flow is a default flow.
      additionalProperties: false
      description: The representation of a status flow.
    assets.SubmitAssetVersionRequest:
      type: object
      properties:
        forceFreeze:
          type: boolean
          description: "Submitting with forceFreeze will immediately freeze the asset, even if there are transformations running.\r\n            The running transformation will be cancelled."
          nullable: true
          example: false
        changeLog:
          type: string
          description: The change log for the asset version.
          nullable: true
          example: '- Added tag ''Wood'' to asset;\r\n- Added a metallic map to material;'
      additionalProperties: false
      description: Represents a request to submit an unfrozen asset version.
    assets.SubmitAssetVersionResponse:
      type: object
      properties:
        versionNumber:
          type: integer
          description: The version number assigned on commit.
          format: int32
      additionalProperties: false
      description: The response containing details of the submitted asset version.
    assets.TargetAsset:
      type: object
      properties:
        assetId:
          type: string
          description: The id of the asset.
          nullable: true
        assetVersion:
          type: string
          description: The asset version.
          nullable: true
        labelName:
          type: string
          description: The name of the label.
          nullable: true
        datasetId:
          type: string
          description: The optional target dataset identifier.
          nullable: true
      additionalProperties: false
      description: The reference's target asset.
    assets.TransformationReadResponse:
      type: object
      properties:
        id:
          type: string
          description: The read dataset transformation id.
          nullable: true
        userId:
          type: string
          description: The user id.
          nullable: true
        assetId:
          type: string
          description: The asset id.
          nullable: true
        assetVersion:
          type: string
          description: The asset version.
          nullable: true
        inputDatasetId:
          type: string
          description: The input dataset id.
          nullable: true
        inputFiles:
          type: array
          items:
            type: string
          description: The input files.
          nullable: true
        outputDatasetId:
          type: string
          description: The output dataset id.
          nullable: true
        linkDatasetId:
          type: string
          description: The link dataset id.
          nullable: true
        workflowType:
          type: string
          description: The workflow type.
          nullable: true
        jobId:
          type: string
          description: The job id.
          nullable: true
        status:
          $ref: '#/components/schemas/assets.TransformationStatus'
        errorMessage:
          type: string
          description: The error message.
          nullable: true
        progress:
          type: integer
          description: Transformation progress status. In percent.
          format: int32
        createdOn:
          type: string
          description: The Date of create transform.
          format: date-time
        updatedAt:
          type: string
          description: The Date of update transform.
          format: date-time
        startedAt:
          type: string
          description: The Date of start transform.
          format: date-time
          nullable: true
        workflowScope:
          type: string
          description: The workflow scope
          nullable: true
        customName:
          type: string
          description: The Custom workflow name
          nullable: true
      additionalProperties: false
      description: Read and search dataset transformation endpoint result.
    assets.TransformationStatus:
      enum:
        - Pending
        - Running
        - Succeeded
        - Failed
        - Error
        - Terminated
        - Skipped
        - TimedOut
        - Terminating
        - Queued
      type: string
      description: Transformation processing status.
    assets.Transition:
      type: object
      properties:
        id:
          type: string
          description: The transition identifier.
          nullable: true
        fromStatusId:
          type: string
          description: The id of the start status.
          nullable: true
        toStatusId:
          type: string
          description: The id of the end status.
          nullable: true
        throughPredicate:
          $ref: '#/components/schemas/assets.AssetPredicate'
      additionalProperties: false
      description: The representation of an asset predicate.
    assets.TrashDetails:
      type: object
      properties:
        projectId:
          type: string
          description: The project's uri.
          nullable: true
        movedToTrashBy:
          type: string
          description: The user id of the user that moved the asset to the trash project.
          nullable: true
        movedToTrashAt:
          type: string
          description: The time that the asset was moved to the trash project.
          format: date-time
      additionalProperties: false
      description: Describes trash details in the catalog writer.
    assets.UnassignLabelsFromAssetVersionRequest:
      required:
        - labelNames
      type: object
      properties:
        labelNames:
          type: array
          items:
            type: string
          description: "The labels to unassign to the asset.\r\nNote: Latest and Pending labels are restricted labels, and can not be directly assigned or unassigned."
          example:
            - release-candidate
            - production
      additionalProperties: false
      description: Represents a request to unassign labels from an asset version.
    assets.UnlinkAssetsFromProjectRequest:
      type: object
      properties:
        assetIds:
          type: array
          items:
            type: string
          description: The IDs of the assets to be linked.
          nullable: true
          example:
            - 65325f523a625f7e1acdb197
            - 65325f523a625f7e1acdb198
            - 65325f523a625f7e1acdb199
      additionalProperties: false
      description: A request to an asset from a project to another project.
    assets.UpdateAssetFileContentRequest:
      type: object
      properties:
        userChecksum:
          type: string
          description: The checksum of the file.
          nullable: true
          example: 5a828ca5302b19ae8c7a66149f3e1e98
        fileSize:
          type: integer
          description: The size of the file.
          format: int64
          nullable: true
          example: 4096
      additionalProperties: false
      description: Represents the request to update an existing file content in an existing asset.
    assets.UpdateAssetFileContentResponse:
      type: object
      properties:
        uploadUrl:
          type: string
          description: The upload url of the asset. Expires after one hour.
          format: uri
          nullable: true
      additionalProperties: false
      description: Represents a response of updating a file content in an asset.
    assets.UpdateAssetFileRequest:
      type: object
      properties:
        description:
          type: string
          description: The new file description.
          nullable: true
          example: File from technical equipment
        tags:
          type: array
          items:
            type: string
          description: The new file tag(s).
          nullable: true
          example:
            - Industry
            - CAD
        portalMetadata:
          type: string
          description: The new searchable custom metadata.
          nullable: true
        metadata:
          type: object
          additionalProperties:
            oneOf:
              - type: string
              - type: boolean
              - type: number
                format: double
              - type: array
                items:
                  oneOf:
                    - type: string
                    - type: boolean
                    - type: number
              - type: object
                additionalProperties:
                  oneOf:
                    - type: string
                    - type: boolean
                    - type: number
                      format: double
                    - type: array
                      items:
                        oneOf:
                          - type: string
                          - type: boolean
                          - type: number
          description: The metadata of the asset file.
          nullable: true
          example:
            Triangle count: '45002'
            IsRigged: 'True'
            FileExtension: fbx
            BoundingBoxSize (m): '3.02'
            CameraType: Sony X
            Lens: Leica
            CapturedTime: '2023-08-16T08:49:12.1674180-04:00'
            FPS: '29.43'
            Length (s): '143'
            Resolution: '1024'
            BitDepth: '32'
            Bitrate: 320 Kbps
        systemMetadata:
          type: object
          additionalProperties:
            oneOf:
              - type: string
              - type: boolean
              - type: number
                format: double
              - type: array
                items:
                  oneOf:
                    - type: string
                    - type: boolean
                    - type: number
              - type: object
                additionalProperties:
                  oneOf:
                    - type: string
                    - type: boolean
                    - type: number
                      format: double
                    - type: array
                      items:
                        oneOf:
                          - type: string
                          - type: boolean
                          - type: number
          description: '[Deprecated] This field is deprecated for this request and is read-only. Please use the Metadata field to store additional information.'
          nullable: true
        mainFile:
          type: boolean
          description: Flag to indicate the main file.
          nullable: true
        updateEvenIfFrozen:
          type: boolean
          description: Flag to indicate whether it should update even if asset is frozen.
      additionalProperties: false
      description: Represents the request to update an existing file in an existing asset.
    assets.UpdateAssetFileRequestV2:
      type: object
      properties:
        description:
          type: string
          description: The new file description.
          nullable: true
          example: File from technical equipment
        tags:
          type: array
          items:
            type: string
          description: The new file tag(s).
          nullable: true
          example:
            - Industry
            - CAD
        portalMetadata:
          type: string
          description: The new searchable custom metadata.
          nullable: true
        metadata:
          type: object
          additionalProperties:
            oneOf:
              - type: string
              - type: boolean
              - type: number
                format: double
              - type: array
                items:
                  oneOf:
                    - type: string
                    - type: boolean
                    - type: number
              - type: object
                additionalProperties:
                  oneOf:
                    - type: string
                    - type: boolean
                    - type: number
                      format: double
                    - type: array
                      items:
                        oneOf:
                          - type: string
                          - type: boolean
                          - type: number
          description: The metadata of the asset file.
          nullable: true
          example:
            Triangle count: '45002'
            IsRigged: 'True'
            FileExtension: fbx
            BoundingBoxSize (m): '3.02'
            CameraType: Sony X
            Lens: Leica
            CapturedTime: '2023-08-16T08:49:12.1674180-04:00'
            FPS: '29.43'
            Length (s): '143'
            Resolution: '1024'
            BitDepth: '32'
            Bitrate: 320 Kbps
        mainFile:
          type: boolean
          description: Flag to indicate the main file.
          nullable: true
      additionalProperties: false
      description: Represents the request to update an existing file in an existing asset.
    assets.UpdateAssetRequest:
      type: object
      properties:
        name:
          type: string
          description: The new name of the asset.
          nullable: true
          example: Tree material
        description:
          type: string
          description: The new description for the asset.
          nullable: true
          example: Example tree material
        tags:
          type: array
          items:
            type: string
          description: The new tags for the asset.
          nullable: true
        primaryType:
          type: string
          description: The primary type of the asset.
          nullable: true
        portalMetadata:
          type: string
          description: The metadata provided by the frontend.
          nullable: true
        metadata:
          type: object
          additionalProperties:
            oneOf:
              - type: string
              - type: boolean
              - type: number
                format: double
              - type: array
                items:
                  oneOf:
                    - type: string
                    - type: boolean
                    - type: number
              - type: object
                additionalProperties:
                  oneOf:
                    - type: string
                    - type: boolean
                    - type: number
                      format: double
                    - type: array
                      items:
                        oneOf:
                          - type: string
                          - type: boolean
                          - type: number
          description: "The searchable custom metadata.\r\nMetadata fields need to exist in the organization library.\r\nRefer to Metadata field management endpoints."
          nullable: true
          example:
            MarketingPitch: Your marketing pitch
            Price: 0.5
            Length: 200
            ScorePoints: 15
            IsReadyForPostProcess: true
            ValidatedByManager: false
            ConnectedToWebPortal: false
            LaunchDate: '2023-08-16T08:49:12.1674180'
            LastCheckPlan: '2023-08-16T08:49:12.1674180'
            DateScanned: 2023-06-05T010:35:05.1674180
            License: https://assetfilelicense.com
            WebProductPage: https://productpage.com
            RepoSource: https://github.com/myprojectrepo
            Priority: Low|Medium|High
            Certifications: ISO 4905|ISO 3013
            TeamCharter: Seoul|Shanghai|Jakarta
            IndustryType:
              - Architecture
              - Industrial
              - Energy and Oil
            Sprints:
              - 1
              - 2
              - 3
              - 4
              - 5
            Owner: '5772465996530'
            Reviewer: '5772465996530'
            Project Lead: '5772465996530'
        systemMetadata:
          type: object
          additionalProperties:
            oneOf:
              - type: string
              - type: boolean
              - type: number
                format: double
              - type: array
                items:
                  oneOf:
                    - type: string
                    - type: boolean
                    - type: number
              - type: object
                additionalProperties:
                  oneOf:
                    - type: string
                    - type: boolean
                    - type: number
                      format: double
                    - type: array
                      items:
                        oneOf:
                          - type: string
                          - type: boolean
                          - type: number
          description: '[Deprecated] This field is deprecated for this request and is read-only. Please use the Metadata field to store additional information.'
          nullable: true
        previewFilePath:
          type: string
          description: The file path of the asset cover image.
          nullable: true
          example: my-folder/my-file.txt
      additionalProperties: false
      description: Represents a request to update an existing asset.
    assets.UpdateCollectionRequest:
      type: object
      properties:
        name:
          pattern: '^[^%]+$'
          type: string
          description: The updated name of the collection.
          nullable: true
          example: Trees
        description:
          type: string
          description: The updated description of the collection.
          nullable: true
          example: A collection of trees
      additionalProperties: false
      description: The request to update an existing collection.
    assets.UpdateDatasetRequest:
      type: object
      properties:
        name:
          type: string
          description: The new name of the dataset.
          nullable: true
        description:
          type: string
          description: The new description field of the dataset.
          nullable: true
          example: Previews
        isVisible:
          type: boolean
          description: Parameter to display the dataset on the frontend. Not yet enabled on Unity Asset Manager. Coming soon
          nullable: true
          example: true
        tags:
          type: array
          items:
            type: string
          description: The new tags for the dataset.
          nullable: true
          example:
            - Tree
            - Landscape
        portalMetadata:
          type: string
          description: The metadata provided by the frontend.
          nullable: true
        primaryType:
          type: string
          description: The primary type of the asset.
          nullable: true
        metadata:
          type: object
          additionalProperties:
            oneOf:
              - type: string
              - type: boolean
              - type: number
                format: double
              - type: array
                items:
                  oneOf:
                    - type: string
                    - type: boolean
                    - type: number
              - type: object
                additionalProperties:
                  oneOf:
                    - type: string
                    - type: boolean
                    - type: number
                      format: double
                    - type: array
                      items:
                        oneOf:
                          - type: string
                          - type: boolean
                          - type: number
          description: The new searchable custom metadata.
          nullable: true
          example:
            StringField: string value
            BoolField: true
            Base64BytesField: dGVzdCB0ZXh0IGVuY29kaW5n
            DoubleField: 10.5
            FloatField: 10.005
            IntField: 10
            LongField: 9.223372E+18
            DateTimeField: '2023-08-16T08:49:12.1674180-04:00'
            ListField:
              - string value
              - 10
              - false
        systemMetadata:
          type: object
          additionalProperties:
            oneOf:
              - type: string
              - type: boolean
              - type: number
                format: double
              - type: array
                items:
                  oneOf:
                    - type: string
                    - type: boolean
                    - type: number
              - type: object
                additionalProperties:
                  oneOf:
                    - type: string
                    - type: boolean
                    - type: number
                      format: double
                    - type: array
                      items:
                        oneOf:
                          - type: string
                          - type: boolean
                          - type: number
          description: '[Deprecated] This field is deprecated for this request and is read-only. Please use the Metadata field to store additional information.'
          nullable: true
        filesOrder:
          type: array
          items:
            type: string
          description: The order of the files through an array of FilePaths
          nullable: true
          example:
            - my-folder/my-file.txt
            - fileName.png
      additionalProperties: false
      description: A request to update a dataset.
    assets.UpdateFieldDefinitionRequest:
      type: object
      properties:
        displayName:
          type: string
          description: The new display name.
          nullable: true
          example: Origin of the asset
        acceptedValues:
          type: array
          items:
            type: string
          description: 'The accepted values for the field definition. Override existing accepted values. If null, it will be ignored.'
          nullable: true
          example:
            - From External Marketplace
      additionalProperties: false
      description: Request to update a field definition.
    assets.UpdateLabelRequest:
      type: object
      properties:
        name:
          type: string
          description: The new name of the label.
          nullable: true
          example: release-candidate
        description:
          type: string
          description: The new description of the label.
          nullable: true
          example: Assets ready to be used in 'release-candidate' releases.
        colour:
          type: string
          description: The new color of the label.
          nullable: true
          example: '#00FF00'
      additionalProperties: false
      description: A request to update a non system label in an organization.
    assets.UrlType:
      enum:
        - Upload
        - Download
      type: string
      description: The types of url's to for the uri resolver.
  securitySchemes:
    Client:
      type: http
      description: 'To get started with Authentication, please visit the [Client Authentication section](https://services.docs.unity.com/docs/client-auth).'
      scheme: bearer
    ServiceAccount:
      type: http
      scheme: basic
security:
  - Client: [ ]
  - ServiceAccount: [ ]
tags:
  - name: Asset management
    description: Operations related to asset management.
  - name: Dataset management
    description: Operations related to dataset management.
  - name: File management
    description: Operations related to file management.
  - name: Metadata fields management
    description: Operations related to metadata fields management.
  - name: Project management
    description: Operations related to project management.
  - name: Collection management
    description: Operations related to collection management.
  - name: Service account management
    description: Operations related to service account management.
  - name: Asset transformations
    description: Operations related to asset transformations.
  - name: User management
    description: Operations related to user management.
  - name: Label management
    description: Operations related to label management.
  - name: Asset reference management
    description: Operations related to asset reference management.
  - name: Organization management
    description: Operations related to organization management.
  - name: Bulk Operations management
    description: Operations related to bulk operations management.
  - name: Library Management
    description: Operations related to library management.